<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java 算法模版</title>
      <link href="/2025/06/27/06%20Java%20%E7%AE%97%E6%B3%95%E6%A8%A1%E7%89%88/"/>
      <url>/2025/06/27/06%20Java%20%E7%AE%97%E6%B3%95%E6%A8%A1%E7%89%88/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="基础模版"><a href="#基础模版" class="headerlink" title="基础模版"></a>基础模版</h1><h3 id="代码模版"><a href="#代码模版" class="headerlink" title="代码模版"></a>代码模版</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">// int n = Integer.parseInt(reader.readLine());</span></span><br><span class="line"><span class="comment">// int[] a = Arrays.stream(reader.readLine().split(&quot; &quot;)).mapToInt(Integer::parseInt).toArray();</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in));</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">BufferedWriter</span> <span class="variable">log</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(System.out));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        reader.close();</span><br><span class="line">        log.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="对拍模版"><a href="#对拍模版" class="headerlink" title="对拍模版"></a>对拍模版</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BeatCode</span> &#123; <span class="comment">// 对拍模版</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(FunctionInterface acFun, FunctionInterface myFun, List&lt;Object[]&gt; params)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; params.size(); i++) &#123;</span><br><span class="line">            Object[] param = params.get(i);</span><br><span class="line">            <span class="type">String</span> <span class="variable">ac</span> <span class="operator">=</span> String.valueOf(acFun.apply(param)), my = String.valueOf(myFun.apply(param));</span><br><span class="line">            <span class="keyword">if</span> (!ac.equals(my)) &#123;</span><br><span class="line">                System.out.println((i + <span class="number">1</span>) + <span class="string">&quot; / &quot;</span> + params.size());</span><br><span class="line">                System.out.println(<span class="string">&quot;测试用例：\n&quot;</span> + Arrays.toString(param));</span><br><span class="line">                System.out.println(<span class="string">&quot;预期结果：\n&quot;</span> + ac);</span><br><span class="line">                System.out.println(<span class="string">&quot;你的输出：\n&quot;</span> + my);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">FunctionInterface</span> &#123; <span class="comment">// 函数式接口</span></span><br><span class="line">    Object <span class="title function_">apply</span><span class="params">(Object... args)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用示例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// int n = Integer.parseInt(reader.readLine());</span></span><br><span class="line"><span class="comment">// int[] a = Arrays.stream(reader.readLine().split(&quot; &quot;)).mapToInt(Integer::parseInt).toArray();</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">ac_fun</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123; <span class="comment">// 正确代码</span></span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">my_fun</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123; <span class="comment">// 测试代码</span></span><br><span class="line">        <span class="keyword">return</span> Math.abs(a + b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;Object[]&gt; getParams() &#123;</span><br><span class="line">        List&lt;Object[]&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">Random</span> <span class="variable">rand</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">500</span>; i++) &#123;</span><br><span class="line">            res.add(<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;rand.nextInt(<span class="number">20000</span>) - <span class="number">10000</span>, rand.nextInt(<span class="number">20000</span>) - <span class="number">10000</span>&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MainTest</span> <span class="variable">test</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MainTest</span>();</span><br><span class="line">        <span class="type">FunctionInterface</span> <span class="variable">acFun</span> <span class="operator">=</span> (params) -&gt; &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> (<span class="type">int</span>) params[<span class="number">0</span>], b = (<span class="type">int</span>) params[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">return</span> test.ac_fun(a, b);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">FunctionInterface</span> <span class="variable">myFun</span> <span class="operator">=</span> (params) -&gt; &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> (<span class="type">int</span>) params[<span class="number">0</span>];</span><br><span class="line">            <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> (<span class="type">int</span>) params[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">return</span> test.my_fun(a, b);</span><br><span class="line">        &#125;;</span><br><span class="line">        BeatCode.run(acFun, myFun, getParams()); <span class="comment">// 开始对拍</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="经典模版"><a href="#经典模版" class="headerlink" title="经典模版"></a>经典模版</h1><h3 id="回文子串"><a href="#回文子串" class="headerlink" title="回文子串"></a>回文子串</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PalindromicString</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span>[][] getIsP(String s) &#123; <span class="comment">// 判断子串 s[i:j] 是否是回文的</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> s.length();</span><br><span class="line">        <span class="type">boolean</span>[][] f = <span class="keyword">new</span> <span class="title class_">boolean</span>[n][n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            Arrays.fill(f[i], <span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt; n; j++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> j - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">                f[i][j] = s.charAt(i) == s.charAt(j) &amp;&amp; f[i + <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">return</span> f;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="回文数"><a href="#回文数" class="headerlink" title="回文数"></a>回文数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PalindromicNumber</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] getArray(<span class="type">int</span> U) &#123; <span class="comment">// 返回所有位于[1, 10 ^ U]内的回文数</span></span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">base</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (base &lt;= Math.pow(<span class="number">10</span>, (U - <span class="number">1</span>) / <span class="number">2</span>)) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> base; i &lt; base * <span class="number">10</span>; i++) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> i, t = i / <span class="number">10</span>;</span><br><span class="line">                <span class="keyword">while</span> (t != <span class="number">0</span>) &#123;</span><br><span class="line">                    x = x * <span class="number">10</span> + t % <span class="number">10</span>;</span><br><span class="line">                    t /= <span class="number">10</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                res.add(x);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (base &lt;= Math.pow(<span class="number">10</span>, U / <span class="number">2</span> - <span class="number">1</span>)) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> base; i &lt; base * <span class="number">10</span>; i++) &#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> i, t = i;</span><br><span class="line">                    <span class="keyword">while</span> (t != <span class="number">0</span>) &#123;</span><br><span class="line">                        x = x * <span class="number">10</span> + t % <span class="number">10</span>;</span><br><span class="line">                        t /= <span class="number">10</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    res.add(x);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            base *= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res.stream().mapToInt(Integer::valueOf).toArray();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最长公共子序列"><a href="#最长公共子序列" class="headerlink" title="最长公共子序列"></a>最长公共子序列</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LCS</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">longestCommonSubsequence</span><span class="params">(<span class="type">int</span>[] arr1, <span class="type">int</span>[] arr2)</span> &#123; <span class="comment">// 最长公共子序列</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> arr2.length;</span><br><span class="line">        <span class="type">int</span>[] f = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> x: arr1) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">pre</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> f[j + <span class="number">1</span>];</span><br><span class="line">                f[j + <span class="number">1</span>] = x == arr2[j] ? pre + <span class="number">1</span> : Math.max(f[j], f[j + <span class="number">1</span>]);</span><br><span class="line">                pre = tmp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> f[n];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">longestCommonSubsequence</span><span class="params">(String s, String t)</span> &#123; <span class="comment">// 最长公共子序列</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> s.length(), m = t.length();</span><br><span class="line">        <span class="type">int</span>[] f = <span class="keyword">new</span> <span class="title class_">int</span>[m + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">pre</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> f[j + <span class="number">1</span>];</span><br><span class="line">                f[j + <span class="number">1</span>] = s.charAt(i) == t.charAt(j) ? pre + <span class="number">1</span> : Math.max(f[j], f[j + <span class="number">1</span>]);</span><br><span class="line">                pre = tmp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> f[m];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最长递增子序列"><a href="#最长递增子序列" class="headerlink" title="最长递增子序列"></a>最长递增子序列</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LIS</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">lengthOfLIS</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123; <span class="comment">// 最长递增子序列</span></span><br><span class="line">        ArrayList&lt;Integer&gt; g = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> x: nums) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> bisectLeft(g, x);</span><br><span class="line">            <span class="keyword">if</span> (i == g.size()) g.add(x);</span><br><span class="line">            <span class="keyword">else</span> g.set(i, x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> g.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">bisectLeft</span><span class="params">(ArrayList&lt;Integer&gt; g, <span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> g.size();</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = n - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + right &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (g.get(mid) &lt; x) left = mid + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> right = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h3 id="前缀和"><a href="#前缀和" class="headerlink" title="前缀和"></a>前缀和</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">OnePrefixSum</span> &#123; <span class="comment">// 一维前缀和</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span>[] P;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">OnePrefixSum</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span>[] p = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            p[i + <span class="number">1</span>] += p[i] + nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        P = p;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getSum</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123; <span class="comment">// 区间求和</span></span><br><span class="line">        <span class="keyword">return</span> P[j + <span class="number">1</span>] - P[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TwoPrefixSum</span> &#123; <span class="comment">// 二维前缀和</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span>[][] P;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TwoPrefixSum</span><span class="params">(<span class="type">int</span>[][] mat)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> mat.length, n = mat[<span class="number">0</span>].length;</span><br><span class="line">        <span class="type">int</span>[][] p = <span class="keyword">new</span> <span class="title class_">int</span>[m + <span class="number">1</span>][n + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                p[i + <span class="number">1</span>][j + <span class="number">1</span>] = p[i][j + <span class="number">1</span>] + p[i + <span class="number">1</span>][j] - p[i][j] + mat[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        P = p;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getSum</span><span class="params">(<span class="type">int</span> x1, <span class="type">int</span> y1, <span class="type">int</span> x2, <span class="type">int</span> y2)</span> &#123; <span class="comment">// 区域求和</span></span><br><span class="line">        <span class="keyword">return</span> P[x2 + <span class="number">1</span>][y2 + <span class="number">1</span>] - P[x1][y2 + <span class="number">1</span>] - P[x2 + <span class="number">1</span>][y1] + P[x1][y1];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="差分"><a href="#差分" class="headerlink" title="差分"></a>差分</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Difference</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">oneDifference</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span>[][] operates)</span> &#123; <span class="comment">// 一维差分</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span>[] dif = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] a: operates) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> a[<span class="number">0</span>], j = a[<span class="number">1</span>], d = a[<span class="number">2</span>];</span><br><span class="line">            dif[i] += d;</span><br><span class="line">            dif[j + <span class="number">1</span>] -= d;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            dif[i + <span class="number">1</span>] += dif[i];</span><br><span class="line">            nums[i] += dif[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">twoDifference</span><span class="params">(<span class="type">int</span>[][] mat, <span class="type">int</span>[][] operates)</span> &#123; <span class="comment">// 二维差分</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> mat.length, n = mat[<span class="number">0</span>].length;</span><br><span class="line">        <span class="type">int</span>[][] dif = <span class="keyword">new</span> <span class="title class_">int</span>[m + <span class="number">2</span>][n + <span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] a: operates) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">x1</span> <span class="operator">=</span> a[<span class="number">0</span>], y1 = a[<span class="number">1</span>], x2 = a[<span class="number">2</span>], y2 = a[<span class="number">3</span>], d = a[<span class="number">4</span>];</span><br><span class="line">            dif[x2 + <span class="number">2</span>][y2 + <span class="number">2</span>] += d;</span><br><span class="line">            dif[x1 + <span class="number">1</span>][y2 + <span class="number">2</span>] -= d;</span><br><span class="line">            dif[x2 + <span class="number">2</span>][y1 + <span class="number">1</span>] -= d;</span><br><span class="line">            dif[x1 + <span class="number">1</span>][y1 + <span class="number">1</span>] += d;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">                dif[i][j] += dif[i - <span class="number">1</span>][j] + dif[i][j - <span class="number">1</span>] - dif[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">                mat[i - <span class="number">1</span>][j - <span class="number">1</span>] += dif[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="位运算枚举技巧"><a href="#位运算枚举技巧" class="headerlink" title="位运算枚举技巧"></a>位运算枚举技巧</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LogTrick</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Set&lt;Integer&gt; <span class="title function_">or_list</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123; <span class="comment">// 返回按位或的结果集</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        Set&lt;Integer&gt; res = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            res.add(nums[i]);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((nums[j] | nums[i]) == nums[j]) <span class="keyword">break</span>;</span><br><span class="line">                nums[j] |= nums[i];</span><br><span class="line">                res.add(nums[j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Set&lt;Integer&gt; <span class="title function_">and_list</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123; <span class="comment">// 返回按位与的结果集</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        Set&lt;Integer&gt; res = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            res.add(nums[i]);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((nums[j] &amp; nums[i]) == nums[j]) <span class="keyword">break</span>;</span><br><span class="line">                nums[j] &amp;= nums[i];</span><br><span class="line">                res.add(nums[j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单调栈"><a href="#单调栈" class="headerlink" title="单调栈"></a>单调栈</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Deque;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayDeque;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MonotoneStack</span> &#123; <span class="comment">// 单调栈</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] lastSmallerElement(<span class="type">int</span>[] nums) &#123; <span class="comment">// 上一个更小元素</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span>[] ans = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        Arrays.fill(ans, -<span class="number">1</span>);</span><br><span class="line">        Deque&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (!stack.isEmpty() &amp;&amp; nums[i] &lt;= nums[stack.peek()]) stack.pop();</span><br><span class="line">            <span class="keyword">if</span>(!stack.isEmpty()) ans[i] = stack.peek();</span><br><span class="line">            stack.push(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] lastBiggerElement(<span class="type">int</span>[] nums) &#123; <span class="comment">// 上一个更大元素</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span>[] ans = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        Arrays.fill(ans, -<span class="number">1</span>);</span><br><span class="line">        Deque&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (!stack.isEmpty() &amp;&amp; nums[i] &gt;= nums[stack.peek()]) stack.pop();</span><br><span class="line">            <span class="keyword">if</span>(!stack.isEmpty()) ans[i] = stack.peek();</span><br><span class="line">            stack.push(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] nextSmallerElement(<span class="type">int</span>[] nums) &#123; <span class="comment">// 下一个更小元素</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span>[] ans = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        Arrays.fill(ans, n);</span><br><span class="line">        Deque&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">while</span> (!stack.isEmpty() &amp;&amp; nums[i] &lt;= nums[stack.peek()]) stack.pop();</span><br><span class="line">            <span class="keyword">if</span>(!stack.isEmpty()) ans[i] = stack.peek();</span><br><span class="line">            stack.push(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] nextBiggerElement(<span class="type">int</span>[] nums) &#123; <span class="comment">// 下一个更大元素</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span>[] ans = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        Arrays.fill(ans, n);</span><br><span class="line">        Deque&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">while</span> (!stack.isEmpty() &amp;&amp; nums[i] &gt;= nums[stack.peek()]) stack.pop();</span><br><span class="line">            <span class="keyword">if</span>(!stack.isEmpty()) ans[i] = stack.peek();</span><br><span class="line">            stack.push(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单调队列"><a href="#单调队列" class="headerlink" title="单调队列"></a>单调队列</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayDeque;</span><br><span class="line"><span class="keyword">import</span> java.util.Deque;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MonotonicQueue</span> &#123; <span class="comment">// 单调队列</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] minSlidingWindow(<span class="type">int</span>[] nums, <span class="type">int</span> k) &#123; <span class="comment">// 滑动窗口最小值</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span>[] ans = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        Deque&lt;Integer&gt; q = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">maxIndex</span> <span class="operator">=</span> Math.min(i + k - <span class="number">1</span>, n - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (!q.isEmpty() &amp;&amp; q.getFirst() &gt; maxIndex) q.pollFirst();</span><br><span class="line">            <span class="keyword">while</span> (!q.isEmpty() &amp;&amp; nums[i] &lt;= nums[q.getLast()]) q.pollLast();</span><br><span class="line">            q.addLast(i);</span><br><span class="line">            ans[i] = nums[q.getFirst()];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] maxSlidingWindow(<span class="type">int</span>[] nums, <span class="type">int</span> k) &#123; <span class="comment">// 滑动窗口最大值</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span>[] ans = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        Deque&lt;Integer&gt; q = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">maxIndex</span> <span class="operator">=</span> Math.min(i + k - <span class="number">1</span>, n - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (!q.isEmpty() &amp;&amp; q.getFirst() &gt; maxIndex) q.pollFirst();</span><br><span class="line">            <span class="keyword">while</span> (!q.isEmpty() &amp;&amp; nums[i] &gt;= nums[q.getLast()]) q.pollLast();</span><br><span class="line">            q.addLast(i);</span><br><span class="line">            ans[i] = nums[q.getFirst()];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><h3 id="字符串哈希"><a href="#字符串哈希" class="headerlink" title="字符串哈希"></a>字符串哈希</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StringHash</span> &#123; <span class="comment">// 字符串哈希</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">BASE</span> <span class="operator">=</span> (<span class="type">int</span>) <span class="number">8e8</span> + <span class="keyword">new</span> <span class="title class_">Random</span>().nextInt((<span class="type">int</span>) <span class="number">1e8</span>), MOD = <span class="number">1070777777</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span>[] pow_base, pre_hash;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">StringHash</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> s.length();</span><br><span class="line">        <span class="built_in">this</span>.pow_base = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">this</span>.pre_hash = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>];</span><br><span class="line">        pow_base[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            pow_base[i + <span class="number">1</span>] = (<span class="type">int</span>) ((<span class="type">long</span>) pow_base[i] * BASE % MOD);</span><br><span class="line">            pre_hash[i + <span class="number">1</span>] = (<span class="type">int</span>) (((<span class="type">long</span>) pre_hash[i] * BASE + s.charAt(i)) % MOD);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">subHash</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> &#123; <span class="comment">// 计算子字符串的哈希值</span></span><br><span class="line">        <span class="keyword">return</span> (<span class="type">int</span>) (((<span class="type">long</span>) pre_hash[r + <span class="number">1</span>] - (<span class="type">long</span>) pre_hash[l] * pow_base[r - l + <span class="number">1</span>]) % MOD + MOD) % MOD;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="KMP"><a href="#KMP" class="headerlink" title="KMP"></a>KMP</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">KMP</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">kmp</span><span class="params">(String s, String t)</span> &#123; <span class="comment">// s：主串 t：目标串</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> s.length(), n = t.length(), j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span>[] next = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; t.charAt(i) != t.charAt(j))</span><br><span class="line">                j = next[j - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (t.charAt(i) == t.charAt(j)) j++;</span><br><span class="line">            next[i] = j;</span><br><span class="line">        &#125;</span><br><span class="line">        j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; s.charAt(i) != t.charAt(j))</span><br><span class="line">                j = next[j - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (s.charAt(i) == t.charAt(j)) j++;</span><br><span class="line">            <span class="keyword">if</span> (j == n) <span class="keyword">return</span> i - n + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Z-函数"><a href="#Z-函数" class="headerlink" title="Z 函数"></a>Z 函数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ZFunction</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] calZ(String s) &#123; <span class="comment">// Z 函数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> s.length();</span><br><span class="line">        <span class="type">int</span>[] z = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        z[<span class="number">0</span>] = n;</span><br><span class="line">        <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">0</span>, r = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &lt;= r) z[i] = Math.min(z[i - l], r - i + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">while</span> (i + z[i] &lt; n &amp;&amp; s.charAt(z[i]) == s.charAt(i + z[i])) &#123;</span><br><span class="line">                l = i; r = i + z[i];</span><br><span class="line">                z[i]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> z;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字典树"><a href="#字典树" class="headerlink" title="字典树"></a>字典树</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TrieNode</span> &#123; <span class="comment">// 字典树节点</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> Map&lt;Character, TrieNode&gt; children;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> isWord;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TrieNode</span><span class="params">()</span> &#123;</span><br><span class="line">        children = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        isWord = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Trie</span> &#123; <span class="comment">// 字典树</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> TrieNode root;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Trie</span><span class="params">()</span> &#123;</span><br><span class="line">        root = <span class="keyword">new</span> <span class="title class_">TrieNode</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(String word)</span> &#123; <span class="comment">// 插入单词</span></span><br><span class="line">        <span class="type">TrieNode</span> <span class="variable">p</span> <span class="operator">=</span> root;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; word.length(); i++) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> word.charAt(i);</span><br><span class="line">            <span class="keyword">if</span> (!p.children.containsKey(c)) p.children.put(c, <span class="keyword">new</span> <span class="title class_">TrieNode</span>());</span><br><span class="line">            p = p.children.get(c);</span><br><span class="line">        &#125;</span><br><span class="line">        p.isWord = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> TrieNode <span class="title function_">searchPrefix</span><span class="params">(String word)</span> &#123; <span class="comment">// 查找前缀</span></span><br><span class="line">        <span class="type">TrieNode</span> <span class="variable">p</span> <span class="operator">=</span> root;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; word.length(); i++) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> word.charAt(i);</span><br><span class="line">            <span class="keyword">if</span> (!p.children.containsKey(c)) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            p = p.children.get(c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">search</span><span class="params">(String word)</span> &#123; <span class="comment">// 查找单词</span></span><br><span class="line">        <span class="type">TrieNode</span> <span class="variable">p</span> <span class="operator">=</span> searchPrefix(word);</span><br><span class="line">        <span class="keyword">return</span> p != <span class="literal">null</span> &amp;&amp; p.isWord;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="图论"><a href="#图论" class="headerlink" title="图论"></a>图论</h1><h3 id="Dijkstra"><a href="#Dijkstra" class="headerlink" title="Dijkstra"></a>Dijkstra</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dijkstra</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] dijkstra(<span class="type">int</span>[][] mat, <span class="type">int</span> a) &#123; <span class="comment">// 单源最短路</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> mat.length;</span><br><span class="line">        <span class="type">int</span>[] ans = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        Arrays.fill(ans, Integer.MAX_VALUE);</span><br><span class="line">        ans[a] = <span class="number">0</span>;</span><br><span class="line">        Deque&lt;Integer&gt; q = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        q.add(a);</span><br><span class="line">        <span class="keyword">while</span> (!q.isEmpty()) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> q.pollFirst();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> <span class="number">0</span>; y &lt; n; y++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (ans[x] + mat[x][y] &lt; ans[y]) &#123;</span><br><span class="line">                    ans[y] = ans[x] + mat[x][y];</span><br><span class="line">                    q.add(y);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] dijkstra(ArrayList&lt;<span class="type">int</span>[]&gt;[] g, <span class="type">int</span> a) &#123; <span class="comment">// 堆优化的单源最短路</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> g.length;</span><br><span class="line">        <span class="type">int</span>[] ans = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        Arrays.fill(ans, Integer.MAX_VALUE);</span><br><span class="line">        ans[a] = <span class="number">0</span>;</span><br><span class="line">        <span class="type">boolean</span>[] st = <span class="keyword">new</span> <span class="title class_">boolean</span>[n];</span><br><span class="line">        Queue&lt;<span class="type">int</span>[]&gt; q = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;(Comparator.comparingInt(x -&gt; x[<span class="number">1</span>]));</span><br><span class="line">        q.add(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;a, <span class="number">0</span>&#125;);</span><br><span class="line">        <span class="keyword">while</span> (!q.isEmpty()) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> q.poll()[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span> (st[x]) <span class="keyword">continue</span>;</span><br><span class="line">            st[x] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span>[] t : g[x]) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> t[<span class="number">0</span>], d = t[<span class="number">1</span>];</span><br><span class="line">                ans[y] = Math.min(ans[y], ans[x] + d);</span><br><span class="line">                q.add(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;y, ans[y]&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Floyd"><a href="#Floyd" class="headerlink" title="Floyd"></a>Floyd</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Floyd</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">floyd</span><span class="params">(<span class="type">int</span>[][] mat)</span> &#123; <span class="comment">// 全源最短路</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> mat.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; n; k++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">                    mat[i][j] = Math.min(mat[i][j], mat[i][k] + mat[k][j]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="拓扑排序"><a href="#拓扑排序" class="headerlink" title="拓扑排序"></a>拓扑排序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayDeque;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TopologicalSort</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ArrayList&lt;Integer&gt; <span class="title function_">get</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span>[][] edges)</span> &#123; <span class="comment">// 返回该有向无环图的拓扑排序</span></span><br><span class="line">        <span class="type">int</span>[] deg = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        ArrayList&lt;ArrayList&lt;Integer&gt;&gt; g = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) g.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;());</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] arr: edges) &#123;</span><br><span class="line">            g.get(arr[<span class="number">0</span>]).add(arr[<span class="number">1</span>]);</span><br><span class="line">            deg[arr[<span class="number">1</span>]]++;</span><br><span class="line">        &#125;</span><br><span class="line">        ArrayList&lt;Integer&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        ArrayDeque&lt;Integer&gt; q = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (deg[i] == <span class="number">0</span>) &#123;</span><br><span class="line">                q.offer(i);</span><br><span class="line">                ans.add(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!q.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> x: g.get(q.pop())) &#123;</span><br><span class="line">                <span class="keyword">if</span> (--deg[x] == <span class="number">0</span>) &#123;</span><br><span class="line">                    q.offer(x);</span><br><span class="line">                    ans.add(x);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans.size() == n ? ans : <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UnionFindSet</span> &#123; <span class="comment">// 并查集</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> n;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> cnt;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] fa, size;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UnionFindSet</span><span class="params">(<span class="keyword">final</span> <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.n = n;</span><br><span class="line">        fa = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        size = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        Arrays.fill(size, <span class="number">1</span>);</span><br><span class="line">        cnt = n;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) fa[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">find</span><span class="params">(<span class="type">int</span> x)</span> &#123; <span class="comment">// 查找元素 x 所在集合的代表元素</span></span><br><span class="line">        <span class="keyword">if</span> (x == fa[x]) <span class="keyword">return</span> x;</span><br><span class="line">        fa[x] = find(fa[x]);</span><br><span class="line">        <span class="keyword">return</span> fa[x];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">merge</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123; <span class="comment">// 合并元素 i 和 j 所在的集合</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> find(i), y = find(j);</span><br><span class="line">        <span class="keyword">if</span> (x == y) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (size[x] &lt;= size[y]) &#123;</span><br><span class="line">            fa[x] = y;</span><br><span class="line">            size[y] += size[x];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            fa[y] = x;</span><br><span class="line">            size[x] += size[y];</span><br><span class="line">        &#125;</span><br><span class="line">        cnt--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSame</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123; <span class="comment">// 判断元素 i 和 j 是否属于同一集合</span></span><br><span class="line">        <span class="keyword">return</span> find(i) == find(j);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getSize</span><span class="params">(<span class="type">int</span> x)</span> &#123; <span class="comment">// 查询元素 x 所在集合的元素个数</span></span><br><span class="line">        <span class="keyword">return</span> size[find(x)];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCnt</span><span class="params">()</span> &#123; <span class="comment">// 查询不同集合的个数</span></span><br><span class="line">        <span class="keyword">return</span> cnt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h1><h3 id="数位-DP"><a href="#数位-DP" class="headerlink" title="数位 DP"></a>数位 DP</h3><blockquote><p>常数极大</p><p>建议按照 dfs 的参数，将 cache 改为数组的形式</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DigitalDP</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Integer&gt; cache = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> String s;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">digitalDP</span><span class="params">(<span class="type">int</span> n)</span> &#123; <span class="comment">// 数位 DP 通用模板</span></span><br><span class="line">        s = Integer.toString(n);</span><br><span class="line">        <span class="keyword">return</span> dfs(<span class="number">0</span>, <span class="literal">true</span>, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> i, <span class="type">boolean</span> isLimit, <span class="type">boolean</span> isNum)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == s.length()) <span class="keyword">return</span> isNum ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> i + <span class="string">&quot; &quot;</span> + isLimit + <span class="string">&quot; &quot;</span> + isNum;</span><br><span class="line">        <span class="keyword">if</span> (cache.containsKey(key)) <span class="keyword">return</span> cache.get(key);</span><br><span class="line">        <span class="type">int</span> <span class="variable">ret</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (!isNum) ret = dfs(i + <span class="number">1</span>, <span class="literal">false</span>, <span class="literal">false</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">up</span> <span class="operator">=</span> isLimit ? (s.charAt(i) - <span class="string">&#x27;0&#x27;</span>) : <span class="number">9</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> (isNum ? <span class="number">0</span> : <span class="number">1</span>); j &lt;= up; j++)</span><br><span class="line">            ret += dfs(i + <span class="number">1</span>, j == up &amp;&amp; isLimit, <span class="literal">true</span>);</span><br><span class="line">        cache.put(key, ret);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="矩阵快速幂"><a href="#矩阵快速幂" class="headerlink" title="矩阵快速幂"></a>矩阵快速幂</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MatrixFastPower</span> &#123; <span class="comment">// 矩阵快速幂</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">MOD</span> <span class="operator">=</span> (<span class="type">int</span>)<span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[][] matMul(<span class="type">int</span>[][] a, <span class="type">int</span>[][] b) &#123; <span class="comment">// 矩阵乘法 a * b = c</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> a.length, t = b.length, n = b[<span class="number">0</span>].length;</span><br><span class="line">        <span class="type">int</span>[][] c = <span class="keyword">new</span> <span class="title class_">int</span>[m][n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; t; k++)</span><br><span class="line">                    c[i][j] = (<span class="type">int</span>) ((c[i][j] + (<span class="type">long</span>) a[i][k] * b[k][j]) % MOD);</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[][] matPow(<span class="type">int</span>[][] a, <span class="type">int</span> n) &#123; <span class="comment">// 矩阵幂运算 a ^ n = res</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> a.length;</span><br><span class="line">        <span class="type">int</span>[][] res = <span class="keyword">new</span> <span class="title class_">int</span>[m][m];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">            res[i][i] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((n &amp; <span class="number">1</span>) != <span class="number">0</span>) res = matMul(res, a);</span><br><span class="line">            n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">            a = matMul(a, a);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="数论"><a href="#数论" class="headerlink" title="数论"></a>数论</h1><h3 id="快速幂"><a href="#快速幂" class="headerlink" title="快速幂"></a>快速幂</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">FastPower</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">long</span> <span class="title function_">fastPower</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> mod)</span> &#123; <span class="comment">// 快速幂</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (y != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((y &amp; <span class="number">1</span>) != <span class="number">0</span>) res = res * x % mod;</span><br><span class="line">            y &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">            x = (<span class="type">int</span>) ((<span class="type">long</span>) x * x % mod);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="质数筛选"><a href="#质数筛选" class="headerlink" title="质数筛选"></a>质数筛选</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PrimeNumberScreening</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span>[] getPrimes(<span class="type">int</span> n) &#123; <span class="comment">// 质数筛</span></span><br><span class="line">        <span class="keyword">if</span> (n &lt; <span class="number">2</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">boolean</span>[n + <span class="number">1</span>];</span><br><span class="line">        <span class="type">boolean</span>[] ans = <span class="keyword">new</span> <span class="title class_">boolean</span>[n + <span class="number">1</span>];</span><br><span class="line">        Arrays.fill(ans, <span class="literal">true</span>);</span><br><span class="line">        ans[<span class="number">0</span>] = ans[<span class="number">1</span>] = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ans[i]) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">long</span> <span class="variable">j</span> <span class="operator">=</span> (<span class="type">long</span>) i * i; j &lt;= n; j += i) &#123;</span><br><span class="line">                    ans[(<span class="type">int</span>) j] = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="质因数分解"><a href="#质因数分解" class="headerlink" title="质因数分解"></a>质因数分解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PrimeFactorization</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;<span class="type">int</span>[]&gt; getPrimes(<span class="type">int</span> n) &#123; <span class="comment">// 质因数分解</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">        List&lt;<span class="type">int</span>[]&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (i * i &lt;= n) &#123;</span><br><span class="line">            <span class="keyword">if</span> (n % i == <span class="number">0</span>) &#123;</span><br><span class="line">                ans.add(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;i, <span class="number">0</span>&#125;);</span><br><span class="line">                <span class="keyword">while</span> (n % i == <span class="number">0</span>) &#123;</span><br><span class="line">                    n /= i;</span><br><span class="line">                    ans.getLast()[<span class="number">1</span>]++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (n &gt; <span class="number">1</span>) ans.add(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;n, <span class="number">1</span>&#125;);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="乘法逆元"><a href="#乘法逆元" class="headerlink" title="乘法逆元"></a>乘法逆元</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MultiplicativeInverse</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] getInv(<span class="type">int</span> n, <span class="type">int</span> MOD) &#123; <span class="comment">// 返回所有位于[1, n]的整数在模 MOD 意义下的乘法逆元</span></span><br><span class="line">        <span class="type">int</span>[] inv = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>];</span><br><span class="line">        Arrays.fill(inv, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">            inv[i] = (MOD - MOD / i) * inv[MOD % i] % MOD;</span><br><span class="line">        <span class="keyword">return</span> inv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Maths</span> &#123; <span class="comment">// 数学运算</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">gcd</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123; <span class="comment">// 求最大公约数</span></span><br><span class="line">        <span class="keyword">if</span> (b == <span class="number">0</span>) <span class="keyword">return</span> a;</span><br><span class="line">        <span class="keyword">return</span> gcd(b, a % b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">lcm</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123; <span class="comment">// 求最小公倍数</span></span><br><span class="line">        <span class="keyword">return</span> a * b / gcd(a, b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="高级数据结构"><a href="#高级数据结构" class="headerlink" title="高级数据结构"></a>高级数据结构</h1><h3 id="树状数组-Sum"><a href="#树状数组-Sum" class="headerlink" title="树状数组 Sum"></a>树状数组 Sum</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BinaryIndexedTreesSum</span> &#123; <span class="comment">// 树状数组 Sum</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> n;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] d;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BinaryIndexedTreesSum</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        n = nums.length + <span class="number">1</span>;</span><br><span class="line">        d = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) update(i, nums[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">query</span><span class="params">(<span class="type">int</span> i)</span> &#123; <span class="comment">// 区间查询</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">ret</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (++i; i &gt; <span class="number">0</span>; i &amp;= i - <span class="number">1</span>) ret += d[i];</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">query</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123; <span class="comment">// 区间查询</span></span><br><span class="line">        <span class="keyword">return</span> query(j) - query(i - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> k)</span> &#123; <span class="comment">// 单点更新</span></span><br><span class="line">        <span class="keyword">for</span> (++i; i &lt; n; i += i &amp; -i) d[i] += k;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="树状数组-Min"><a href="#树状数组-Min" class="headerlink" title="树状数组 Min"></a>树状数组 Min</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BinaryIndexedTreesMin</span> &#123; <span class="comment">// 树状数组 Min</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> n;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] a, d;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BinaryIndexedTreesMin</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        n = nums.length + <span class="number">1</span>;</span><br><span class="line">        a = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        d = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        Arrays.fill(a, Integer.MAX_VALUE / <span class="number">3</span>);</span><br><span class="line">        Arrays.fill(d, Integer.MAX_VALUE / <span class="number">3</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) update(i, nums[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">query</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123; <span class="comment">// 区间查询</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">ret</span> <span class="operator">=</span> Integer.MAX_VALUE / <span class="number">3</span>;</span><br><span class="line">        i++; j++;</span><br><span class="line">        <span class="keyword">while</span> (i &lt;= j) &#123;</span><br><span class="line">            ret = Math.min(ret, a[j--]);</span><br><span class="line">            <span class="keyword">while</span> (i &lt;= j - (j &amp; -j)) &#123;</span><br><span class="line">                ret = Math.min(ret, d[j]);</span><br><span class="line">                j -= j &amp; -j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> val)</span> &#123; <span class="comment">// 单点更新</span></span><br><span class="line">        a[++i] = val;</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; n) &#123;</span><br><span class="line">            d[i] = Math.min(d[i], a[j]);</span><br><span class="line">            i += i &amp; -i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="树状数组-Max"><a href="#树状数组-Max" class="headerlink" title="树状数组 Max"></a>树状数组 Max</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BinaryIndexedTreesMax</span> &#123; <span class="comment">// 树状数组 Max</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> n;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] a, d;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BinaryIndexedTreesMax</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        n = nums.length + <span class="number">1</span>;</span><br><span class="line">        a = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        d = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        Arrays.fill(a, Integer.MIN_VALUE / <span class="number">3</span>);</span><br><span class="line">        Arrays.fill(d, Integer.MIN_VALUE / <span class="number">3</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) update(i, nums[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">query</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123; <span class="comment">// 区间查询</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">ret</span> <span class="operator">=</span> Integer.MIN_VALUE / <span class="number">3</span>;</span><br><span class="line">        i++; j++;</span><br><span class="line">        <span class="keyword">while</span> (i &lt;= j) &#123;</span><br><span class="line">            ret = Math.max(ret, a[j--]);</span><br><span class="line">            <span class="keyword">while</span> (i &lt;= j - (j &amp; -j)) &#123;</span><br><span class="line">                ret = Math.max(ret, d[j]);</span><br><span class="line">                j -= j &amp; -j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> val)</span> &#123; <span class="comment">// 单点更新</span></span><br><span class="line">        a[++i] = val;</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; n) &#123;</span><br><span class="line">            d[i] = Math.max(d[i], a[j]);</span><br><span class="line">            i += i &amp; -i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="线段树"><a href="#线段树" class="headerlink" title="线段树"></a>线段树</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SegmentTree</span> &#123; <span class="comment">// 线段树</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> n;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] d, lazy;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SegmentTree</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        n = nums.length;</span><br><span class="line">        d = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">1</span> &lt;&lt; (<span class="number">33</span> - Integer.numberOfLeadingZeros(n))];</span><br><span class="line">        lazy = d.clone();</span><br><span class="line">        build(nums, <span class="number">0</span>, n - <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">build</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> left, <span class="type">int</span> right, <span class="type">int</span> i)</span> &#123; <span class="comment">// 建树</span></span><br><span class="line">        <span class="keyword">if</span> (left == right) &#123;</span><br><span class="line">            d[i] = nums[left];</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        build(nums, left, mid, <span class="number">2</span> * i);</span><br><span class="line">        build(nums, mid + <span class="number">1</span>, right, <span class="number">2</span> * i + <span class="number">1</span>);</span><br><span class="line">        d[i] = d[<span class="number">2</span> * i] + d[<span class="number">2</span> * i + <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">__query</span><span class="params">(<span class="type">int</span> start, <span class="type">int</span> end, <span class="type">int</span> left, <span class="type">int</span> right, <span class="type">int</span> i)</span> &#123; <span class="comment">// 区间查询</span></span><br><span class="line">        <span class="keyword">if</span> (left &gt;= start &amp;&amp; right &lt;= end) <span class="keyword">return</span> d[i];</span><br><span class="line">        <span class="type">int</span> <span class="variable">ret</span> <span class="operator">=</span> <span class="number">0</span>, mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (lazy[i] != <span class="number">0</span> &amp;&amp; left != right) &#123;</span><br><span class="line">            d[<span class="number">2</span> * i] += (mid - left + <span class="number">1</span>) * lazy[i];</span><br><span class="line">            d[<span class="number">2</span> * i + <span class="number">1</span>] += (right - mid) * lazy[i];</span><br><span class="line">            lazy[<span class="number">2</span> * i] += lazy[i];</span><br><span class="line">            lazy[<span class="number">2</span> * i + <span class="number">1</span>] += lazy[i];</span><br><span class="line">            lazy[i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (start &lt;= mid) ret += __query(start, end, left, mid, <span class="number">2</span> * i);</span><br><span class="line">        <span class="keyword">if</span> (end &gt;= mid + <span class="number">1</span>) ret += __query(start, end, mid + <span class="number">1</span>, right, <span class="number">2</span> * i + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">__update</span><span class="params">(<span class="type">int</span> start, <span class="type">int</span> end, <span class="type">int</span> k, <span class="type">int</span> left, <span class="type">int</span> right, <span class="type">int</span> i)</span> &#123; <span class="comment">// 区间修改</span></span><br><span class="line">        <span class="keyword">if</span> (left &gt;= start &amp;&amp; right &lt;= end) &#123;</span><br><span class="line">            d[i] += (right - left + <span class="number">1</span>) * k;</span><br><span class="line">            lazy[i] += k;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (lazy[i] != <span class="number">0</span> &amp;&amp; left != right) &#123;</span><br><span class="line">            d[<span class="number">2</span> * i] += (mid - left + <span class="number">1</span>) * lazy[i];</span><br><span class="line">            d[<span class="number">2</span> * i + <span class="number">1</span>] += (right - mid) * lazy[i];</span><br><span class="line">            lazy[<span class="number">2</span> * i] += lazy[i];</span><br><span class="line">            lazy[<span class="number">2</span> * i + <span class="number">1</span>] += lazy[i];</span><br><span class="line">            lazy[i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (start &lt;= mid) __update(start, end, k, left, mid, <span class="number">2</span> * i);</span><br><span class="line">        <span class="keyword">if</span> (end &gt;= mid + <span class="number">1</span>) __update(start, end, k, mid + <span class="number">1</span>, right, <span class="number">2</span> * i + <span class="number">1</span>);</span><br><span class="line">        d[i] = d[<span class="number">2</span> * i] + d[<span class="number">2</span> * i + <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">query</span><span class="params">(<span class="type">int</span> start, <span class="type">int</span> end)</span> &#123; <span class="comment">// 区间查询</span></span><br><span class="line">        <span class="keyword">return</span> __query(start, end, <span class="number">0</span>, n - <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(<span class="type">int</span> start, <span class="type">int</span> end, <span class="type">int</span> k)</span> &#123; <span class="comment">// 区间修改</span></span><br><span class="line">        __update(start, end, k, <span class="number">0</span>, n - <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="平衡树"><a href="#平衡树" class="headerlink" title="平衡树"></a>平衡树</h3><blockquote><p>采用 Java TreeMap 实现类 Python 的 SortedList 的功能</p><p>性能不如 Python，在<strong>索引操作</strong>和<strong>二分查找</strong>时，最坏情况下复杂度会退化为线性</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SortedList</span> <span class="keyword">implements</span> <span class="title class_">Iterable</span>&lt;Integer&gt; &#123; <span class="comment">// 平衡树</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> TreeMap&lt;Integer, Integer&gt; map;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SortedList</span><span class="params">()</span> &#123;</span><br><span class="line">        map = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;();</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123; <span class="comment">// 返回元素个数</span></span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123; <span class="comment">// 判断集合是否为空</span></span><br><span class="line">        <span class="keyword">return</span> size == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span> &#123; <span class="comment">// 清空所有元素</span></span><br><span class="line">        map.clear();</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> SortedList <span class="title function_">copy</span><span class="params">()</span> &#123; <span class="comment">// 深拷贝</span></span><br><span class="line">        <span class="type">SortedList</span> <span class="variable">res</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SortedList</span>();</span><br><span class="line">        res.map.putAll(<span class="built_in">this</span>.map);</span><br><span class="line">        res.size = <span class="built_in">this</span>.size;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> val)</span> &#123; <span class="comment">// 添加元素</span></span><br><span class="line">        map.merge(val, <span class="number">1</span>, Integer::sum);</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAll</span><span class="params">(Collection&lt;Integer&gt; vals)</span> &#123; <span class="comment">// 批量添加元素</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> val : vals) add(val);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(<span class="type">int</span> val)</span> &#123; <span class="comment">// 删除元素（如果存在）</span></span><br><span class="line">        <span class="keyword">if</span> (!contains(val)) <span class="keyword">return</span>;</span><br><span class="line">        map.merge(val, -<span class="number">1</span>, Integer::sum);</span><br><span class="line">        <span class="keyword">if</span> (map.get(val) == <span class="number">0</span>) map.remove(val);</span><br><span class="line">        size--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeAll</span><span class="params">(Collection&lt;Integer&gt; vals)</span> &#123; <span class="comment">// 批量删除元素</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> val : vals) remove(val);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">pop</span><span class="params">(<span class="type">int</span> idx)</span> &#123; <span class="comment">// 弹出指定下标的元素</span></span><br><span class="line">        <span class="keyword">if</span> (idx &lt; <span class="number">0</span> || idx &gt;= size)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IndexOutOfBoundsException</span>(String.format(<span class="string">&quot;索引: %d, 元素个数: %d&quot;</span>, idx, size));</span><br><span class="line">        Iterator&lt;Map.Entry&lt;Integer, Integer&gt;&gt; it = map.entrySet().iterator();</span><br><span class="line">        <span class="type">int</span> <span class="variable">cnt</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">            Map.Entry&lt;Integer, Integer&gt; entry = it.next();</span><br><span class="line">            <span class="type">int</span> <span class="variable">key</span> <span class="operator">=</span> entry.getKey(), value = entry.getValue();</span><br><span class="line">            <span class="keyword">if</span> (idx &lt; cnt + value) &#123;</span><br><span class="line">                <span class="keyword">if</span> (value == <span class="number">1</span>) it.remove();</span><br><span class="line">                <span class="keyword">else</span> entry.setValue(value - <span class="number">1</span>);</span><br><span class="line">                size--;</span><br><span class="line">                <span class="keyword">return</span> key;</span><br><span class="line">            &#125;</span><br><span class="line">            cnt += value;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;无法访问的代码&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(<span class="type">int</span> val)</span> &#123; <span class="comment">// 判断是否包含某个元素</span></span><br><span class="line">        <span class="keyword">return</span> map.containsKey(val);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">get</span><span class="params">(<span class="type">int</span> idx)</span> &#123; <span class="comment">// 获取指定下标的元素</span></span><br><span class="line">        <span class="keyword">if</span> (idx &lt; <span class="number">0</span> || idx &gt;= size)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IndexOutOfBoundsException</span>(String.format(<span class="string">&quot;索引: %d, 元素个数: %d&quot;</span>, idx, size));</span><br><span class="line">        <span class="type">int</span> <span class="variable">cnt</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Integer, Integer&gt; entry : map.entrySet()) &#123;</span><br><span class="line">            cnt += entry.getValue();</span><br><span class="line">            <span class="keyword">if</span> (idx &lt; cnt) <span class="keyword">return</span> entry.getKey();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;无法访问的代码&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getMin</span><span class="params">()</span> &#123; <span class="comment">// 获取最小元素</span></span><br><span class="line">        <span class="keyword">if</span> (size == <span class="number">0</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoSuchElementException</span>(<span class="string">&quot;集合为空&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> map.firstKey();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getMax</span><span class="params">()</span> &#123; <span class="comment">// 获取最大元素</span></span><br><span class="line">        <span class="keyword">if</span> (size == <span class="number">0</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoSuchElementException</span>(<span class="string">&quot;集合为空&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> map.lastKey();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">count</span><span class="params">(<span class="type">int</span> val)</span> &#123; <span class="comment">// 统计某个元素出现的次数</span></span><br><span class="line">        <span class="keyword">return</span> map.getOrDefault(val, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">bisectLeft</span><span class="params">(<span class="type">int</span> val)</span> &#123; <span class="comment">// 查找插入位置的左边界（第一个 &gt;=val 的位置）</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Integer, Integer&gt; entry : map.headMap(val).entrySet()) &#123;</span><br><span class="line">            index += entry.getValue();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> index;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">bisectRight</span><span class="params">(<span class="type">int</span> val)</span> &#123; <span class="comment">// 查找插入位置的右边界（第一个 &gt;val 的位置）</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Integer, Integer&gt; entry : map.headMap(val, <span class="literal">true</span>).entrySet()) &#123;</span><br><span class="line">            index += entry.getValue();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> index;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Iterator&lt;Integer&gt; <span class="title function_">iterator</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Iterator</span>&lt;&gt;() &#123;</span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">final</span> Iterator&lt;Map.Entry&lt;Integer, Integer&gt;&gt; entryIter = map.entrySet().iterator();</span><br><span class="line">            <span class="keyword">private</span> <span class="type">int</span> <span class="variable">currCnt</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">private</span> <span class="type">Integer</span> <span class="variable">currVal</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> currCnt &gt; <span class="number">0</span> || entryIter.hasNext();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Integer <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (currCnt == <span class="number">0</span> &amp;&amp; entryIter.hasNext()) &#123;</span><br><span class="line">                    Map.Entry&lt;Integer, Integer&gt; entry = entryIter.next();</span><br><span class="line">                    currVal = entry.getKey();</span><br><span class="line">                    currCnt = entry.getValue();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (currCnt &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoSuchElementException</span>();</span><br><span class="line">                &#125;</span><br><span class="line">                currCnt--;</span><br><span class="line">                <span class="keyword">return</span> currVal;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 算法模版</title>
      <link href="/2025/05/15/05%20Python%20%E7%AE%97%E6%B3%95%E6%A8%A1%E7%89%88/"/>
      <url>/2025/05/15/05%20Python%20%E7%AE%97%E6%B3%95%E6%A8%A1%E7%89%88/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="基础模版"><a href="#基础模版" class="headerlink" title="基础模版"></a>基础模版</h1><h3 id="代码模版"><a href="#代码模版" class="headerlink" title="代码模版"></a>代码模版</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># for _ in range(int(input())):</span></span><br><span class="line"><span class="comment">#    n, a = int(input()), map(int, input().split())</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="built_in">input</span> = <span class="keyword">lambda</span>: sys.stdin.readline().rstrip()</span><br><span class="line"><span class="comment"># sys.setrecursionlimit(10 ** 6 + 10)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># from copy import deepcopy</span></span><br><span class="line"><span class="comment"># from decimal import Decimal</span></span><br><span class="line"><span class="comment"># from functools import lru_cache</span></span><br><span class="line"><span class="comment"># from heapq import heappush, heappop</span></span><br><span class="line"><span class="comment"># from bisect import bisect_left, bisect_right</span></span><br><span class="line"><span class="comment"># from datetime import datetime, date, timedelta</span></span><br><span class="line"><span class="comment"># from math import inf, gcd, sqrt, ceil, floor, log</span></span><br><span class="line"><span class="comment"># from collections import Counter, defaultdict, deque</span></span><br><span class="line"><span class="comment"># from random import randint, choice, choices, shuffle</span></span><br><span class="line"><span class="comment"># from itertools import count, accumulate, permutations, combinations, combinations_with_replacement</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">is_more = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">int</span>(<span class="built_in">input</span>()) <span class="keyword">if</span> is_more <span class="keyword">else</span> <span class="number">1</span>):</span><br><span class="line">    solve()</span><br></pre></td></tr></table></figure><h3 id="对拍模版"><a href="#对拍模版" class="headerlink" title="对拍模版"></a>对拍模版</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Callable</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BeatCode</span>: <span class="comment"># 对拍模版</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">ac_fun: <span class="type">Callable</span>, my_fun: <span class="type">Callable</span>, params: <span class="built_in">list</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">for</span> i, param <span class="keyword">in</span> <span class="built_in">enumerate</span>(params):</span><br><span class="line">            ac, my = <span class="built_in">str</span>(ac_fun(*param)), <span class="built_in">str</span>(my_fun(*param))</span><br><span class="line">            <span class="keyword">if</span> ac != my:</span><br><span class="line">                <span class="built_in">print</span>(<span class="built_in">str</span>(i + <span class="number">1</span>) + <span class="string">&#x27; / &#x27;</span> + <span class="built_in">str</span>(<span class="built_in">len</span>(params)))</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;测试用例：\n&quot;</span> + <span class="built_in">str</span>(param))</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;预期结果：\n&quot;</span> + ac)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;你的输出：\n&quot;</span> + my)</span><br><span class="line">                <span class="keyword">return</span></span><br></pre></td></tr></table></figure><h1 id="经典模版"><a href="#经典模版" class="headerlink" title="经典模版"></a>经典模版</h1><h3 id="回文子串"><a href="#回文子串" class="headerlink" title="回文子串"></a>回文子串</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_isP</span>(<span class="params">s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">list</span>: <span class="comment"># 判断子串 s[i:j] 是否是回文的</span></span><br><span class="line">    n = <span class="built_in">len</span>(s)</span><br><span class="line">    ans = [[<span class="literal">True</span>] * n <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(j - <span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">            ans[i][j] = s[i] == s[j] <span class="keyword">and</span> ans[i + <span class="number">1</span>][j - <span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><h3 id="回文数"><a href="#回文数" class="headerlink" title="回文数"></a>回文数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_array</span>(<span class="params">U: <span class="built_in">int</span></span>) -&gt; <span class="built_in">list</span>: <span class="comment"># 返回所有位于 [1, 10 ^ U] 内的回文数</span></span><br><span class="line">    ans = []</span><br><span class="line">    base = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> base &lt;= <span class="number">10</span> ** ((U - <span class="number">1</span>) // <span class="number">2</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(base, base * <span class="number">10</span>):</span><br><span class="line">            x, t = i, i // <span class="number">10</span></span><br><span class="line">            <span class="keyword">while</span> t:</span><br><span class="line">                x = x * <span class="number">10</span> + t % <span class="number">10</span></span><br><span class="line">                t //= <span class="number">10</span></span><br><span class="line">            ans.append(x)</span><br><span class="line">        <span class="keyword">if</span> base &lt;= <span class="number">10</span> ** (U // <span class="number">2</span> - <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(base, base * <span class="number">10</span>):</span><br><span class="line">                x = t = i</span><br><span class="line">                <span class="keyword">while</span> t:</span><br><span class="line">                    x = x * <span class="number">10</span> + t % <span class="number">10</span></span><br><span class="line">                    t //= <span class="number">10</span></span><br><span class="line">                ans.append(x)</span><br><span class="line">        base *= <span class="number">10</span></span><br><span class="line">    <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><h3 id="最长公共子序列"><a href="#最长公共子序列" class="headerlink" title="最长公共子序列"></a>最长公共子序列</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">longest_common_subsequence</span>(<span class="params">arr1: <span class="built_in">list</span>, arr2: <span class="built_in">list</span></span>) -&gt; <span class="built_in">int</span>: <span class="comment"># 最长公共子序列</span></span><br><span class="line">    ans = [<span class="number">0</span>] * (<span class="built_in">len</span>(arr2) + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> arr1:</span><br><span class="line">        pre = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> j, y <span class="keyword">in</span> <span class="built_in">enumerate</span>(arr2):</span><br><span class="line">            pre, ans[j + <span class="number">1</span>] = ans[j + <span class="number">1</span>], pre + <span class="number">1</span> <span class="keyword">if</span> x == y <span class="keyword">else</span> <span class="built_in">max</span>(ans[j], ans[j + <span class="number">1</span>])</span><br><span class="line">    <span class="keyword">return</span> ans[-<span class="number">1</span>]</span><br></pre></td></tr></table></figure><h3 id="最长递增子序列"><a href="#最长递增子序列" class="headerlink" title="最长递增子序列"></a>最长递增子序列</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bisect <span class="keyword">import</span> bisect_left</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">length_of_LIS</span>(<span class="params">nums: <span class="built_in">list</span></span>) -&gt; <span class="built_in">int</span>: <span class="comment"># 最长递增子序列</span></span><br><span class="line">    g = []</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> nums:</span><br><span class="line">        i = bisect_left(g, x)</span><br><span class="line">        <span class="keyword">if</span> i == <span class="built_in">len</span>(g):</span><br><span class="line">            g.append(x)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            g[i] = x</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">len</span>(g)</span><br></pre></td></tr></table></figure><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h3 id="前缀和"><a href="#前缀和" class="headerlink" title="前缀和"></a>前缀和</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">OnePrefixProd</span>: <span class="comment"># 一维前缀积</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, nums: <span class="built_in">list</span></span>):</span><br><span class="line">        p = [<span class="number">1</span>] * (<span class="built_in">len</span>(nums) + <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span> i, v <span class="keyword">in</span> <span class="built_in">enumerate</span>(nums):</span><br><span class="line">            p[i + <span class="number">1</span>] = p[i] * v</span><br><span class="line">        <span class="variable language_">self</span>.P = p</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_prod</span>(<span class="params">self, i: <span class="built_in">int</span>, j: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>: <span class="comment"># 区间求积</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.P[j + <span class="number">1</span>] // <span class="variable language_">self</span>.P[i]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OnePrefixSum</span>: <span class="comment"># 一维前缀和</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, nums: <span class="built_in">list</span></span>):</span><br><span class="line">        p = [<span class="number">0</span>] * (<span class="built_in">len</span>(nums) + <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span> i, v <span class="keyword">in</span> <span class="built_in">enumerate</span>(nums):</span><br><span class="line">            p[i + <span class="number">1</span>] = p[i] + v</span><br><span class="line">        <span class="variable language_">self</span>.P = p</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_sum</span>(<span class="params">self, i: <span class="built_in">int</span>, j: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>: <span class="comment"># 区间求和</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.P[j + <span class="number">1</span>] - <span class="variable language_">self</span>.P[i]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TwoPrefixSum</span>: <span class="comment"># 二维前缀和</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, mat: <span class="built_in">list</span></span>):</span><br><span class="line">        n, m = <span class="built_in">len</span>(mat), <span class="built_in">len</span>(mat[<span class="number">0</span>])</span><br><span class="line">        p = [[<span class="number">0</span>] * (m + <span class="number">1</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n + <span class="number">1</span>)]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">                p[i + <span class="number">1</span>][j + <span class="number">1</span>] = p[i][j + <span class="number">1</span>] + p[i + <span class="number">1</span>][j] - p[i][j] + mat[i][j]</span><br><span class="line">        <span class="variable language_">self</span>.P = p</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_sum</span>(<span class="params">self, x1: <span class="built_in">int</span>, y1: <span class="built_in">int</span>, x2: <span class="built_in">int</span>, y2: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>: <span class="comment"># 区域求和</span></span><br><span class="line">        P = <span class="variable language_">self</span>.P</span><br><span class="line">        <span class="keyword">return</span> P[x2 + <span class="number">1</span>][y2 + <span class="number">1</span>] - P[x1][y2 + <span class="number">1</span>] - P[x2 + <span class="number">1</span>][y1] + P[x1][y1]</span><br></pre></td></tr></table></figure><h3 id="差分"><a href="#差分" class="headerlink" title="差分"></a>差分</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">one_difference</span>(<span class="params">nums: <span class="built_in">list</span>, operates: <span class="built_in">list</span></span>) -&gt; <span class="literal">None</span>: <span class="comment"># 一维差分</span></span><br><span class="line">    n = <span class="built_in">len</span>(nums)</span><br><span class="line">    dif = [<span class="number">0</span>] * (n + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> i, j, d <span class="keyword">in</span> operates:</span><br><span class="line">        dif[i] += d</span><br><span class="line">        dif[j + <span class="number">1</span>] -= d</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        dif[i + <span class="number">1</span>] += dif[i]</span><br><span class="line">        nums[i] += dif[i]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">two_difference</span>(<span class="params">mat: <span class="built_in">list</span>, operates: <span class="built_in">list</span></span>) -&gt; <span class="literal">None</span>: <span class="comment"># 二维差分</span></span><br><span class="line">    n, m = <span class="built_in">len</span>(mat), <span class="built_in">len</span>(mat[<span class="number">0</span>])</span><br><span class="line">    dif = [[<span class="number">0</span>] * (m + <span class="number">2</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n + <span class="number">2</span>)]</span><br><span class="line">    <span class="keyword">for</span> x1, y1, x2, y2, d <span class="keyword">in</span> operates:</span><br><span class="line">        dif[x2 + <span class="number">2</span>][y2 + <span class="number">2</span>] += d</span><br><span class="line">        dif[x1 + <span class="number">1</span>][y2 + <span class="number">2</span>] -= d</span><br><span class="line">        dif[x2 + <span class="number">2</span>][y1 + <span class="number">1</span>] -= d</span><br><span class="line">        dif[x1 + <span class="number">1</span>][y1 + <span class="number">1</span>] += d</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, m + <span class="number">1</span>):</span><br><span class="line">            dif[i][j] += dif[i - <span class="number">1</span>][j] + dif[i][j - <span class="number">1</span>] - dif[i - <span class="number">1</span>][j - <span class="number">1</span>]</span><br><span class="line">            mat[i - <span class="number">1</span>][j - <span class="number">1</span>] += dif[i][j]</span><br></pre></td></tr></table></figure><h3 id="位运算枚举技巧"><a href="#位运算枚举技巧" class="headerlink" title="位运算枚举技巧"></a>位运算枚举技巧</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">or_list</span>(<span class="params">nums: <span class="built_in">list</span></span>) -&gt; <span class="built_in">set</span>: <span class="comment"># 返回按位或的结果集</span></span><br><span class="line">    ans = <span class="built_in">set</span>(nums)</span><br><span class="line">    <span class="keyword">for</span> i, x <span class="keyword">in</span> <span class="built_in">enumerate</span>(nums):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i - <span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> nums[j] | nums[i] == nums[j]:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            nums[j] |= nums[i]</span><br><span class="line">            ans.add(nums[j])</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">and_list</span>(<span class="params">nums: <span class="built_in">list</span></span>) -&gt; <span class="built_in">set</span>: <span class="comment"># 返回按位与的结果集</span></span><br><span class="line">    ans = <span class="built_in">set</span>(nums)</span><br><span class="line">    <span class="keyword">for</span> i, x <span class="keyword">in</span> <span class="built_in">enumerate</span>(nums):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i - <span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> nums[j] &amp; nums[i] == nums[j]:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            nums[j] &amp;= nums[i]</span><br><span class="line">            ans.add(nums[j])</span><br><span class="line">    <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><h3 id="单调栈"><a href="#单调栈" class="headerlink" title="单调栈"></a>单调栈</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">last_smaller_element</span>(<span class="params">nums: <span class="built_in">list</span></span>) -&gt; <span class="built_in">list</span>: <span class="comment"># 上一个更小元素</span></span><br><span class="line">    n = <span class="built_in">len</span>(nums)</span><br><span class="line">    ans, stack = [-<span class="number">1</span>] * n, []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="keyword">while</span> stack <span class="keyword">and</span> nums[i] &lt;= nums[stack[-<span class="number">1</span>]]:</span><br><span class="line">            stack.pop()</span><br><span class="line">        <span class="keyword">if</span> stack:</span><br><span class="line">            ans[i] = stack[-<span class="number">1</span>]</span><br><span class="line">        stack.append(i)</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">last_bigger_element</span>(<span class="params">nums: <span class="built_in">list</span></span>) -&gt; <span class="built_in">list</span>: <span class="comment"># 上一个更大元素</span></span><br><span class="line">    n = <span class="built_in">len</span>(nums)</span><br><span class="line">    ans, stack = [-<span class="number">1</span>] * n, []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="keyword">while</span> stack <span class="keyword">and</span> nums[i] &gt;= nums[stack[-<span class="number">1</span>]]:</span><br><span class="line">            stack.pop()</span><br><span class="line">        <span class="keyword">if</span> stack:</span><br><span class="line">            ans[i] = stack[-<span class="number">1</span>]</span><br><span class="line">        stack.append(i)</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">next_smaller_element</span>(<span class="params">nums: <span class="built_in">list</span></span>) -&gt; <span class="built_in">list</span>: <span class="comment"># 下一个更小元素</span></span><br><span class="line">    n = <span class="built_in">len</span>(nums)</span><br><span class="line">    ans, stack = [n] * n, []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n - <span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">while</span> stack <span class="keyword">and</span> nums[i] &lt;= nums[stack[-<span class="number">1</span>]]:</span><br><span class="line">            stack.pop()</span><br><span class="line">        <span class="keyword">if</span> stack:</span><br><span class="line">            ans[i] = stack[-<span class="number">1</span>]</span><br><span class="line">        stack.append(i)</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">next_bigger_element</span>(<span class="params">nums: <span class="built_in">list</span></span>) -&gt; <span class="built_in">list</span>: <span class="comment"># 下一个更大元素</span></span><br><span class="line">    n = <span class="built_in">len</span>(nums)</span><br><span class="line">    ans, stack = [n] * n, []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n - <span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">while</span> stack <span class="keyword">and</span> nums[i] &gt;= nums[stack[-<span class="number">1</span>]]:</span><br><span class="line">            stack.pop()</span><br><span class="line">        <span class="keyword">if</span> stack:</span><br><span class="line">            ans[i] = stack[-<span class="number">1</span>]</span><br><span class="line">        stack.append(i)</span><br><span class="line">    <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><h3 id="单调队列"><a href="#单调队列" class="headerlink" title="单调队列"></a>单调队列</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">min_sliding_window</span>(<span class="params">nums: <span class="built_in">list</span>, k: <span class="built_in">int</span></span>) -&gt; <span class="built_in">list</span>: <span class="comment"># 滑动窗口最小值</span></span><br><span class="line">    n = <span class="built_in">len</span>(nums)</span><br><span class="line">    ans = [<span class="number">0</span>] * n</span><br><span class="line">    q = deque()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n - <span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">        max_index = <span class="built_in">min</span>(i + k - <span class="number">1</span>, n - <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> q <span class="keyword">and</span> q[<span class="number">0</span>] &gt; max_index:</span><br><span class="line">            q.popleft()</span><br><span class="line">        <span class="keyword">while</span> q <span class="keyword">and</span> nums[i] &lt;= nums[q[-<span class="number">1</span>]]:</span><br><span class="line">            q.pop()</span><br><span class="line">        q.append(i)</span><br><span class="line">        ans[i] = nums[q[<span class="number">0</span>]]</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">max_sliding_window</span>(<span class="params">nums: <span class="built_in">list</span>, k: <span class="built_in">int</span></span>) -&gt; <span class="built_in">list</span>: <span class="comment"># 滑动窗口最大值</span></span><br><span class="line">    n = <span class="built_in">len</span>(nums)</span><br><span class="line">    ans = [<span class="number">0</span>] * n</span><br><span class="line">    q = deque()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n - <span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">        max_index = <span class="built_in">min</span>(i + k - <span class="number">1</span>, n - <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> q <span class="keyword">and</span> q[<span class="number">0</span>] &gt; max_index:</span><br><span class="line">            q.popleft()</span><br><span class="line">        <span class="keyword">while</span> q <span class="keyword">and</span> nums[i] &gt;= nums[q[-<span class="number">1</span>]]:</span><br><span class="line">            q.pop()</span><br><span class="line">        q.append(i)</span><br><span class="line">        ans[i] = nums[q[<span class="number">0</span>]]</span><br><span class="line">    <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><h3 id="字符串哈希"><a href="#字符串哈希" class="headerlink" title="字符串哈希"></a>字符串哈希</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StringHash</span>: <span class="comment"># 字符串哈希</span></span><br><span class="line"></span><br><span class="line">    BASE, MOD = randint(<span class="number">8</span> * <span class="number">10</span> ** <span class="number">8</span>, <span class="number">9</span> * <span class="number">10</span> ** <span class="number">8</span>), <span class="number">1070777777</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, s: <span class="built_in">str</span></span>):</span><br><span class="line">        n = <span class="built_in">len</span>(s)</span><br><span class="line">        BASE, MOD = StringHash.BASE, StringHash.MOD</span><br><span class="line">        <span class="variable language_">self</span>.pow_base, <span class="variable language_">self</span>.pre_hash = [<span class="number">1</span>] * (n + <span class="number">1</span>), [<span class="number">0</span>] * (n + <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span> i, c <span class="keyword">in</span> <span class="built_in">enumerate</span>(s):</span><br><span class="line">            <span class="variable language_">self</span>.pow_base[i + <span class="number">1</span>] = <span class="variable language_">self</span>.pow_base[i] * BASE % MOD</span><br><span class="line">            <span class="variable language_">self</span>.pre_hash[i + <span class="number">1</span>] = (<span class="variable language_">self</span>.pre_hash[i] * BASE + <span class="built_in">ord</span>(c)) % MOD</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sub_hash</span>(<span class="params">self, l: <span class="built_in">int</span>, r: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>: <span class="comment"># 计算子字符串的哈希值</span></span><br><span class="line">        <span class="keyword">return</span> (<span class="variable language_">self</span>.pre_hash[r + <span class="number">1</span>] - <span class="variable language_">self</span>.pre_hash[l] * <span class="variable language_">self</span>.pow_base[r - l + <span class="number">1</span>]) % StringHash.MOD</span><br></pre></td></tr></table></figure><h3 id="KMP"><a href="#KMP" class="headerlink" title="KMP"></a>KMP</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">kmp</span>(<span class="params">s: <span class="built_in">str</span>, t: <span class="built_in">str</span></span>) -&gt; <span class="built_in">int</span>: <span class="comment"># s：主串 t：目标串</span></span><br><span class="line">    m, n = <span class="built_in">len</span>(s), <span class="built_in">len</span>(t)</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">    <span class="built_in">next</span> = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n):</span><br><span class="line">        <span class="keyword">while</span> j &gt; <span class="number">0</span> <span class="keyword">and</span> t[i] != t[j]:</span><br><span class="line">            j = <span class="built_in">next</span>[j - <span class="number">1</span>]</span><br><span class="line">        <span class="keyword">if</span> t[i] == t[j]:</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">        <span class="built_in">next</span>[i] = j</span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">        <span class="keyword">while</span> j &gt; <span class="number">0</span> <span class="keyword">and</span> s[i] != t[j]:</span><br><span class="line">            j = <span class="built_in">next</span>[j - <span class="number">1</span>]</span><br><span class="line">        <span class="keyword">if</span> s[i] == t[j]:</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> j == n:</span><br><span class="line">            <span class="keyword">return</span> i - n + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="Z-函数"><a href="#Z-函数" class="headerlink" title="Z 函数"></a>Z 函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">calc_z</span>(<span class="params">s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">list</span>: <span class="comment"># Z 函数</span></span><br><span class="line">    n = <span class="built_in">len</span>(s)</span><br><span class="line">    z = [<span class="number">0</span>] * n</span><br><span class="line">    z[<span class="number">0</span>] = n</span><br><span class="line">    l = r = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n):</span><br><span class="line">        <span class="keyword">if</span> i &lt;= r:</span><br><span class="line">            z[i] = z[i - l] <span class="keyword">if</span> z[i - l] &lt; r - i + <span class="number">1</span> <span class="keyword">else</span> r - i + <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> i + z[i] &lt; n <span class="keyword">and</span> s[z[i]] == s[i + z[i]]:</span><br><span class="line">            l, r = i, i + z[i]</span><br><span class="line">            z[i] += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> z</span><br></pre></td></tr></table></figure><h3 id="字典树"><a href="#字典树" class="headerlink" title="字典树"></a>字典树</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TrieNode</span>: <span class="comment"># 字典树节点</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.children = &#123;&#125;</span><br><span class="line">        <span class="variable language_">self</span>.is_word = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Trie</span>: <span class="comment"># 字典树</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.root = TrieNode()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">insert</span>(<span class="params">self, word: <span class="built_in">str</span></span>): <span class="comment"># 插入单词</span></span><br><span class="line">        p = <span class="variable language_">self</span>.root</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> word:</span><br><span class="line">            <span class="keyword">if</span> c <span class="keyword">not</span> <span class="keyword">in</span> p.children:</span><br><span class="line">                p.children[c] = TrieNode()</span><br><span class="line">            p = p.children[c]</span><br><span class="line">        p.is_word = <span class="literal">True</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">search_prefix</span>(<span class="params">self, word: <span class="built_in">str</span></span>) -&gt; TrieNode(): <span class="comment"># 查找前缀</span></span><br><span class="line">        p = <span class="variable language_">self</span>.root</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> word:</span><br><span class="line">            <span class="keyword">if</span> c <span class="keyword">not</span> <span class="keyword">in</span> p.children:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">            p = p.children[c]</span><br><span class="line">        <span class="keyword">return</span> p</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">search</span>(<span class="params">self, word: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>: <span class="comment"># 查找单词</span></span><br><span class="line">        p = <span class="variable language_">self</span>.search_prefix(word)</span><br><span class="line">        <span class="keyword">return</span> p <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> p.is_word</span><br></pre></td></tr></table></figure><h1 id="图论"><a href="#图论" class="headerlink" title="图论"></a>图论</h1><h3 id="Dijkstra"><a href="#Dijkstra" class="headerlink" title="Dijkstra"></a>Dijkstra</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> heapq <span class="keyword">import</span> heappush, heappop</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> inf</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dijkstra</span>(<span class="params">mat: <span class="built_in">list</span>, a: <span class="built_in">int</span></span>) -&gt; <span class="built_in">list</span>: <span class="comment"># 单源最短路</span></span><br><span class="line">    n = <span class="built_in">len</span>(mat)</span><br><span class="line">    ans = [inf] * n</span><br><span class="line">    ans[a] = <span class="number">0</span></span><br><span class="line">    q = deque([a])</span><br><span class="line">    <span class="keyword">while</span> q:</span><br><span class="line">        x = q.popleft()</span><br><span class="line">        <span class="keyword">for</span> y, d <span class="keyword">in</span> <span class="built_in">enumerate</span>(mat[x]):</span><br><span class="line">            <span class="keyword">if</span> ans[y] &gt; ans[x] + d:</span><br><span class="line">                ans[y] = ans[x] + d</span><br><span class="line">                q.append(y)</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dijkstra</span>(<span class="params">g: <span class="built_in">list</span>, a: <span class="built_in">int</span></span>) -&gt; <span class="built_in">list</span>: <span class="comment"># 堆优化的单源最短路</span></span><br><span class="line">    n = <span class="built_in">len</span>(g)</span><br><span class="line">    ans, st, q = [inf] * n, [<span class="literal">False</span>] * n, []</span><br><span class="line">    ans[a] = <span class="number">0</span></span><br><span class="line">    heappush(q, (<span class="number">0</span>, a))</span><br><span class="line">    <span class="keyword">while</span> q:</span><br><span class="line">        dist, x = heappop(q)</span><br><span class="line">        <span class="keyword">if</span> st[x]:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        st[x] = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">for</span> t <span class="keyword">in</span> g[x]:</span><br><span class="line">            y, d = t</span><br><span class="line">            <span class="keyword">if</span> ans[y] &gt; ans[x] + d:</span><br><span class="line">                ans[y] = ans[x] + d</span><br><span class="line">                heappush(q, (ans[y], y))</span><br><span class="line">    <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><h3 id="Floyd"><a href="#Floyd" class="headerlink" title="Floyd"></a>Floyd</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">floyd</span>(<span class="params">mat: <span class="built_in">list</span></span>) -&gt; <span class="literal">None</span>: <span class="comment"># 全源最短路</span></span><br><span class="line">    n = <span class="built_in">len</span>(mat)</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">                <span class="keyword">if</span> mat[i][j] &gt; mat[i][k] + mat[k][j]:</span><br><span class="line">                    mat[i][j] = mat[i][k] + mat[k][j]</span><br></pre></td></tr></table></figure><h3 id="拓扑排序"><a href="#拓扑排序" class="headerlink" title="拓扑排序"></a>拓扑排序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">n: <span class="built_in">int</span>, edges: <span class="built_in">list</span></span>) -&gt; <span class="built_in">list</span>: <span class="comment"># 返回该有向无环图的拓扑排序</span></span><br><span class="line">    g, deg = [[] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)], [<span class="number">0</span>] * n</span><br><span class="line">    <span class="keyword">for</span> u, v <span class="keyword">in</span> edges:</span><br><span class="line">        g[u].append(v)</span><br><span class="line">        deg[v] += <span class="number">1</span></span><br><span class="line">    ans = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n) <span class="keyword">if</span> deg[i] == <span class="number">0</span>]</span><br><span class="line">    q = deque(ans)</span><br><span class="line">    <span class="keyword">while</span> q:</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> g[q.popleft()]:</span><br><span class="line">            deg[x] -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> deg[x] == <span class="number">0</span>:</span><br><span class="line">                q.append(x)</span><br><span class="line">                ans.append(x)</span><br><span class="line">    <span class="keyword">return</span> ans <span class="keyword">if</span> <span class="built_in">len</span>(ans) == n <span class="keyword">else</span> []</span><br></pre></td></tr></table></figure><h3 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">UnionFindSet</span>: <span class="comment"># 并查集</span></span><br><span class="line"></span><br><span class="line">    __slots__ = (<span class="string">&quot;n&quot;</span>, <span class="string">&quot;fa&quot;</span>, <span class="string">&quot;size&quot;</span>, <span class="string">&quot;cnt&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, n: <span class="built_in">int</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.n = n</span><br><span class="line">        <span class="variable language_">self</span>.fa = <span class="built_in">list</span>(<span class="built_in">range</span>(n))</span><br><span class="line">        <span class="variable language_">self</span>.size = [<span class="number">1</span>] * n</span><br><span class="line">        <span class="variable language_">self</span>.cnt = n</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">find</span>(<span class="params">self, x: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>: <span class="comment"># 查找元素 x 所在集合的代表元素</span></span><br><span class="line">        ans, fa = x, <span class="variable language_">self</span>.fa</span><br><span class="line">        <span class="keyword">while</span> fa[ans] != ans:</span><br><span class="line">            ans = fa[ans]</span><br><span class="line">        <span class="keyword">while</span> fa[x] != ans:</span><br><span class="line">            fa[x], x = ans, fa[x]</span><br><span class="line">        <span class="keyword">return</span> ans</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">self, i: <span class="built_in">int</span>, j: <span class="built_in">int</span></span>): <span class="comment"># 合并元素 i 和 j 所在的集合</span></span><br><span class="line">        fa, size = <span class="variable language_">self</span>.fa, <span class="variable language_">self</span>.size</span><br><span class="line">        x, y = <span class="variable language_">self</span>.find(i), <span class="variable language_">self</span>.find(j)</span><br><span class="line">        <span class="keyword">if</span> x == y:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">if</span> size[x] &gt; size[y]:</span><br><span class="line">            x, y = y, x</span><br><span class="line">        fa[x] = y</span><br><span class="line">        size[y] += size[x]</span><br><span class="line">        <span class="variable language_">self</span>.cnt -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_same</span>(<span class="params">self, i: <span class="built_in">int</span>, j: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bool</span>: <span class="comment"># 判断元素 i 和 j 是否属于同一集合</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.find(i) == <span class="variable language_">self</span>.find(j)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_size</span>(<span class="params">self, x: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>: <span class="comment"># 查询元素 x 所在集合的元素个数</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.size[<span class="variable language_">self</span>.find(x)]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_cnt</span>(<span class="params">self</span>) -&gt; <span class="built_in">int</span>: <span class="comment"># 查询不同集合的个数</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.cnt</span><br></pre></td></tr></table></figure><h1 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h1><h3 id="数位-DP"><a href="#数位-DP" class="headerlink" title="数位 DP"></a>数位 DP</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> cache</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">digitalDP</span>(<span class="params">n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>: <span class="comment"># 数位 DP 通用模板</span></span><br><span class="line">    s = <span class="built_in">str</span>(n)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @cache</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">i: <span class="built_in">int</span>, is_limit: <span class="built_in">bool</span>, is_num: <span class="built_in">bool</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">if</span> i == <span class="built_in">len</span>(s):</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">int</span>(is_num)</span><br><span class="line">        ret = <span class="number">0</span> <span class="keyword">if</span> is_num <span class="keyword">else</span> dfs(i + <span class="number">1</span>, <span class="literal">False</span>, <span class="literal">False</span>)</span><br><span class="line">        up = <span class="built_in">int</span>(s[i]) <span class="keyword">if</span> is_limit <span class="keyword">else</span> <span class="number">9</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span> - <span class="built_in">int</span>(is_num), up + <span class="number">1</span>):</span><br><span class="line">            ret += dfs(i + <span class="number">1</span>, j == up <span class="keyword">and</span> is_limit, <span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> dfs(<span class="number">0</span>, <span class="literal">True</span>, <span class="literal">False</span>)</span><br></pre></td></tr></table></figure><h3 id="矩阵快速幂"><a href="#矩阵快速幂" class="headerlink" title="矩阵快速幂"></a>矩阵快速幂</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> copy <span class="keyword">import</span> deepcopy</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mat_mul</span>(<span class="params">a: <span class="built_in">list</span>, b: <span class="built_in">list</span>, MOD = <span class="number">10</span> ** <span class="number">9</span> + <span class="number">7</span></span>) -&gt; <span class="built_in">list</span>: <span class="comment"># 矩阵乘法 a * b = c</span></span><br><span class="line">    m, t, n = <span class="built_in">len</span>(a), <span class="built_in">len</span>(b), <span class="built_in">len</span>(b[<span class="number">0</span>])</span><br><span class="line">    c = [[<span class="number">0</span>] * n <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(m)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            c[i][j] = <span class="built_in">sum</span>(a[i][k] * b[k][j] <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(t)) % MOD</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mat_pow</span>(<span class="params">a: <span class="built_in">list</span>, n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">list</span>: <span class="comment"># 矩阵幂运算 a ^ n = res</span></span><br><span class="line">    m = <span class="built_in">len</span>(a)</span><br><span class="line">    res, a = [[<span class="number">0</span>] * m <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(m)], deepcopy(a)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">        res[i][i] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> n:</span><br><span class="line">        <span class="keyword">if</span> n &amp; <span class="number">1</span>:</span><br><span class="line">            res = mat_mul(res, a)</span><br><span class="line">        n &gt;&gt;= <span class="number">1</span></span><br><span class="line">        a = mat_mul(a, a)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mat_pow</span>(<span class="params">a: <span class="built_in">list</span>, n: <span class="built_in">int</span>, MOD = <span class="number">10</span> ** <span class="number">9</span> + <span class="number">7</span></span>) -&gt; <span class="built_in">list</span>: <span class="comment"># 矩阵幂运算 a ^ n = res</span></span><br><span class="line">    a = np.array(a, dtype=<span class="built_in">object</span>)</span><br><span class="line">    res = np.eye(a.shape[<span class="number">0</span>], dtype=<span class="built_in">object</span>)</span><br><span class="line">    <span class="keyword">while</span> n:</span><br><span class="line">        <span class="keyword">if</span> n &amp; <span class="number">1</span>:</span><br><span class="line">            res = np.dot(res, a) % MOD</span><br><span class="line">        n &gt;&gt;= <span class="number">1</span></span><br><span class="line">        a = np.dot(a, a) % MOD</span><br><span class="line">    <span class="keyword">return</span> res.tolist()</span><br></pre></td></tr></table></figure><h1 id="数论"><a href="#数论" class="headerlink" title="数论"></a>数论</h1><h3 id="质数筛选"><a href="#质数筛选" class="headerlink" title="质数筛选"></a>质数筛选</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_primes</span>(<span class="params">n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">list</span>: <span class="comment"># 埃氏筛</span></span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> [<span class="literal">False</span>] * (n + <span class="number">1</span>)</span><br><span class="line">    ans = [<span class="literal">True</span>] * (n + <span class="number">1</span>)</span><br><span class="line">    ans[<span class="number">0</span>] = ans[<span class="number">1</span>] = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, n + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> ans[i]:</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i * i, n + <span class="number">1</span>, i):</span><br><span class="line">                ans[j] = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><h3 id="质因数分解"><a href="#质因数分解" class="headerlink" title="质因数分解"></a>质因数分解</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_primes</span>(<span class="params">n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">list</span>: <span class="comment"># 质因数分解</span></span><br><span class="line">    i, ans = <span class="number">2</span>, []</span><br><span class="line">    <span class="keyword">while</span> i ** <span class="number">2</span> &lt;= n:</span><br><span class="line">        <span class="keyword">if</span> n % i == <span class="number">0</span>:</span><br><span class="line">            ans.append([i, <span class="number">0</span>])</span><br><span class="line">            <span class="keyword">while</span> n % i == <span class="number">0</span>:</span><br><span class="line">                n //= i</span><br><span class="line">                ans[-<span class="number">1</span>][<span class="number">1</span>] += <span class="number">1</span></span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> n &gt; <span class="number">1</span>:</span><br><span class="line">        ans.append([n, <span class="number">1</span>])</span><br><span class="line">    <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><h3 id="乘法逆元"><a href="#乘法逆元" class="headerlink" title="乘法逆元"></a>乘法逆元</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_inv</span>(<span class="params">n: <span class="built_in">int</span>, MOD = <span class="number">10</span> ** <span class="number">9</span> + <span class="number">7</span></span>) -&gt; <span class="built_in">list</span>: <span class="comment"># 返回所有位于 [1, n] 的整数在模 MOD 意义下的乘法逆元</span></span><br><span class="line">    inv = [<span class="number">1</span>] * (n + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, n + <span class="number">1</span>):</span><br><span class="line">        inv[i] = (MOD - MOD // i) * inv[MOD % i] % MOD</span><br><span class="line">    <span class="keyword">return</span> inv</span><br></pre></td></tr></table></figure><h1 id="高级数据结构"><a href="#高级数据结构" class="headerlink" title="高级数据结构"></a>高级数据结构</h1><h3 id="树状数组-Sum"><a href="#树状数组-Sum" class="headerlink" title="树状数组 Sum"></a>树状数组 Sum</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BinaryIndexedTreesSum</span>: <span class="comment"># 树状数组 Sum</span></span><br><span class="line"></span><br><span class="line">    __slots__ = (<span class="string">&quot;n&quot;</span>, <span class="string">&quot;d&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, nums: <span class="built_in">list</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.n = <span class="built_in">len</span>(nums) + <span class="number">1</span></span><br><span class="line">        <span class="variable language_">self</span>.d = [<span class="number">0</span>] * <span class="variable language_">self</span>.n</span><br><span class="line">        <span class="keyword">for</span> i, v <span class="keyword">in</span> <span class="built_in">enumerate</span>(nums):</span><br><span class="line">            <span class="variable language_">self</span>.update(i, v)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">query</span>(<span class="params">self, i: <span class="built_in">int</span>, j = -<span class="number">1</span></span>) -&gt; <span class="built_in">int</span>: <span class="comment"># 区间查询</span></span><br><span class="line">        <span class="keyword">if</span> j &lt; <span class="number">0</span>:</span><br><span class="line">            ans = <span class="number">0</span></span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> i &gt; <span class="number">0</span>:</span><br><span class="line">                ans += <span class="variable language_">self</span>.d[i]</span><br><span class="line">                i &amp;= i - <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> ans</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">self</span>.query(j) - <span class="variable language_">self</span>.query(i - <span class="number">1</span>)    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self, i: <span class="built_in">int</span>, k: <span class="built_in">int</span></span>): <span class="comment"># 单点修改</span></span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; <span class="variable language_">self</span>.n:</span><br><span class="line">            <span class="variable language_">self</span>.d[i] += k</span><br><span class="line">            i += i &amp; -i</span><br></pre></td></tr></table></figure><h3 id="树状数组-Min"><a href="#树状数组-Min" class="headerlink" title="树状数组 Min"></a>树状数组 Min</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> inf</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BinaryIndexedTreesMin</span>: <span class="comment"># 树状数组 Min</span></span><br><span class="line"></span><br><span class="line">    __slots__ = (<span class="string">&quot;n&quot;</span>, <span class="string">&quot;a&quot;</span>, <span class="string">&quot;d&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, nums: <span class="built_in">list</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.n = <span class="built_in">len</span>(nums) + <span class="number">1</span></span><br><span class="line">        <span class="variable language_">self</span>.a = [inf] * <span class="variable language_">self</span>.n</span><br><span class="line">        <span class="variable language_">self</span>.d = [inf] * <span class="variable language_">self</span>.n</span><br><span class="line">        <span class="keyword">for</span> i, v <span class="keyword">in</span> <span class="built_in">enumerate</span>(nums):</span><br><span class="line">            <span class="variable language_">self</span>.update(i, v)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">query</span>(<span class="params">self, i: <span class="built_in">int</span>, j: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>: <span class="comment"># 区间查询</span></span><br><span class="line">        ans = inf</span><br><span class="line">        i += <span class="number">1</span>; j += <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> i &lt;= j:</span><br><span class="line">            <span class="keyword">if</span> ans &gt; <span class="variable language_">self</span>.a[j]:</span><br><span class="line">                ans = <span class="variable language_">self</span>.a[j]</span><br><span class="line">            j -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> i &lt;= j - (j &amp; -j):</span><br><span class="line">                <span class="keyword">if</span> ans &gt; <span class="variable language_">self</span>.d[j]:</span><br><span class="line">                    ans = <span class="variable language_">self</span>.d[j]</span><br><span class="line">                j -= j &amp; -j</span><br><span class="line">        <span class="keyword">return</span> ans</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self, i: <span class="built_in">int</span>, val: <span class="built_in">int</span></span>): <span class="comment"># 单点修改</span></span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">        <span class="variable language_">self</span>.a[i] = val</span><br><span class="line">        <span class="keyword">while</span> i &lt; <span class="variable language_">self</span>.n:</span><br><span class="line">            <span class="keyword">if</span> <span class="variable language_">self</span>.d[i] &gt; val:</span><br><span class="line">                <span class="variable language_">self</span>.d[i] = val</span><br><span class="line">            i += i &amp; -i</span><br></pre></td></tr></table></figure><h3 id="树状数组-Max"><a href="#树状数组-Max" class="headerlink" title="树状数组 Max"></a>树状数组 Max</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> inf</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BinaryIndexedTreesMax</span>: <span class="comment"># 树状数组 Max</span></span><br><span class="line"></span><br><span class="line">    __slots__ = (<span class="string">&quot;n&quot;</span>, <span class="string">&quot;a&quot;</span>, <span class="string">&quot;d&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, nums: <span class="built_in">list</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.n = <span class="built_in">len</span>(nums) + <span class="number">1</span></span><br><span class="line">        <span class="variable language_">self</span>.a = [-inf] * <span class="variable language_">self</span>.n</span><br><span class="line">        <span class="variable language_">self</span>.d = [-inf] * <span class="variable language_">self</span>.n</span><br><span class="line">        <span class="keyword">for</span> i, v <span class="keyword">in</span> <span class="built_in">enumerate</span>(nums):</span><br><span class="line">            <span class="variable language_">self</span>.update(i, v)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">query</span>(<span class="params">self, i: <span class="built_in">int</span>, j: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>: <span class="comment"># 区间查询</span></span><br><span class="line">        ans = -inf</span><br><span class="line">        i += <span class="number">1</span>; j += <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> i &lt;= j:</span><br><span class="line">            <span class="keyword">if</span> ans &lt; <span class="variable language_">self</span>.a[j]:</span><br><span class="line">                ans = <span class="variable language_">self</span>.a[j]</span><br><span class="line">            j -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> i &lt;= j - (j &amp; -j):</span><br><span class="line">                <span class="keyword">if</span> ans &lt; <span class="variable language_">self</span>.d[j]:</span><br><span class="line">                    ans = <span class="variable language_">self</span>.d[j]</span><br><span class="line">                j -= j &amp; -j</span><br><span class="line">        <span class="keyword">return</span> ans</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self, i: <span class="built_in">int</span>, val: <span class="built_in">int</span></span>): <span class="comment"># 单点修改</span></span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">        <span class="variable language_">self</span>.a[i] = val</span><br><span class="line">        <span class="keyword">while</span> i &lt; <span class="variable language_">self</span>.n:</span><br><span class="line">            <span class="keyword">if</span> <span class="variable language_">self</span>.d[i] &lt; val:</span><br><span class="line">                <span class="variable language_">self</span>.d[i] = val</span><br><span class="line">            i += i &amp; -i</span><br></pre></td></tr></table></figure><h3 id="线段树"><a href="#线段树" class="headerlink" title="线段树"></a>线段树</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SegmentTree</span>: <span class="comment"># 线段树</span></span><br><span class="line"></span><br><span class="line">    __slots__ = (<span class="string">&quot;n&quot;</span>, <span class="string">&quot;d&quot;</span>, <span class="string">&quot;lazy&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, nums</span>):</span><br><span class="line">        <span class="variable language_">self</span>.n = <span class="built_in">len</span>(nums)</span><br><span class="line">        <span class="variable language_">self</span>.d = [<span class="number">0</span>] * (<span class="number">1</span> &lt;&lt; (<span class="variable language_">self</span>.n.bit_length() + <span class="number">1</span>))</span><br><span class="line">        <span class="variable language_">self</span>.lazy = <span class="variable language_">self</span>.d.copy()</span><br><span class="line">        <span class="variable language_">self</span>.__build__(nums, <span class="number">0</span>, <span class="variable language_">self</span>.n - <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__build__</span>(<span class="params">self, nums, left: <span class="built_in">int</span>, right: <span class="built_in">int</span>, i: <span class="built_in">int</span></span>): <span class="comment"># 建树</span></span><br><span class="line">        <span class="keyword">if</span> left == right:</span><br><span class="line">            <span class="variable language_">self</span>.d[i] = nums[left]</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        mid = (left + right) &gt;&gt; <span class="number">1</span></span><br><span class="line">        <span class="variable language_">self</span>.__build__(nums, left, mid, <span class="number">2</span> * i)</span><br><span class="line">        <span class="variable language_">self</span>.__build__(nums, mid + <span class="number">1</span>, right, <span class="number">2</span> * i + <span class="number">1</span>)</span><br><span class="line">        <span class="variable language_">self</span>.d[i] = <span class="variable language_">self</span>.d[<span class="number">2</span> * i] + <span class="variable language_">self</span>.d[<span class="number">2</span> * i + <span class="number">1</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__query__</span>(<span class="params">self, start: <span class="built_in">int</span>, end: <span class="built_in">int</span>, left: <span class="built_in">int</span>, right: <span class="built_in">int</span>, i: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>: <span class="comment"># 区间查询</span></span><br><span class="line">        <span class="keyword">if</span> left &gt;= start <span class="keyword">and</span> right &lt;= end:</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">self</span>.d[i]</span><br><span class="line">        ret, mid = <span class="number">0</span>, (left + right) &gt;&gt; <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.lazy[i] <span class="keyword">and</span> left != right:</span><br><span class="line">            <span class="variable language_">self</span>.d[<span class="number">2</span> * i] += (mid - left + <span class="number">1</span>) * <span class="variable language_">self</span>.lazy[i]</span><br><span class="line">            <span class="variable language_">self</span>.d[<span class="number">2</span> * i + <span class="number">1</span>] += (right - mid) * <span class="variable language_">self</span>.lazy[i]</span><br><span class="line">            <span class="variable language_">self</span>.lazy[<span class="number">2</span> * i] += <span class="variable language_">self</span>.lazy[i]</span><br><span class="line">            <span class="variable language_">self</span>.lazy[<span class="number">2</span> * i + <span class="number">1</span>] += <span class="variable language_">self</span>.lazy[i]</span><br><span class="line">            <span class="variable language_">self</span>.lazy[i] = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> start &lt;= mid:</span><br><span class="line">            ret += <span class="variable language_">self</span>.__query__(start, end, left, mid, <span class="number">2</span> * i)</span><br><span class="line">        <span class="keyword">if</span> end &gt;= mid + <span class="number">1</span>:</span><br><span class="line">            ret += <span class="variable language_">self</span>.__query__(start, end, mid + <span class="number">1</span>, right, <span class="number">2</span> * i + <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__update__</span>(<span class="params">self, start: <span class="built_in">int</span>, end: <span class="built_in">int</span>, k: <span class="built_in">int</span>, left: <span class="built_in">int</span>, right: <span class="built_in">int</span>, i: <span class="built_in">int</span></span>): <span class="comment"># 区间修改</span></span><br><span class="line">        <span class="keyword">if</span> left &gt;= start <span class="keyword">and</span> right &lt;= end:</span><br><span class="line">            <span class="variable language_">self</span>.d[i] += (right - left + <span class="number">1</span>) * k</span><br><span class="line">            <span class="variable language_">self</span>.lazy[i] += k</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        mid = (left + right) &gt;&gt; <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.lazy[i] <span class="keyword">and</span> left != right:</span><br><span class="line">            <span class="variable language_">self</span>.d[<span class="number">2</span> * i] += (mid - left + <span class="number">1</span>) * <span class="variable language_">self</span>.lazy[i]</span><br><span class="line">            <span class="variable language_">self</span>.d[<span class="number">2</span> * i + <span class="number">1</span>] += (right - mid) * <span class="variable language_">self</span>.lazy[i]</span><br><span class="line">            <span class="variable language_">self</span>.lazy[<span class="number">2</span> * i] += <span class="variable language_">self</span>.lazy[i]</span><br><span class="line">            <span class="variable language_">self</span>.lazy[<span class="number">2</span> * i + <span class="number">1</span>] += <span class="variable language_">self</span>.lazy[i]</span><br><span class="line">            <span class="variable language_">self</span>.lazy[i] = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> start &lt;= mid:</span><br><span class="line">            <span class="variable language_">self</span>.__update__(start, end, k, left, mid, <span class="number">2</span> * i)</span><br><span class="line">        <span class="keyword">if</span> end &gt;= mid + <span class="number">1</span>:</span><br><span class="line">            <span class="variable language_">self</span>.__update__(start, end, k, mid + <span class="number">1</span>, right, <span class="number">2</span> * i + <span class="number">1</span>)</span><br><span class="line">        <span class="variable language_">self</span>.d[i] = <span class="variable language_">self</span>.d[<span class="number">2</span> * i] + <span class="variable language_">self</span>.d[<span class="number">2</span> * i + <span class="number">1</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">query</span>(<span class="params">self, start: <span class="built_in">int</span>, end: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>: <span class="comment"># 区间查询</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.__query__(start, end, <span class="number">0</span>, <span class="variable language_">self</span>.n - <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self, start: <span class="built_in">int</span>, end: <span class="built_in">int</span>, k: <span class="built_in">int</span></span>): <span class="comment"># 区间修改</span></span><br><span class="line">        <span class="variable language_">self</span>.__update__(start, end, k, <span class="number">0</span>, <span class="variable language_">self</span>.n - <span class="number">1</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure><h3 id="平衡树"><a href="#平衡树" class="headerlink" title="平衡树"></a>平衡树</h3><blockquote><p>sortedcontainers 源码</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br><span class="line">932</span><br><span class="line">933</span><br><span class="line">934</span><br><span class="line">935</span><br><span class="line">936</span><br><span class="line">937</span><br><span class="line">938</span><br><span class="line">939</span><br><span class="line">940</span><br><span class="line">941</span><br><span class="line">942</span><br><span class="line">943</span><br><span class="line">944</span><br><span class="line">945</span><br><span class="line">946</span><br><span class="line">947</span><br><span class="line">948</span><br><span class="line">949</span><br><span class="line">950</span><br><span class="line">951</span><br><span class="line">952</span><br><span class="line">953</span><br><span class="line">954</span><br><span class="line">955</span><br><span class="line">956</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> traceback</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> bisect <span class="keyword">import</span> bisect_left, bisect_right, insort</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> chain, repeat, starmap</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> log</span><br><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> add, eq, ne, gt, ge, lt, le, iadd</span><br><span class="line"><span class="keyword">from</span> textwrap <span class="keyword">import</span> dedent</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">from</span> collections.abc <span class="keyword">import</span> <span class="type">Sequence</span>, MutableSequence</span><br><span class="line"><span class="keyword">except</span> ImportError:</span><br><span class="line">    <span class="keyword">from</span> collections <span class="keyword">import</span> <span class="type">Sequence</span>, MutableSequence</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> hexversion</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> hexversion &lt; <span class="number">0x03000000</span>:</span><br><span class="line">    <span class="keyword">from</span> itertools <span class="keyword">import</span> imap <span class="keyword">as</span> <span class="built_in">map</span>  </span><br><span class="line">    <span class="keyword">from</span> itertools <span class="keyword">import</span> izip <span class="keyword">as</span> <span class="built_in">zip</span>  </span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">from</span> thread <span class="keyword">import</span> get_ident</span><br><span class="line">    <span class="keyword">except</span> ImportError:</span><br><span class="line">        <span class="keyword">from</span> dummy_thread <span class="keyword">import</span> get_ident</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">from</span> _thread <span class="keyword">import</span> get_ident</span><br><span class="line">    <span class="keyword">except</span> ImportError:</span><br><span class="line">        <span class="keyword">from</span> _dummy_thread <span class="keyword">import</span> get_ident</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">recursive_repr</span>(<span class="params">fillvalue=<span class="string">&#x27;...&#x27;</span></span>):</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decorating_function</span>(<span class="params">user_function</span>):</span><br><span class="line">        repr_running = <span class="built_in">set</span>()</span><br><span class="line"></span><br><span class="line"><span class="meta">        @wraps(<span class="params">user_function</span>)</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">self</span>):</span><br><span class="line">            key = <span class="built_in">id</span>(<span class="variable language_">self</span>), get_ident()</span><br><span class="line">            <span class="keyword">if</span> key <span class="keyword">in</span> repr_running:</span><br><span class="line">                <span class="keyword">return</span> fillvalue</span><br><span class="line">            repr_running.add(key)</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                result = user_function(<span class="variable language_">self</span>)</span><br><span class="line">            <span class="keyword">finally</span>:</span><br><span class="line">                repr_running.discard(key)</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> decorating_function</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SortedList</span>(<span class="title class_ inherited__">MutableSequence</span>):</span><br><span class="line"></span><br><span class="line">    DEFAULT_LOAD_FACTOR = <span class="number">1000</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, iterable=<span class="literal">None</span>, key=<span class="literal">None</span></span>):</span><br><span class="line"></span><br><span class="line">        <span class="keyword">assert</span> key <span class="keyword">is</span> <span class="literal">None</span></span><br><span class="line">        <span class="variable language_">self</span>._<span class="built_in">len</span> = <span class="number">0</span></span><br><span class="line">        <span class="variable language_">self</span>._load = <span class="variable language_">self</span>.DEFAULT_LOAD_FACTOR</span><br><span class="line">        <span class="variable language_">self</span>._lists = []</span><br><span class="line">        <span class="variable language_">self</span>._maxes = []</span><br><span class="line">        <span class="variable language_">self</span>._index = []</span><br><span class="line">        <span class="variable language_">self</span>._offset = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> iterable <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="variable language_">self</span>._update(iterable)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">cls, iterable=<span class="literal">None</span>, key=<span class="literal">None</span></span>):</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> key <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">object</span>.__new__(cls)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> cls <span class="keyword">is</span> SortedList:</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">object</span>.__new__(SortedKeyList)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">raise</span> TypeError(<span class="string">&#x27;inherit SortedKeyList for key argument&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">key</span>(<span class="params">self</span>):  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_reset</span>(<span class="params">self, load</span>):</span><br><span class="line"></span><br><span class="line">        values = reduce(iadd, <span class="variable language_">self</span>._lists, [])</span><br><span class="line">        <span class="variable language_">self</span>._clear()</span><br><span class="line">        <span class="variable language_">self</span>._load = load</span><br><span class="line">        <span class="variable language_">self</span>._update(values)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">clear</span>(<span class="params">self</span>):</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>._<span class="built_in">len</span> = <span class="number">0</span></span><br><span class="line">        <span class="keyword">del</span> <span class="variable language_">self</span>._lists[:]</span><br><span class="line">        <span class="keyword">del</span> <span class="variable language_">self</span>._maxes[:]</span><br><span class="line">        <span class="keyword">del</span> <span class="variable language_">self</span>._index[:]</span><br><span class="line">        <span class="variable language_">self</span>._offset = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    _clear = clear</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">self, value</span>):</span><br><span class="line"></span><br><span class="line">        _lists = <span class="variable language_">self</span>._lists</span><br><span class="line">        _maxes = <span class="variable language_">self</span>._maxes</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> _maxes:</span><br><span class="line">            pos = bisect_right(_maxes, value)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> pos == <span class="built_in">len</span>(_maxes):</span><br><span class="line">                pos -= <span class="number">1</span></span><br><span class="line">                _lists[pos].append(value)</span><br><span class="line">                _maxes[pos] = value</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                insort(_lists[pos], value)</span><br><span class="line"></span><br><span class="line">            <span class="variable language_">self</span>._expand(pos)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            _lists.append([value])</span><br><span class="line">            _maxes.append(value)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>._<span class="built_in">len</span> += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_expand</span>(<span class="params">self, pos</span>):</span><br><span class="line"></span><br><span class="line">        _load = <span class="variable language_">self</span>._load</span><br><span class="line">        _lists = <span class="variable language_">self</span>._lists</span><br><span class="line">        _index = <span class="variable language_">self</span>._index</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(_lists[pos]) &gt; (_load &lt;&lt; <span class="number">1</span>):</span><br><span class="line">            _maxes = <span class="variable language_">self</span>._maxes</span><br><span class="line"></span><br><span class="line">            _lists_pos = _lists[pos]</span><br><span class="line">            half = _lists_pos[_load:]</span><br><span class="line">            <span class="keyword">del</span> _lists_pos[_load:]</span><br><span class="line">            _maxes[pos] = _lists_pos[-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">            _lists.insert(pos + <span class="number">1</span>, half)</span><br><span class="line">            _maxes.insert(pos + <span class="number">1</span>, half[-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">            <span class="keyword">del</span> _index[:]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> _index:</span><br><span class="line">                child = <span class="variable language_">self</span>._offset + pos</span><br><span class="line">                <span class="keyword">while</span> child:</span><br><span class="line">                    _index[child] += <span class="number">1</span></span><br><span class="line">                    child = (child - <span class="number">1</span>) &gt;&gt; <span class="number">1</span></span><br><span class="line">                _index[<span class="number">0</span>] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self, iterable</span>):</span><br><span class="line"></span><br><span class="line">        _lists = <span class="variable language_">self</span>._lists</span><br><span class="line">        _maxes = <span class="variable language_">self</span>._maxes</span><br><span class="line">        values = <span class="built_in">sorted</span>(iterable)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> _maxes:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(values) * <span class="number">4</span> &gt;= <span class="variable language_">self</span>._<span class="built_in">len</span>:</span><br><span class="line">                _lists.append(values)</span><br><span class="line">                values = reduce(iadd, _lists, [])</span><br><span class="line">                values.sort()</span><br><span class="line">                <span class="variable language_">self</span>._clear()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                _add = <span class="variable language_">self</span>.add</span><br><span class="line">                <span class="keyword">for</span> val <span class="keyword">in</span> values:</span><br><span class="line">                    _add(val)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        _load = <span class="variable language_">self</span>._load</span><br><span class="line">        _lists.extend(values[pos:(pos + _load)]</span><br><span class="line">                      <span class="keyword">for</span> pos <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(values), _load))</span><br><span class="line">        _maxes.extend(sublist[-<span class="number">1</span>] <span class="keyword">for</span> sublist <span class="keyword">in</span> _lists)</span><br><span class="line">        <span class="variable language_">self</span>._<span class="built_in">len</span> = <span class="built_in">len</span>(values)</span><br><span class="line">        <span class="keyword">del</span> <span class="variable language_">self</span>._index[:]</span><br><span class="line"></span><br><span class="line">    _update = update</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__contains__</span>(<span class="params">self, value</span>):</span><br><span class="line"></span><br><span class="line">        _maxes = <span class="variable language_">self</span>._maxes</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> _maxes:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        pos = bisect_left(_maxes, value)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> pos == <span class="built_in">len</span>(_maxes):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        _lists = <span class="variable language_">self</span>._lists</span><br><span class="line">        idx = bisect_left(_lists[pos], value)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> _lists[pos][idx] == value</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">discard</span>(<span class="params">self, value</span>):</span><br><span class="line"></span><br><span class="line">        _maxes = <span class="variable language_">self</span>._maxes</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> _maxes:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        pos = bisect_left(_maxes, value)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> pos == <span class="built_in">len</span>(_maxes):</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        _lists = <span class="variable language_">self</span>._lists</span><br><span class="line">        idx = bisect_left(_lists[pos], value)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> _lists[pos][idx] == value:</span><br><span class="line">            <span class="variable language_">self</span>._delete(pos, idx)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">remove</span>(<span class="params">self, value</span>):</span><br><span class="line"></span><br><span class="line">        _maxes = <span class="variable language_">self</span>._maxes</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> _maxes:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&#x27;&#123;0!r&#125; not in list&#x27;</span>.<span class="built_in">format</span>(value))</span><br><span class="line"></span><br><span class="line">        pos = bisect_left(_maxes, value)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> pos == <span class="built_in">len</span>(_maxes):</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&#x27;&#123;0!r&#125; not in list&#x27;</span>.<span class="built_in">format</span>(value))</span><br><span class="line"></span><br><span class="line">        _lists = <span class="variable language_">self</span>._lists</span><br><span class="line">        idx = bisect_left(_lists[pos], value)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> _lists[pos][idx] == value:</span><br><span class="line">            <span class="variable language_">self</span>._delete(pos, idx)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&#x27;&#123;0!r&#125; not in list&#x27;</span>.<span class="built_in">format</span>(value))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_delete</span>(<span class="params">self, pos, idx</span>):</span><br><span class="line"></span><br><span class="line">        _lists = <span class="variable language_">self</span>._lists</span><br><span class="line">        _maxes = <span class="variable language_">self</span>._maxes</span><br><span class="line">        _index = <span class="variable language_">self</span>._index</span><br><span class="line"></span><br><span class="line">        _lists_pos = _lists[pos]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">del</span> _lists_pos[idx]</span><br><span class="line">        <span class="variable language_">self</span>._<span class="built_in">len</span> -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        len_lists_pos = <span class="built_in">len</span>(_lists_pos)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> len_lists_pos &gt; (<span class="variable language_">self</span>._load &gt;&gt; <span class="number">1</span>):</span><br><span class="line">            _maxes[pos] = _lists_pos[-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> _index:</span><br><span class="line">                child = <span class="variable language_">self</span>._offset + pos</span><br><span class="line">                <span class="keyword">while</span> child &gt; <span class="number">0</span>:</span><br><span class="line">                    _index[child] -= <span class="number">1</span></span><br><span class="line">                    child = (child - <span class="number">1</span>) &gt;&gt; <span class="number">1</span></span><br><span class="line">                _index[<span class="number">0</span>] -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">len</span>(_lists) &gt; <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> pos:</span><br><span class="line">                pos += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            prev = pos - <span class="number">1</span></span><br><span class="line">            _lists[prev].extend(_lists[pos])</span><br><span class="line">            _maxes[prev] = _lists[prev][-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">            <span class="keyword">del</span> _lists[pos]</span><br><span class="line">            <span class="keyword">del</span> _maxes[pos]</span><br><span class="line">            <span class="keyword">del</span> _index[:]</span><br><span class="line"></span><br><span class="line">            <span class="variable language_">self</span>._expand(prev)</span><br><span class="line">        <span class="keyword">elif</span> len_lists_pos:</span><br><span class="line">            _maxes[pos] = _lists_pos[-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">del</span> _lists[pos]</span><br><span class="line">            <span class="keyword">del</span> _maxes[pos]</span><br><span class="line">            <span class="keyword">del</span> _index[:]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_loc</span>(<span class="params">self, pos, idx</span>):</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> pos:</span><br><span class="line">            <span class="keyword">return</span> idx</span><br><span class="line">        _index = <span class="variable language_">self</span>._index</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> _index:</span><br><span class="line">            <span class="variable language_">self</span>._build_index()</span><br><span class="line"></span><br><span class="line">        total = <span class="number">0</span></span><br><span class="line">        pos += <span class="variable language_">self</span>._offset</span><br><span class="line">        <span class="keyword">while</span> pos:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> pos &amp; <span class="number">1</span>:</span><br><span class="line">                total += _index[pos - <span class="number">1</span>]</span><br><span class="line">            pos = (pos - <span class="number">1</span>) &gt;&gt; <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> total + idx</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_pos</span>(<span class="params">self, idx</span>):</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> idx &lt; <span class="number">0</span>:</span><br><span class="line">            last_len = <span class="built_in">len</span>(<span class="variable language_">self</span>._lists[-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (-idx) &lt;= last_len:</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">len</span>(<span class="variable language_">self</span>._lists) - <span class="number">1</span>, last_len + idx</span><br><span class="line"></span><br><span class="line">            idx += <span class="variable language_">self</span>._<span class="built_in">len</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> idx &lt; <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">raise</span> IndexError(<span class="string">&#x27;list index out of range&#x27;</span>)</span><br><span class="line">        <span class="keyword">elif</span> idx &gt;= <span class="variable language_">self</span>._<span class="built_in">len</span>:</span><br><span class="line">            <span class="keyword">raise</span> IndexError(<span class="string">&#x27;list index out of range&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> idx &lt; <span class="built_in">len</span>(<span class="variable language_">self</span>._lists[<span class="number">0</span>]):</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>, idx</span><br><span class="line"></span><br><span class="line">        _index = <span class="variable language_">self</span>._index</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> _index:</span><br><span class="line">            <span class="variable language_">self</span>._build_index()</span><br><span class="line"></span><br><span class="line">        pos = <span class="number">0</span></span><br><span class="line">        child = <span class="number">1</span></span><br><span class="line">        len_index = <span class="built_in">len</span>(_index)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> child &lt; len_index:</span><br><span class="line">            index_child = _index[child]</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> idx &lt; index_child:</span><br><span class="line">                pos = child</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                idx -= index_child</span><br><span class="line">                pos = child + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            child = (pos &lt;&lt; <span class="number">1</span>) + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (pos - <span class="variable language_">self</span>._offset, idx)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_build_index</span>(<span class="params">self</span>):</span><br><span class="line"></span><br><span class="line">        row0 = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">len</span>, <span class="variable language_">self</span>._lists))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(row0) == <span class="number">1</span>:</span><br><span class="line">            <span class="variable language_">self</span>._index[:] = row0</span><br><span class="line">            <span class="variable language_">self</span>._offset = <span class="number">0</span></span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        head = <span class="built_in">iter</span>(row0)</span><br><span class="line">        tail = <span class="built_in">iter</span>(head)</span><br><span class="line">        row1 = <span class="built_in">list</span>(starmap(add, <span class="built_in">zip</span>(head, tail)))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(row0) &amp; <span class="number">1</span>:</span><br><span class="line">            row1.append(row0[-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(row1) == <span class="number">1</span>:</span><br><span class="line">            <span class="variable language_">self</span>._index[:] = row1 + row0</span><br><span class="line">            <span class="variable language_">self</span>._offset = <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        size = <span class="number">2</span> ** (<span class="built_in">int</span>(log(<span class="built_in">len</span>(row1) - <span class="number">1</span>, <span class="number">2</span>)) + <span class="number">1</span>)</span><br><span class="line">        row1.extend(repeat(<span class="number">0</span>, size - <span class="built_in">len</span>(row1)))</span><br><span class="line">        tree = [row0, row1]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> <span class="built_in">len</span>(tree[-<span class="number">1</span>]) &gt; <span class="number">1</span>:</span><br><span class="line">            head = <span class="built_in">iter</span>(tree[-<span class="number">1</span>])</span><br><span class="line">            tail = <span class="built_in">iter</span>(head)</span><br><span class="line">            row = <span class="built_in">list</span>(starmap(add, <span class="built_in">zip</span>(head, tail)))</span><br><span class="line">            tree.append(row)</span><br><span class="line"></span><br><span class="line">        reduce(iadd, <span class="built_in">reversed</span>(tree), <span class="variable language_">self</span>._index)</span><br><span class="line">        <span class="variable language_">self</span>._offset = size * <span class="number">2</span> - <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__delitem__</span>(<span class="params">self, index</span>):</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(index, <span class="built_in">slice</span>):</span><br><span class="line">            start, stop, step = index.indices(<span class="variable language_">self</span>._<span class="built_in">len</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> step == <span class="number">1</span> <span class="keyword">and</span> start &lt; stop:</span><br><span class="line">                <span class="keyword">if</span> start == <span class="number">0</span> <span class="keyword">and</span> stop == <span class="variable language_">self</span>._<span class="built_in">len</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="variable language_">self</span>._clear()</span><br><span class="line">                <span class="keyword">elif</span> <span class="variable language_">self</span>._<span class="built_in">len</span> &lt;= <span class="number">8</span> * (stop - start):</span><br><span class="line">                    values = <span class="variable language_">self</span>._getitem(<span class="built_in">slice</span>(<span class="literal">None</span>, start))</span><br><span class="line">                    <span class="keyword">if</span> stop &lt; <span class="variable language_">self</span>._<span class="built_in">len</span>:</span><br><span class="line">                        values += <span class="variable language_">self</span>._getitem(<span class="built_in">slice</span>(stop, <span class="literal">None</span>))</span><br><span class="line">                    <span class="variable language_">self</span>._clear()</span><br><span class="line">                    <span class="keyword">return</span> <span class="variable language_">self</span>._update(values)</span><br><span class="line"></span><br><span class="line">            indices = <span class="built_in">range</span>(start, stop, step)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> step &gt; <span class="number">0</span>:</span><br><span class="line">                indices = <span class="built_in">reversed</span>(indices)</span><br><span class="line"></span><br><span class="line">            _pos, _delete = <span class="variable language_">self</span>._pos, <span class="variable language_">self</span>._delete</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> index <span class="keyword">in</span> indices:</span><br><span class="line">                pos, idx = _pos(index)</span><br><span class="line">                _delete(pos, idx)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            pos, idx = <span class="variable language_">self</span>._pos(index)</span><br><span class="line">            <span class="variable language_">self</span>._delete(pos, idx)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, index</span>):</span><br><span class="line">        _lists = <span class="variable language_">self</span>._lists</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(index, <span class="built_in">slice</span>):</span><br><span class="line">            start, stop, step = index.indices(<span class="variable language_">self</span>._<span class="built_in">len</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> step == <span class="number">1</span> <span class="keyword">and</span> start &lt; stop:</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> start == <span class="number">0</span> <span class="keyword">and</span> stop == <span class="variable language_">self</span>._<span class="built_in">len</span>:</span><br><span class="line">                    <span class="keyword">return</span> reduce(iadd, <span class="variable language_">self</span>._lists, [])</span><br><span class="line"></span><br><span class="line">                start_pos, start_idx = <span class="variable language_">self</span>._pos(start)</span><br><span class="line">                start_list = _lists[start_pos]</span><br><span class="line">                stop_idx = start_idx + stop - start</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">len</span>(start_list) &gt;= stop_idx:</span><br><span class="line">                    <span class="keyword">return</span> start_list[start_idx:stop_idx]</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> stop == <span class="variable language_">self</span>._<span class="built_in">len</span>:</span><br><span class="line">                    stop_pos = <span class="built_in">len</span>(_lists) - <span class="number">1</span></span><br><span class="line">                    stop_idx = <span class="built_in">len</span>(_lists[stop_pos])</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    stop_pos, stop_idx = <span class="variable language_">self</span>._pos(stop)</span><br><span class="line"></span><br><span class="line">                prefix = _lists[start_pos][start_idx:]</span><br><span class="line">                middle = _lists[(start_pos + <span class="number">1</span>):stop_pos]</span><br><span class="line">                result = reduce(iadd, middle, prefix)</span><br><span class="line">                result += _lists[stop_pos][:stop_idx]</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> step == -<span class="number">1</span> <span class="keyword">and</span> start &gt; stop:</span><br><span class="line">                result = <span class="variable language_">self</span>._getitem(<span class="built_in">slice</span>(stop + <span class="number">1</span>, start + <span class="number">1</span>))</span><br><span class="line">                result.reverse()</span><br><span class="line">                <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">            indices = <span class="built_in">range</span>(start, stop, step)</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">list</span>(<span class="variable language_">self</span>._getitem(index) <span class="keyword">for</span> index <span class="keyword">in</span> indices)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="variable language_">self</span>._<span class="built_in">len</span>:</span><br><span class="line">                <span class="keyword">if</span> index == <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">return</span> _lists[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">                <span class="keyword">elif</span> index == -<span class="number">1</span>:</span><br><span class="line">                    <span class="keyword">return</span> _lists[-<span class="number">1</span>][-<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">raise</span> IndexError(<span class="string">&#x27;list index out of range&#x27;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="number">0</span> &lt;= index &lt; <span class="built_in">len</span>(_lists[<span class="number">0</span>]):</span><br><span class="line">                <span class="keyword">return</span> _lists[<span class="number">0</span>][index]</span><br><span class="line"></span><br><span class="line">            len_last = <span class="built_in">len</span>(_lists[-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> -len_last &lt; index &lt; <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> _lists[-<span class="number">1</span>][len_last + index]</span><br><span class="line"></span><br><span class="line">            pos, idx = <span class="variable language_">self</span>._pos(index)</span><br><span class="line">            <span class="keyword">return</span> _lists[pos][idx]</span><br><span class="line"></span><br><span class="line">    _getitem = __getitem__</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__setitem__</span>(<span class="params">self, index, value</span>):</span><br><span class="line"></span><br><span class="line">        message = <span class="string">&#x27;use ``del sl[index]`` and ``sl.add(value)`` instead&#x27;</span></span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError(message)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__iter__</span>(<span class="params">self</span>):</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> chain.from_iterable(<span class="variable language_">self</span>._lists)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reversed__</span>(<span class="params">self</span>):</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> chain.from_iterable(<span class="built_in">map</span>(<span class="built_in">reversed</span>, <span class="built_in">reversed</span>(<span class="variable language_">self</span>._lists)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">reverse</span>(<span class="params">self</span>):</span><br><span class="line"></span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError(<span class="string">&#x27;use ``reversed(sl)`` instead&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">islice</span>(<span class="params">self, start=<span class="literal">None</span>, stop=<span class="literal">None</span>, reverse=<span class="literal">False</span></span>):</span><br><span class="line"></span><br><span class="line">        _<span class="built_in">len</span> = <span class="variable language_">self</span>._<span class="built_in">len</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> _<span class="built_in">len</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">iter</span>(())</span><br><span class="line"></span><br><span class="line">        start, stop, _ = <span class="built_in">slice</span>(start, stop).indices(<span class="variable language_">self</span>._<span class="built_in">len</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> start &gt;= stop:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">iter</span>(())</span><br><span class="line"></span><br><span class="line">        _pos = <span class="variable language_">self</span>._pos</span><br><span class="line"></span><br><span class="line">        min_pos, min_idx = _pos(start)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> stop == _<span class="built_in">len</span>:</span><br><span class="line">            max_pos = <span class="built_in">len</span>(<span class="variable language_">self</span>._lists) - <span class="number">1</span></span><br><span class="line">            max_idx = <span class="built_in">len</span>(<span class="variable language_">self</span>._lists[-<span class="number">1</span>])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            max_pos, max_idx = _pos(stop)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._islice(min_pos, min_idx, max_pos, max_idx, reverse)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_islice</span>(<span class="params">self, min_pos, min_idx, max_pos, max_idx, reverse</span>):</span><br><span class="line"></span><br><span class="line">        _lists = <span class="variable language_">self</span>._lists</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> min_pos &gt; max_pos:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">iter</span>(())</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> min_pos == max_pos:</span><br><span class="line">            <span class="keyword">if</span> reverse:</span><br><span class="line">                indices = <span class="built_in">reversed</span>(<span class="built_in">range</span>(min_idx, max_idx))</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">map</span>(_lists[min_pos].__getitem__, indices)</span><br><span class="line"></span><br><span class="line">            indices = <span class="built_in">range</span>(min_idx, max_idx)</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">map</span>(_lists[min_pos].__getitem__, indices)</span><br><span class="line"></span><br><span class="line">        next_pos = min_pos + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> next_pos == max_pos:</span><br><span class="line">            <span class="keyword">if</span> reverse:</span><br><span class="line">                min_indices = <span class="built_in">range</span>(min_idx, <span class="built_in">len</span>(_lists[min_pos]))</span><br><span class="line">                max_indices = <span class="built_in">range</span>(max_idx)</span><br><span class="line">                <span class="keyword">return</span> chain(</span><br><span class="line">                    <span class="built_in">map</span>(_lists[max_pos].__getitem__, <span class="built_in">reversed</span>(max_indices)),</span><br><span class="line">                    <span class="built_in">map</span>(_lists[min_pos].__getitem__, <span class="built_in">reversed</span>(min_indices)),</span><br><span class="line">                )</span><br><span class="line"></span><br><span class="line">            min_indices = <span class="built_in">range</span>(min_idx, <span class="built_in">len</span>(_lists[min_pos]))</span><br><span class="line">            max_indices = <span class="built_in">range</span>(max_idx)</span><br><span class="line">            <span class="keyword">return</span> chain(</span><br><span class="line">                <span class="built_in">map</span>(_lists[min_pos].__getitem__, min_indices),</span><br><span class="line">                <span class="built_in">map</span>(_lists[max_pos].__getitem__, max_indices),</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> reverse:</span><br><span class="line">            min_indices = <span class="built_in">range</span>(min_idx, <span class="built_in">len</span>(_lists[min_pos]))</span><br><span class="line">            sublist_indices = <span class="built_in">range</span>(next_pos, max_pos)</span><br><span class="line">            sublists = <span class="built_in">map</span>(_lists.__getitem__, <span class="built_in">reversed</span>(sublist_indices))</span><br><span class="line">            max_indices = <span class="built_in">range</span>(max_idx)</span><br><span class="line">            <span class="keyword">return</span> chain(</span><br><span class="line">                <span class="built_in">map</span>(_lists[max_pos].__getitem__, <span class="built_in">reversed</span>(max_indices)),</span><br><span class="line">                chain.from_iterable(<span class="built_in">map</span>(<span class="built_in">reversed</span>, sublists)),</span><br><span class="line">                <span class="built_in">map</span>(_lists[min_pos].__getitem__, <span class="built_in">reversed</span>(min_indices)),</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">        min_indices = <span class="built_in">range</span>(min_idx, <span class="built_in">len</span>(_lists[min_pos]))</span><br><span class="line">        sublist_indices = <span class="built_in">range</span>(next_pos, max_pos)</span><br><span class="line">        sublists = <span class="built_in">map</span>(_lists.__getitem__, sublist_indices)</span><br><span class="line">        max_indices = <span class="built_in">range</span>(max_idx)</span><br><span class="line">        <span class="keyword">return</span> chain(</span><br><span class="line">            <span class="built_in">map</span>(_lists[min_pos].__getitem__, min_indices),</span><br><span class="line">            chain.from_iterable(sublists),</span><br><span class="line">            <span class="built_in">map</span>(_lists[max_pos].__getitem__, max_indices),</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">irange</span>(<span class="params">self, minimum=<span class="literal">None</span>, maximum=<span class="literal">None</span>, inclusive=(<span class="params"><span class="literal">True</span>, <span class="literal">True</span></span>),</span></span><br><span class="line"><span class="params">               reverse=<span class="literal">False</span></span>):</span><br><span class="line"></span><br><span class="line">        _maxes = <span class="variable language_">self</span>._maxes</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> _maxes:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">iter</span>(())</span><br><span class="line"></span><br><span class="line">        _lists = <span class="variable language_">self</span>._lists</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> minimum <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            min_pos = <span class="number">0</span></span><br><span class="line">            min_idx = <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> inclusive[<span class="number">0</span>]:</span><br><span class="line">                min_pos = bisect_left(_maxes, minimum)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> min_pos == <span class="built_in">len</span>(_maxes):</span><br><span class="line">                    <span class="keyword">return</span> <span class="built_in">iter</span>(())</span><br><span class="line"></span><br><span class="line">                min_idx = bisect_left(_lists[min_pos], minimum)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                min_pos = bisect_right(_maxes, minimum)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> min_pos == <span class="built_in">len</span>(_maxes):</span><br><span class="line">                    <span class="keyword">return</span> <span class="built_in">iter</span>(())</span><br><span class="line"></span><br><span class="line">                min_idx = bisect_right(_lists[min_pos], minimum)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> maximum <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            max_pos = <span class="built_in">len</span>(_maxes) - <span class="number">1</span></span><br><span class="line">            max_idx = <span class="built_in">len</span>(_lists[max_pos])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> inclusive[<span class="number">1</span>]:</span><br><span class="line">                max_pos = bisect_right(_maxes, maximum)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> max_pos == <span class="built_in">len</span>(_maxes):</span><br><span class="line">                    max_pos -= <span class="number">1</span></span><br><span class="line">                    max_idx = <span class="built_in">len</span>(_lists[max_pos])</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    max_idx = bisect_right(_lists[max_pos], maximum)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                max_pos = bisect_left(_maxes, maximum)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> max_pos == <span class="built_in">len</span>(_maxes):</span><br><span class="line">                    max_pos -= <span class="number">1</span></span><br><span class="line">                    max_idx = <span class="built_in">len</span>(_lists[max_pos])</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    max_idx = bisect_left(_lists[max_pos], maximum)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._islice(min_pos, min_idx, max_pos, max_idx, reverse)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._<span class="built_in">len</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">bisect_left</span>(<span class="params">self, value</span>):</span><br><span class="line"></span><br><span class="line">        _maxes = <span class="variable language_">self</span>._maxes</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> _maxes:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        pos = bisect_left(_maxes, value)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> pos == <span class="built_in">len</span>(_maxes):</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">self</span>._<span class="built_in">len</span></span><br><span class="line"></span><br><span class="line">        idx = bisect_left(<span class="variable language_">self</span>._lists[pos], value)</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._loc(pos, idx)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">bisect_right</span>(<span class="params">self, value</span>):</span><br><span class="line"></span><br><span class="line">        _maxes = <span class="variable language_">self</span>._maxes</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> _maxes:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        pos = bisect_right(_maxes, value)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> pos == <span class="built_in">len</span>(_maxes):</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">self</span>._<span class="built_in">len</span></span><br><span class="line"></span><br><span class="line">        idx = bisect_right(<span class="variable language_">self</span>._lists[pos], value)</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._loc(pos, idx)</span><br><span class="line"></span><br><span class="line">    bisect = bisect_right</span><br><span class="line">    _bisect_right = bisect_right</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">count</span>(<span class="params">self, value</span>):</span><br><span class="line"></span><br><span class="line">        _maxes = <span class="variable language_">self</span>._maxes</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> _maxes:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        pos_left = bisect_left(_maxes, value)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> pos_left == <span class="built_in">len</span>(_maxes):</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        _lists = <span class="variable language_">self</span>._lists</span><br><span class="line">        idx_left = bisect_left(_lists[pos_left], value)</span><br><span class="line">        pos_right = bisect_right(_maxes, value)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> pos_right == <span class="built_in">len</span>(_maxes):</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">self</span>._<span class="built_in">len</span> - <span class="variable language_">self</span>._loc(pos_left, idx_left)</span><br><span class="line"></span><br><span class="line">        idx_right = bisect_right(_lists[pos_right], value)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> pos_left == pos_right:</span><br><span class="line">            <span class="keyword">return</span> idx_right - idx_left</span><br><span class="line"></span><br><span class="line">        right = <span class="variable language_">self</span>._loc(pos_right, idx_right)</span><br><span class="line">        left = <span class="variable language_">self</span>._loc(pos_left, idx_left)</span><br><span class="line">        <span class="keyword">return</span> right - left</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">copy</span>(<span class="params">self</span>):</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.__class__(<span class="variable language_">self</span>)</span><br><span class="line"></span><br><span class="line">    __copy__ = copy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">append</span>(<span class="params">self, value</span>):</span><br><span class="line"></span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError(<span class="string">&#x27;use ``sl.add(value)`` instead&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">extend</span>(<span class="params">self, values</span>):</span><br><span class="line"></span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError(<span class="string">&#x27;use ``sl.update(values)`` instead&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">insert</span>(<span class="params">self, index, value</span>):</span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError(<span class="string">&#x27;use ``sl.add(value)`` instead&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pop</span>(<span class="params">self, index=-<span class="number">1</span></span>):</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="variable language_">self</span>._<span class="built_in">len</span>:</span><br><span class="line">            <span class="keyword">raise</span> IndexError(<span class="string">&#x27;pop index out of range&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        _lists = <span class="variable language_">self</span>._lists</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> index == <span class="number">0</span>:</span><br><span class="line">            val = _lists[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">            <span class="variable language_">self</span>._delete(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> val</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> index == -<span class="number">1</span>:</span><br><span class="line">            pos = <span class="built_in">len</span>(_lists) - <span class="number">1</span></span><br><span class="line">            loc = <span class="built_in">len</span>(_lists[pos]) - <span class="number">1</span></span><br><span class="line">            val = _lists[pos][loc]</span><br><span class="line">            <span class="variable language_">self</span>._delete(pos, loc)</span><br><span class="line">            <span class="keyword">return</span> val</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="number">0</span> &lt;= index &lt; <span class="built_in">len</span>(_lists[<span class="number">0</span>]):</span><br><span class="line">            val = _lists[<span class="number">0</span>][index]</span><br><span class="line">            <span class="variable language_">self</span>._delete(<span class="number">0</span>, index)</span><br><span class="line">            <span class="keyword">return</span> val</span><br><span class="line"></span><br><span class="line">        len_last = <span class="built_in">len</span>(_lists[-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> -len_last &lt; index &lt; <span class="number">0</span>:</span><br><span class="line">            pos = <span class="built_in">len</span>(_lists) - <span class="number">1</span></span><br><span class="line">            loc = len_last + index</span><br><span class="line">            val = _lists[pos][loc]</span><br><span class="line">            <span class="variable language_">self</span>._delete(pos, loc)</span><br><span class="line">            <span class="keyword">return</span> val</span><br><span class="line"></span><br><span class="line">        pos, idx = <span class="variable language_">self</span>._pos(index)</span><br><span class="line">        val = _lists[pos][idx]</span><br><span class="line">        <span class="variable language_">self</span>._delete(pos, idx)</span><br><span class="line">        <span class="keyword">return</span> val</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">self, value, start=<span class="literal">None</span>, stop=<span class="literal">None</span></span>):</span><br><span class="line"></span><br><span class="line">        _<span class="built_in">len</span> = <span class="variable language_">self</span>._<span class="built_in">len</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> _<span class="built_in">len</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&#x27;&#123;0!r&#125; is not in list&#x27;</span>.<span class="built_in">format</span>(value))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> start <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            start = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> start &lt; <span class="number">0</span>:</span><br><span class="line">            start += _<span class="built_in">len</span></span><br><span class="line">        <span class="keyword">if</span> start &lt; <span class="number">0</span>:</span><br><span class="line">            start = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> stop <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            stop = _<span class="built_in">len</span></span><br><span class="line">        <span class="keyword">if</span> stop &lt; <span class="number">0</span>:</span><br><span class="line">            stop += _<span class="built_in">len</span></span><br><span class="line">        <span class="keyword">if</span> stop &gt; _<span class="built_in">len</span>:</span><br><span class="line">            stop = _<span class="built_in">len</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> stop &lt;= start:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&#x27;&#123;0!r&#125; is not in list&#x27;</span>.<span class="built_in">format</span>(value))</span><br><span class="line"></span><br><span class="line">        _maxes = <span class="variable language_">self</span>._maxes</span><br><span class="line">        pos_left = bisect_left(_maxes, value)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> pos_left == <span class="built_in">len</span>(_maxes):</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&#x27;&#123;0!r&#125; is not in list&#x27;</span>.<span class="built_in">format</span>(value))</span><br><span class="line"></span><br><span class="line">        _lists = <span class="variable language_">self</span>._lists</span><br><span class="line">        idx_left = bisect_left(_lists[pos_left], value)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> _lists[pos_left][idx_left] != value:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&#x27;&#123;0!r&#125; is not in list&#x27;</span>.<span class="built_in">format</span>(value))</span><br><span class="line"></span><br><span class="line">        stop -= <span class="number">1</span></span><br><span class="line">        left = <span class="variable language_">self</span>._loc(pos_left, idx_left)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> start &lt;= left:</span><br><span class="line">            <span class="keyword">if</span> left &lt;= stop:</span><br><span class="line">                <span class="keyword">return</span> left</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            right = <span class="variable language_">self</span>._bisect_right(value) - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> start &lt;= right:</span><br><span class="line">                <span class="keyword">return</span> start</span><br><span class="line"></span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&#x27;&#123;0!r&#125; is not in list&#x27;</span>.<span class="built_in">format</span>(value))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__add__</span>(<span class="params">self, other</span>):</span><br><span class="line"></span><br><span class="line">        values = reduce(iadd, <span class="variable language_">self</span>._lists, [])</span><br><span class="line">        values.extend(other)</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.__class__(values)</span><br><span class="line"></span><br><span class="line">    __radd__ = __add__</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__iadd__</span>(<span class="params">self, other</span>):</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>._update(other)</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__mul__</span>(<span class="params">self, num</span>):</span><br><span class="line"></span><br><span class="line">        values = reduce(iadd, <span class="variable language_">self</span>._lists, []) * num</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.__class__(values)</span><br><span class="line"></span><br><span class="line">    __rmul__ = __mul__</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__imul__</span>(<span class="params">self, num</span>):</span><br><span class="line"></span><br><span class="line">        values = reduce(iadd, <span class="variable language_">self</span>._lists, []) * num</span><br><span class="line">        <span class="variable language_">self</span>._clear()</span><br><span class="line">        <span class="variable language_">self</span>._update(values)</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__make_cmp</span>(<span class="params">seq_op, symbol, doc</span>):</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">comparer</span>(<span class="params">self, other</span>):</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(other, <span class="type">Sequence</span>):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">NotImplemented</span></span><br><span class="line"></span><br><span class="line">            self_len = <span class="variable language_">self</span>._<span class="built_in">len</span></span><br><span class="line">            len_other = <span class="built_in">len</span>(other)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> self_len != len_other:</span><br><span class="line">                <span class="keyword">if</span> seq_op <span class="keyword">is</span> eq:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">                <span class="keyword">if</span> seq_op <span class="keyword">is</span> ne:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> alpha, beta <span class="keyword">in</span> <span class="built_in">zip</span>(<span class="variable language_">self</span>, other):</span><br><span class="line">                <span class="keyword">if</span> alpha != beta:</span><br><span class="line">                    <span class="keyword">return</span> seq_op(alpha, beta)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> seq_op(self_len, len_other)</span><br><span class="line"></span><br><span class="line">        seq_op_name = seq_op.__name__</span><br><span class="line">        comparer.__name__ = <span class="string">&#x27;__&#123;0&#125;__&#x27;</span>.<span class="built_in">format</span>(seq_op_name)</span><br><span class="line">        doc_str = <span class="string">&quot;&quot;&quot;Return true if and only if sorted list is &#123;0&#125; `other`.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        ``sl.__&#123;1&#125;__(other)`` &lt;==&gt; ``sl &#123;2&#125; other``</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Comparisons use lexicographical order as with sequences.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Runtime complexity: `O(n)`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :param other: `other` sequence</span></span><br><span class="line"><span class="string">        :return: true if sorted list is &#123;0&#125; `other`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        comparer.__doc__ = dedent(doc_str.<span class="built_in">format</span>(doc, seq_op_name, symbol))</span><br><span class="line">        <span class="keyword">return</span> comparer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    __eq__ = __make_cmp(eq, <span class="string">&#x27;==&#x27;</span>, <span class="string">&#x27;equal to&#x27;</span>)</span><br><span class="line">    __ne__ = __make_cmp(ne, <span class="string">&#x27;!=&#x27;</span>, <span class="string">&#x27;not equal to&#x27;</span>)</span><br><span class="line">    __lt__ = __make_cmp(lt, <span class="string">&#x27;&lt;&#x27;</span>, <span class="string">&#x27;less than&#x27;</span>)</span><br><span class="line">    __gt__ = __make_cmp(gt, <span class="string">&#x27;&gt;&#x27;</span>, <span class="string">&#x27;greater than&#x27;</span>)</span><br><span class="line">    __le__ = __make_cmp(le, <span class="string">&#x27;&lt;=&#x27;</span>, <span class="string">&#x27;less than or equal to&#x27;</span>)</span><br><span class="line">    __ge__ = __make_cmp(ge, <span class="string">&#x27;&gt;=&#x27;</span>, <span class="string">&#x27;greater than or equal to&#x27;</span>)</span><br><span class="line">    __make_cmp = <span class="built_in">staticmethod</span>(__make_cmp)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">        values = reduce(iadd, <span class="variable language_">self</span>._lists, [])</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">type</span>(<span class="variable language_">self</span>), (values,))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">    @recursive_repr()</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>):</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#123;0&#125;(&#123;1!r&#125;)&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">type</span>(<span class="variable language_">self</span>).__name__, <span class="built_in">list</span>(<span class="variable language_">self</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_check</span>(<span class="params">self</span>):</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">assert</span> <span class="variable language_">self</span>._load &gt;= <span class="number">4</span></span><br><span class="line">            <span class="keyword">assert</span> <span class="built_in">len</span>(<span class="variable language_">self</span>._maxes) == <span class="built_in">len</span>(<span class="variable language_">self</span>._lists)</span><br><span class="line">            <span class="keyword">assert</span> <span class="variable language_">self</span>._<span class="built_in">len</span> == <span class="built_in">sum</span>(<span class="built_in">len</span>(sublist) <span class="keyword">for</span> sublist <span class="keyword">in</span> <span class="variable language_">self</span>._lists)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> sublist <span class="keyword">in</span> <span class="variable language_">self</span>._lists:</span><br><span class="line">                <span class="keyword">for</span> pos <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(sublist)):</span><br><span class="line">                    <span class="keyword">assert</span> sublist[pos - <span class="number">1</span>] &lt;= sublist[pos]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> pos <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(<span class="variable language_">self</span>._lists)):</span><br><span class="line">                <span class="keyword">assert</span> <span class="variable language_">self</span>._lists[pos - <span class="number">1</span>][-<span class="number">1</span>] &lt;= <span class="variable language_">self</span>._lists[pos][<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> pos <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(<span class="variable language_">self</span>._maxes)):</span><br><span class="line">                <span class="keyword">assert</span> <span class="variable language_">self</span>._maxes[pos] == <span class="variable language_">self</span>._lists[pos][-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">            double = <span class="variable language_">self</span>._load &lt;&lt; <span class="number">1</span></span><br><span class="line">            <span class="keyword">assert</span> <span class="built_in">all</span>(<span class="built_in">len</span>(sublist) &lt;= double <span class="keyword">for</span> sublist <span class="keyword">in</span> <span class="variable language_">self</span>._lists)</span><br><span class="line"></span><br><span class="line">            half = <span class="variable language_">self</span>._load &gt;&gt; <span class="number">1</span></span><br><span class="line">            <span class="keyword">for</span> pos <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(<span class="variable language_">self</span>._lists) - <span class="number">1</span>):</span><br><span class="line">                <span class="keyword">assert</span> <span class="built_in">len</span>(<span class="variable language_">self</span>._lists[pos]) &gt;= half</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="variable language_">self</span>._index:</span><br><span class="line">                <span class="keyword">assert</span> <span class="variable language_">self</span>._<span class="built_in">len</span> == <span class="variable language_">self</span>._index[<span class="number">0</span>]</span><br><span class="line">                <span class="keyword">assert</span> <span class="built_in">len</span>(<span class="variable language_">self</span>._index) == <span class="variable language_">self</span>._offset + <span class="built_in">len</span>(<span class="variable language_">self</span>._lists)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> pos <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(<span class="variable language_">self</span>._lists)):</span><br><span class="line">                    leaf = <span class="variable language_">self</span>._index[<span class="variable language_">self</span>._offset + pos]</span><br><span class="line">                    <span class="keyword">assert</span> leaf == <span class="built_in">len</span>(<span class="variable language_">self</span>._lists[pos])</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> pos <span class="keyword">in</span> <span class="built_in">range</span>(<span class="variable language_">self</span>._offset):</span><br><span class="line">                    child = (pos &lt;&lt; <span class="number">1</span>) + <span class="number">1</span></span><br><span class="line">                    <span class="keyword">if</span> child &gt;= <span class="built_in">len</span>(<span class="variable language_">self</span>._index):</span><br><span class="line">                        <span class="keyword">assert</span> <span class="variable language_">self</span>._index[pos] == <span class="number">0</span></span><br><span class="line">                    <span class="keyword">elif</span> child + <span class="number">1</span> == <span class="built_in">len</span>(<span class="variable language_">self</span>._index):</span><br><span class="line">                        <span class="keyword">assert</span> <span class="variable language_">self</span>._index[pos] == <span class="variable language_">self</span>._index[child]</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        child_sum = <span class="variable language_">self</span>._index[child] + <span class="variable language_">self</span>._index[child + <span class="number">1</span>]</span><br><span class="line">                        <span class="keyword">assert</span> child_sum == <span class="variable language_">self</span>._index[pos]</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            traceback.print_exc(file=sys.stdout)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;len&#x27;</span>, <span class="variable language_">self</span>._<span class="built_in">len</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;load&#x27;</span>, <span class="variable language_">self</span>._load)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;offset&#x27;</span>, <span class="variable language_">self</span>._offset)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;len_index&#x27;</span>, <span class="built_in">len</span>(<span class="variable language_">self</span>._index))</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;index&#x27;</span>, <span class="variable language_">self</span>._index)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;len_maxes&#x27;</span>, <span class="built_in">len</span>(<span class="variable language_">self</span>._maxes))</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;maxes&#x27;</span>, <span class="variable language_">self</span>._maxes)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;len_lists&#x27;</span>, <span class="built_in">len</span>(<span class="variable language_">self</span>._lists))</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;lists&#x27;</span>, <span class="variable language_">self</span>._lists)</span><br><span class="line">            <span class="keyword">raise</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">identity</span>(<span class="params">value</span>):</span><br><span class="line">    <span class="keyword">return</span> value</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ 语法基础</title>
      <link href="/2025/04/18/04%20C++%20%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/"/>
      <url>/2025/04/18/04%20C++%20%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="C-基础语法"><a href="#C-基础语法" class="headerlink" title="C++ 基础语法"></a>C++ 基础语法</h1><h3 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;deque&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> <span class="type">int</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; pll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pii;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>), cout.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="type">bool</span> is_more = <span class="literal">true</span>;</span><br><span class="line">    <span class="type">int</span> t = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (is_more) cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> x, y;</span><br><span class="line">cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line"></span><br><span class="line">string s;</span><br><span class="line"><span class="built_in">getline</span>(cin, s);</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cout &lt;&lt; 值 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;设置宽度为 5: &quot;</span> &lt;&lt; <span class="built_in">setw</span>(<span class="number">5</span>) &lt;&lt; <span class="number">10</span> &lt;&lt; endl; <span class="comment">// 设置字段宽度</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;设置宽度为 5，填充 0: &quot;</span> &lt;&lt; <span class="built_in">setw</span>(<span class="number">5</span>) &lt;&lt; <span class="built_in">setfill</span>(<span class="string">&#x27;0&#x27;</span>) &lt;&lt; <span class="number">10</span> &lt;&lt; endl; <span class="comment">// 设置字段宽度并填充字符</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;保留 4 位小数: &quot;</span> &lt;&lt; fixed &lt;&lt; <span class="built_in">setprecision</span>(<span class="number">4</span>) &lt;&lt; <span class="number">3.1415926</span> &lt;&lt; endl; <span class="comment">// 控制浮点数精度</span></span><br></pre></td></tr></table></figure><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">string s;</span><br><span class="line"><span class="function">string <span class="title">s</span><span class="params">(大小, 初始字符)</span></span>;</span><br><span class="line"><span class="function">string <span class="title">s</span><span class="params">(字符串)</span></span>;</span><br><span class="line"><span class="function">string <span class="title">s</span><span class="params">(字符串, 开始位置, 长度)</span></span>;</span><br><span class="line"><span class="function">string <span class="title">s</span><span class="params">(初始化列表)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">s.<span class="built_in">empty</span>();</span><br><span class="line">s.<span class="built_in">size</span>();</span><br><span class="line">s.<span class="built_in">length</span>();</span><br><span class="line">s.<span class="built_in">resize</span>(大小);</span><br><span class="line">s.<span class="built_in">clear</span>();</span><br><span class="line"></span><br><span class="line">s.<span class="built_in">append</span>(字符串);</span><br><span class="line">s.<span class="built_in">insert</span>(位置, 字符串);</span><br><span class="line">s.<span class="built_in">erase</span>(位置, 长度);</span><br><span class="line">s.<span class="built_in">replace</span>(位置, 长度, 新字符串);</span><br><span class="line">s.<span class="built_in">substr</span>(开始位置, 长度);</span><br><span class="line"></span><br><span class="line">s.<span class="built_in">find</span>(子字符串);</span><br><span class="line">s.<span class="built_in">rfind</span>(子字符串);</span><br><span class="line">s.<span class="built_in">compare</span>(字符串);</span><br></pre></td></tr></table></figure><h3 id="Struct"><a href="#Struct" class="headerlink" title="Struct"></a>Struct</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    string name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">double</span> height;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Person person1 = &#123;<span class="string">&quot;Alice&quot;</span>, <span class="number">30</span>, <span class="number">1.70</span>&#125;;</span><br><span class="line"></span><br><span class="line">person<span class="number">1.</span>name;</span><br><span class="line">person<span class="number">1.</span>age;</span><br><span class="line">person<span class="number">1.</span>height;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Person *personPtr = &amp;&#123;<span class="string">&quot;Alice&quot;</span>, <span class="number">30</span>, <span class="number">1.70</span>&#125;;</span><br><span class="line"></span><br><span class="line">personPtr-&gt;name;</span><br><span class="line">personPtr-&gt;age;</span><br><span class="line">personPtr-&gt;height;</span><br></pre></td></tr></table></figure><h3 id="特有语法"><a href="#特有语法" class="headerlink" title="特有语法"></a>特有语法</h3><h4 id="for-in-循环"><a href="#for-in-循环" class="headerlink" title="for in 循环"></a>for in 循环</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> x: nums) &#123;</span><br><span class="line">cout &lt;&lt; x &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; v = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> p = v.<span class="built_in">begin</span>(); p != v.<span class="built_in">end</span>(); ++p) &#123;</span><br><span class="line">    cout &lt;&lt; *p &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">(<span class="type">int</span> &amp;x)</span> </span>&#123;</span><br><span class="line">    x++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> num = <span class="number">10</span>;</span><br><span class="line">cout &lt;&lt; num &lt;&lt; endl; <span class="comment">// 10</span></span><br><span class="line"><span class="built_in">fun</span>(num);</span><br><span class="line">cout &lt;&lt; num &lt;&lt; endl; <span class="comment">// 11</span></span><br></pre></td></tr></table></figure><h4 id="键值对"><a href="#键值对" class="headerlink" title="键值对"></a>键值对</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pair&lt;<span class="type">int</span>, string&gt; p = &#123;<span class="number">1</span>, <span class="string">&quot;apple&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">p.first;</span><br><span class="line">p.second;</span><br></pre></td></tr></table></figure><h4 id="Lambda"><a href="#Lambda" class="headerlink" title="Lambda"></a>Lambda</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[](<span class="type">int</span> a, <span class="type">int</span> b) &#123;</span><br><span class="line">    <span class="keyword">return</span> a &gt; b;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>等价于</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">GreaterThan</span> &#123;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a &gt; b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sort</span>(起始地址, 结束地址);</span><br><span class="line"><span class="built_in">sort</span>(起始地址, 结束地址, 比较器);</span><br></pre></td></tr></table></figure><h4 id="字符串与数字的相互转换"><a href="#字符串与数字的相互转换" class="headerlink" title="字符串与数字的相互转换"></a>字符串与数字的相互转换</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> num = <span class="built_in">stoi</span>(s);</span><br><span class="line"><span class="type">long</span> num = <span class="built_in">stol</span>(s);</span><br><span class="line"><span class="type">float</span> num = <span class="built_in">stof</span>(s);</span><br><span class="line"><span class="type">double</span> num = <span class="built_in">stod</span>(s);</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string s = <span class="built_in">to_string</span>(num);</span><br></pre></td></tr></table></figure><h3 id="STL"><a href="#STL" class="headerlink" title="STL"></a>STL</h3><h4 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;T&gt; v;</span><br><span class="line"><span class="function">vector&lt;T&gt; <span class="title">v</span><span class="params">(大小)</span></span>;</span><br><span class="line"><span class="function">vector&lt;T&gt; <span class="title">v</span><span class="params">(大小, 初始值)</span></span>;</span><br><span class="line">vector&lt;T&gt; v&#123;值, 值...&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">v.<span class="built_in">empty</span>();</span><br><span class="line">v.<span class="built_in">size</span>();</span><br><span class="line">v.<span class="built_in">resize</span>(大小);</span><br><span class="line">v.<span class="built_in">clear</span>();</span><br><span class="line">v<span class="number">1.</span><span class="built_in">swap</span>(v2);</span><br><span class="line"></span><br><span class="line">v.<span class="built_in">push_back</span>(值);</span><br><span class="line">v.<span class="built_in">pop_back</span>();</span><br><span class="line">v.<span class="built_in">insert</span>(地址, 值);</span><br><span class="line">v.<span class="built_in">erase</span>(地址);</span><br></pre></td></tr></table></figure><h4 id="Set-Unordered-set"><a href="#Set-Unordered-set" class="headerlink" title="Set &#x2F; Unordered_set"></a>Set &#x2F; Unordered_set</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_set&gt;</span></span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">set&lt;T&gt; s;</span><br><span class="line"><span class="function">set&lt;T&gt; <span class="title">s</span><span class="params">(大小)</span></span>;</span><br><span class="line">set&lt;T&gt; s&#123;值, 值...&#125;;</span><br><span class="line"><span class="function">set&lt;T&gt; <span class="title">s</span><span class="params">(值, 值...)</span></span>;</span><br><span class="line"></span><br><span class="line">unordered_set&lt;T&gt; s;</span><br><span class="line"><span class="function">unordered_set&lt;T&gt; <span class="title">s</span><span class="params">(大小)</span></span>;</span><br><span class="line">unordered_set&lt;T&gt; s&#123;值, 值...&#125;;</span><br><span class="line"><span class="function">unordered_set&lt;T&gt; <span class="title">s</span><span class="params">(值, 值...)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">s.<span class="built_in">empty</span>();</span><br><span class="line">s.<span class="built_in">size</span>();</span><br><span class="line">s.<span class="built_in">clear</span>();</span><br><span class="line">s<span class="number">1.</span><span class="built_in">swap</span>(s2);</span><br><span class="line"></span><br><span class="line">s.<span class="built_in">insert</span>(值);</span><br><span class="line">s.<span class="built_in">erase</span>(值/地址);</span><br><span class="line">s.<span class="built_in">find</span>(值);</span><br><span class="line">s.<span class="built_in">count</span>(值);</span><br><span class="line">s.<span class="built_in">lower_bound</span>(值);</span><br><span class="line">s.<span class="built_in">upper_bound</span>(值);</span><br></pre></td></tr></table></figure><h4 id="Map-Unordered-map"><a href="#Map-Unordered-map" class="headerlink" title="Map &#x2F; Unordered_map"></a>Map &#x2F; Unordered_map</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">map&lt;K, V&gt; m;</span><br><span class="line"><span class="function">map&lt;K, V&gt; <span class="title">m</span><span class="params">(大小)</span></span>;</span><br><span class="line">map&lt;K, V&gt; m&#123;</span><br><span class="line">    &#123;key, value&#125;, &#123;key, value&#125;...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">unordered_map&lt;K, V&gt; m;</span><br><span class="line"><span class="function">unordered_map&lt;K, V&gt; <span class="title">m</span><span class="params">(大小)</span></span>;</span><br><span class="line">unordered_map&lt;K, V&gt; m&#123;</span><br><span class="line">    &#123;key, value&#125;, &#123;key, value&#125;...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">m.<span class="built_in">empty</span>();</span><br><span class="line">m.<span class="built_in">size</span>();</span><br><span class="line">m.<span class="built_in">clear</span>();</span><br><span class="line">m<span class="number">1.</span><span class="built_in">swap</span>(m2);</span><br><span class="line"></span><br><span class="line">m.<span class="built_in">insert</span>(&#123;key, value&#125;);</span><br><span class="line">m.<span class="built_in">erase</span>(key/地址);</span><br><span class="line">m.<span class="built_in">erase</span>(地址);</span><br><span class="line">m.<span class="built_in">find</span>(key);</span><br><span class="line">m.<span class="built_in">count</span>(key);</span><br><span class="line">m.<span class="built_in">lower_bound</span>(key);</span><br><span class="line">m.<span class="built_in">upper_bound</span>(key);</span><br></pre></td></tr></table></figure><h4 id="Stack"><a href="#Stack" class="headerlink" title="Stack"></a>Stack</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">stack&lt;T&gt; s;</span><br><span class="line"><span class="function">stack&lt;T&gt; <span class="title">s</span><span class="params">(容器)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">s.<span class="built_in">empty</span>();</span><br><span class="line">s.<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">s.<span class="built_in">push</span>(值);</span><br><span class="line">s.<span class="built_in">pop</span>();</span><br><span class="line">s.<span class="built_in">top</span>();</span><br></pre></td></tr></table></figure><h4 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">queue&lt;T&gt; q;</span><br><span class="line"><span class="function">queue&lt;T&gt; <span class="title">q</span><span class="params">(容器)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">q.<span class="built_in">empty</span>();</span><br><span class="line">q.<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">q.<span class="built_in">push</span>(值);</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line">q.<span class="built_in">front</span>();</span><br><span class="line">q.<span class="built_in">back</span>();</span><br></pre></td></tr></table></figure><h4 id="Deque"><a href="#Deque" class="headerlink" title="Deque"></a>Deque</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;deque&gt;</span></span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deque&lt;T&gt; d;</span><br><span class="line"><span class="function">deque&lt;T&gt; <span class="title">d</span><span class="params">(大小)</span></span>;</span><br><span class="line"><span class="function">deque&lt;T&gt; <span class="title">d</span><span class="params">(大小, 初始值)</span></span>;</span><br><span class="line">deque&lt;T&gt; d&#123;值, 值...&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">d.<span class="built_in">empty</span>();</span><br><span class="line">d.<span class="built_in">size</span>();</span><br><span class="line">d.<span class="built_in">resize</span>(大小);</span><br><span class="line">d.<span class="built_in">clear</span>();</span><br><span class="line">d<span class="number">1.</span><span class="built_in">swap</span>(d2);</span><br><span class="line"></span><br><span class="line">d.<span class="built_in">push_back</span>(值);</span><br><span class="line">d.<span class="built_in">push_front</span>(值);</span><br><span class="line">d.<span class="built_in">pop_back</span>();</span><br><span class="line">d.<span class="built_in">pop_front</span>();</span><br><span class="line">d.<span class="built_in">insert</span>(地址, 值);</span><br><span class="line">d.<span class="built_in">erase</span>(地址);</span><br><span class="line">d.<span class="built_in">front</span>();</span><br><span class="line">d.<span class="built_in">back</span>();</span><br></pre></td></tr></table></figure><h4 id="Priority-Queue"><a href="#Priority-Queue" class="headerlink" title="Priority Queue"></a>Priority Queue</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">priority_queue&lt;T&gt; pq;</span><br><span class="line">priority_queue&lt;T, 容器, 比较器&gt; pq;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pq.<span class="built_in">empty</span>();</span><br><span class="line">pq.<span class="built_in">size</span>();</span><br><span class="line">pq.<span class="built_in">swap</span>(pq2);</span><br><span class="line"></span><br><span class="line">pq.<span class="built_in">push</span>(值);</span><br><span class="line">pq.<span class="built_in">pop</span>();</span><br><span class="line">pq.<span class="built_in">top</span>();</span><br></pre></td></tr></table></figure><h4 id="Bitset"><a href="#Bitset" class="headerlink" title="Bitset"></a>Bitset</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bitset&gt;</span></span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bitset&lt;大小&gt; b;</span><br><span class="line"><span class="function">bitset&lt;大小&gt; <span class="title">b</span><span class="params">(值)</span></span>;</span><br><span class="line"><span class="function">bitset&lt;大小&gt; <span class="title">b</span><span class="params">(string)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">b.<span class="built_in">size</span>();</span><br><span class="line">b.<span class="built_in">count</span>();</span><br><span class="line"></span><br><span class="line">b.<span class="built_in">any</span>();</span><br><span class="line">b.<span class="built_in">none</span>();</span><br><span class="line">b.<span class="built_in">all</span>();</span><br><span class="line">b.<span class="built_in">test</span>(索引);</span><br><span class="line">b.<span class="built_in">set</span>();</span><br><span class="line">b.<span class="built_in">set</span>(索引);</span><br><span class="line">b.<span class="built_in">reset</span>();</span><br><span class="line">b.<span class="built_in">reset</span>(索引);</span><br><span class="line">b.<span class="built_in">flip</span>();</span><br><span class="line">b.<span class="built_in">flip</span>(索引);</span><br><span class="line"></span><br><span class="line">b.<span class="built_in">to_string</span>();</span><br><span class="line">b.<span class="built_in">to_ulong</span>();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 语法 </tag>
            
            <tag> C++ </tag>
            
            <tag> STL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 数学建模基础</title>
      <link href="/2024/12/05/03%20Python%20%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E5%9F%BA%E7%A1%80/"/>
      <url>/2024/12/05/03%20Python%20%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">open</span>(<span class="string">&quot;文件路径&quot;</span>, <span class="string">&quot;模式&quot;</span>, <span class="string">&quot;编码格式&quot;</span>)</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">模式</th><th align="center">描述</th><th align="center">备注</th></tr></thead><tbody><tr><td align="center"><code>&#39;r&#39;</code></td><td align="center">只读</td><td align="center">如果文件不存在，会抛出<code>FileNotFoundError</code></td></tr><tr><td align="center"><code>&#39;w&#39;</code></td><td align="center">只写</td><td align="center">如果文件存在，会覆盖原文件；如果文件不存在，会创建新文件</td></tr><tr><td align="center"><code>&#39;a&#39;</code></td><td align="center">追加</td><td align="center">如果文件不存在，会创建新文件；如果文件存在，会将数据追加到文件末尾</td></tr><tr><td align="center"><code>&#39;x&#39;</code></td><td align="center">独占创建</td><td align="center">如果文件已存在，会抛出<code>FileExistsError</code></td></tr><tr><td align="center"><code>&#39;b&#39;</code></td><td align="center">二进制</td><td align="center">用于读取&#x2F;写入二进制数据，如图片、音频等。可以与其他模式结合使用</td></tr><tr><td align="center"><code>&#39;t&#39;</code></td><td align="center">文本</td><td align="center">读取或写入的是字符串，而不是二进制数据。可以与其他模式结合使用</td></tr><tr><td align="center"><code>&#39;r+&#39;</code></td><td align="center">读写</td><td align="center">如果文件不存在，会抛出<code>FileNotFoundError</code></td></tr><tr><td align="center"><code>&#39;w+&#39;</code></td><td align="center">读写</td><td align="center">如果文件存在，会覆盖文件；如果文件不存在，会创建新文件</td></tr><tr><td align="center"><code>&#39;a+&#39;</code></td><td align="center">读写</td><td align="center">如果文件存在，数据将被追加到文件末尾；如果文件不存在，会创建新文件</td></tr></tbody></table><table><thead><tr><th align="center">编码格式</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>&#39;utf-8&#39;</code></td><td align="center">常用的 Unicode 编码格式，支持世界上几乎所有语言字符</td></tr><tr><td align="center"><code>&#39;utf-16&#39;</code></td><td align="center">Unicode 编码格式，使用 2 或 4 字节表示字符</td></tr><tr><td align="center"><code>&#39;utf-32&#39;</code></td><td align="center">Unicode 编码格式，使用 4 字节表示字符</td></tr><tr><td align="center"><code>&#39;ascii&#39;</code></td><td align="center">仅支持 7 位字符集，主要用于英语</td></tr><tr><td align="center"><code>&#39;latin-1&#39;</code></td><td align="center">也称为 ISO-8859-1，主要用于西欧语言</td></tr><tr><td align="center"><code>&#39;gbk&#39;</code></td><td align="center">主要用于简体中文，向后兼容 GB2312 编码</td></tr><tr><td align="center"><code>&#39;gb18030&#39;</code></td><td align="center">中国大陆的标准编码，支持所有汉字字符</td></tr><tr><td align="center"><code>&#39;big5&#39;</code></td><td align="center">繁体中文字符集，主要在台湾和香港使用</td></tr><tr><td align="center"><code>&#39;cp1252&#39;</code></td><td align="center">Windows 系统常用的西欧语言编码格式</td></tr><tr><td align="center"><code>&#39;shift-jis&#39;</code></td><td align="center">日语的编码格式，广泛用于日本地区</td></tr><tr><td align="center"><code>&#39;euc-jp&#39;</code></td><td align="center">另一种日语编码格式，主要用于日本的 UNIX 系统</td></tr><tr><td align="center"><code>&#39;koi8-r&#39;</code></td><td align="center">俄罗斯的标准编码，主要用于俄语字符集</td></tr><tr><td align="center"><code>&#39;mac-roman&#39;</code></td><td align="center">苹果电脑常用的字符编码，主要用于西欧语言</td></tr></tbody></table><h3 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;example.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        content = file.read()</span><br><span class="line">        <span class="built_in">print</span>(content)</span><br><span class="line"><span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;文件未找到&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> IOError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;文件读取错误&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">file.read() <span class="comment"># 读取整个文件的内容</span></span><br><span class="line">file.read(字节数) <span class="comment"># 读取指定字节数的内容</span></span><br><span class="line">file.readlines() <span class="comment"># 读取文件中的所有行</span></span><br><span class="line">file.readlines(字节数) <span class="comment"># 读取指定字节数的内容并将其按行分隔</span></span><br><span class="line"></span><br><span class="line">file.close() <span class="comment"># 关闭文件</span></span><br></pre></td></tr></table></figure><h3 id="写入"><a href="#写入" class="headerlink" title="写入"></a>写入</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;example.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        file.write(<span class="string">&quot;Hello, world!&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> IOError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;文件写入错误&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">file.write(字符串) <span class="comment"># 写入一个字符串</span></span><br><span class="line">file.writelines(字符串迭代器) <span class="comment"># 写入多个字符串</span></span><br><span class="line"></span><br><span class="line">file.close() <span class="comment"># 关闭文件</span></span><br></pre></td></tr></table></figure><h1 id="NumPy"><a href="#NumPy" class="headerlink" title="NumPy"></a>NumPy</h1><p><strong>参考手册</strong>：<a href="https://www.numpy.org.cn/reference/">NumPy 参考手册</a></p><p>安装</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install numpy</span><br></pre></td></tr></table></figure><p>导入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br></pre></td></tr></table></figure><h3 id="数组的创建"><a href="#数组的创建" class="headerlink" title="数组的创建"></a>数组的创建</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a1 = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]) <span class="comment"># 一维数组</span></span><br><span class="line">a2 = np.array([</span><br><span class="line">    [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">    [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>],</span><br><span class="line">    [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line">]) <span class="comment"># 二维数组</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(a1), <span class="built_in">type</span>(a2)) <span class="comment"># &lt;class &#x27;numpy.ndarray&#x27;&gt; &lt;class &#x27;numpy.ndarray&#x27;&gt;</span></span><br></pre></td></tr></table></figure><h3 id="索引和切片"><a href="#索引和切片" class="headerlink" title="索引和切片"></a>索引和切片</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(a1[<span class="number">0</span>], a2[<span class="number">1</span>][<span class="number">2</span>]) <span class="comment"># 1 6</span></span><br><span class="line"><span class="built_in">print</span>(a1[<span class="number">1</span>:<span class="number">4</span>]) <span class="comment"># [2 3 4]</span></span><br><span class="line"><span class="built_in">print</span>(a2[<span class="number">1</span>:]) <span class="comment"># [[4 5 6], [7 8 9]]</span></span><br></pre></td></tr></table></figure><h3 id="元素级运算"><a href="#元素级运算" class="headerlink" title="元素级运算"></a>元素级运算</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">b = np.array([<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a + b) <span class="comment"># [5 7 9]</span></span><br><span class="line"><span class="built_in">print</span>(a - b) <span class="comment"># [-3 -3 -3]</span></span><br><span class="line"><span class="built_in">print</span>(a * b) <span class="comment"># [4 10 18]</span></span><br><span class="line"><span class="built_in">print</span>(a / b) <span class="comment"># [0.25 0.4 0.5]</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">c = <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(a * c) <span class="comment"># [2 4 6]</span></span><br><span class="line"><span class="built_in">print</span>(a / c) <span class="comment"># [0.5 1.0 1.5]</span></span><br></pre></td></tr></table></figure><h3 id="数学函数"><a href="#数学函数" class="headerlink" title="数学函数"></a>数学函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(np.sin(a))  <span class="comment"># [0.84147098 0.90929743 0.14112001]</span></span><br><span class="line"><span class="built_in">print</span>(np.cos(a))  <span class="comment"># [0.54030231 -0.41614684 -0.9899925]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(np.exp(a))  <span class="comment"># [ 2.71828183  7.3890561  20.08553692]</span></span><br><span class="line"><span class="built_in">print</span>(np.log(a))  <span class="comment"># [0.0         0.69314718 1.09861229]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(np.sqrt(a))  <span class="comment"># [1.0         1.41421356 1.73205081]</span></span><br></pre></td></tr></table></figure><h3 id="矩阵运算"><a href="#矩阵运算" class="headerlink" title="矩阵运算"></a>矩阵运算</h3><h4 id="矩阵乘法"><a href="#矩阵乘法" class="headerlink" title="矩阵乘法"></a>矩阵乘法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">A = np.array([[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>]])</span><br><span class="line">B = np.array([[<span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>]])</span><br><span class="line"></span><br><span class="line">C = A @ B <span class="comment"># 或者 np.dot(A, B)</span></span><br><span class="line"><span class="built_in">print</span>(C)</span><br><span class="line"><span class="comment"># [[19 22]</span></span><br><span class="line"><span class="comment">#  [43 50]]</span></span><br></pre></td></tr></table></figure><h4 id="矩阵转置"><a href="#矩阵转置" class="headerlink" title="矩阵转置"></a>矩阵转置</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(A.T)</span><br><span class="line"><span class="comment"># [[1 3]</span></span><br><span class="line"><span class="comment">#  [2 4]]</span></span><br></pre></td></tr></table></figure><h4 id="行列式"><a href="#行列式" class="headerlink" title="行列式"></a>行列式</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(np.linalg.det(A)) <span class="comment"># -2.0</span></span><br></pre></td></tr></table></figure><h3 id="聚合运算"><a href="#聚合运算" class="headerlink" title="聚合运算"></a>聚合运算</h3><h4 id="求和、均值、标准差、最小值、最大值"><a href="#求和、均值、标准差、最小值、最大值" class="headerlink" title="求和、均值、标准差、最小值、最大值"></a>求和、均值、标准差、最小值、最大值</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(np.<span class="built_in">sum</span>(a)) <span class="comment"># 15</span></span><br><span class="line"><span class="built_in">print</span>(np.mean(a)) <span class="comment"># 3.0</span></span><br><span class="line"><span class="built_in">print</span>(np.std(a)) <span class="comment"># 1.4142135623730951</span></span><br><span class="line"><span class="built_in">print</span>(np.<span class="built_in">min</span>(a)) <span class="comment"># 1</span></span><br><span class="line"><span class="built_in">print</span>(np.<span class="built_in">max</span>(a)) <span class="comment"># 5</span></span><br></pre></td></tr></table></figure><h4 id="求沿特定轴的运算"><a href="#求沿特定轴的运算" class="headerlink" title="求沿特定轴的运算"></a>求沿特定轴的运算</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">A = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 沿轴 0 方向（列）求和</span></span><br><span class="line"><span class="built_in">print</span>(np.<span class="built_in">sum</span>(A, axis=<span class="number">0</span>)) <span class="comment"># [5 7 9]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 沿轴 1 方向（行）求和</span></span><br><span class="line"><span class="built_in">print</span>(np.<span class="built_in">sum</span>(A, axis=<span class="number">1</span>)) <span class="comment"># [6 15]</span></span><br></pre></td></tr></table></figure><h3 id="条件运算"><a href="#条件运算" class="headerlink" title="条件运算"></a>条件运算</h3><h4 id="条件筛选"><a href="#条件筛选" class="headerlink" title="条件筛选"></a>条件筛选</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 筛选出大于 3 的元素</span></span><br><span class="line"><span class="built_in">print</span>(a[a &gt; <span class="number">3</span>]) <span class="comment"># [4 5]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 筛选出大于 2 且小于 5 的元素</span></span><br><span class="line"><span class="built_in">print</span>(a[(a &gt; <span class="number">2</span>) &amp; (a &lt; <span class="number">5</span>)]) <span class="comment"># [3 4]</span></span><br></pre></td></tr></table></figure><h4 id="条件替换"><a href="#条件替换" class="headerlink" title="条件替换"></a>条件替换</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果元素大于 3，就替换为 10，否则替换为 0</span></span><br><span class="line"><span class="built_in">print</span>(np.where(a &gt; <span class="number">3</span>, <span class="number">10</span>, <span class="number">0</span>)) <span class="comment"># [0  0  0 10 10]</span></span><br></pre></td></tr></table></figure><h3 id="排序与查找"><a href="#排序与查找" class="headerlink" title="排序与查找"></a>排序与查找</h3><h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = np.array([<span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>])</span><br><span class="line"><span class="built_in">print</span>(np.sort(a)) <span class="comment"># [1 1 3 4 5 9]</span></span><br></pre></td></tr></table></figure><h4 id="查找元素的索引"><a href="#查找元素的索引" class="headerlink" title="查找元素的索引"></a>查找元素的索引</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(np.argmax(a)) <span class="comment"># 5 (返回最大值 9 的索引)</span></span><br><span class="line"><span class="built_in">print</span>(np.argmin(a)) <span class="comment"># 1 (返回最小值 1 的索引)</span></span><br><span class="line"><span class="built_in">print</span>(np.where(a == <span class="number">1</span>)) <span class="comment"># (array([1, 3]),) (返回特定值的索引)</span></span><br></pre></td></tr></table></figure><h3 id="广播"><a href="#广播" class="headerlink" title="广播"></a>广播</h3><h4 id="标量与数组的广播"><a href="#标量与数组的广播" class="headerlink" title="标量与数组的广播"></a>标量与数组的广播</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">b = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 标量 b 会自动扩展与数组 a 的形状匹配</span></span><br><span class="line"><span class="built_in">print</span>(a + b) <span class="comment"># [3 4 5]</span></span><br></pre></td></tr></table></figure><h4 id="不同形状数组的广播"><a href="#不同形状数组的广播" class="headerlink" title="不同形状数组的广播"></a>不同形状数组的广播</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = np.array([[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>]])</span><br><span class="line">b = np.array([<span class="number">10</span>, <span class="number">20</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># b 会自动扩展为 [[10, 20], [10, 20]]</span></span><br><span class="line"><span class="built_in">print</span>(a + b)</span><br><span class="line"><span class="comment"># [[11 22]</span></span><br><span class="line"><span class="comment">#  [13 24]]</span></span><br></pre></td></tr></table></figure><h3 id="数组形状操作"><a href="#数组形状操作" class="headerlink" title="数组形状操作"></a>数组形状操作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">arr = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]])</span><br><span class="line"><span class="built_in">print</span>(arr.shape) <span class="comment"># (4, 3)</span></span><br><span class="line"></span><br><span class="line">new_arr = arr.reshape(<span class="number">2</span>, <span class="number">6</span>)</span><br><span class="line"><span class="built_in">print</span>(new_arr)</span><br><span class="line"><span class="comment"># [[1 2 3 2 3 4]</span></span><br><span class="line"><span class="comment">#  [3 4 5 4 5 6]]</span></span><br><span class="line"><span class="built_in">print</span>(new_arr.shape) <span class="comment"># (2, 6)</span></span><br><span class="line"></span><br><span class="line">new_arr_T = new_arr.transpose()</span><br><span class="line"><span class="built_in">print</span>(new_arr_T)</span><br><span class="line"><span class="comment"># [[1 3]</span></span><br><span class="line"><span class="comment">#  [2 4]</span></span><br><span class="line"><span class="comment">#  [3 5]</span></span><br><span class="line"><span class="comment">#  [2 4]</span></span><br><span class="line"><span class="comment">#  [3 5]</span></span><br><span class="line"><span class="comment">#  [4 6]]</span></span><br><span class="line"><span class="built_in">print</span>(new_arr_T.shape) <span class="comment"># (6, 2)</span></span><br></pre></td></tr></table></figure><h3 id="npy-保存和导入"><a href="#npy-保存和导入" class="headerlink" title="npy 保存和导入"></a>npy 保存和导入</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">np.save(<span class="string">&quot;arr&quot;</span>, arr) <span class="comment"># 保存</span></span><br><span class="line">arr = np.load(<span class="string">&quot;arr.npy&quot;</span>) <span class="comment"># 导入</span></span><br></pre></td></tr></table></figure><h1 id="Pandas"><a href="#Pandas" class="headerlink" title="Pandas"></a>Pandas</h1><p><strong>参考手册</strong>：<a href="https://pypandas.cn/docs/">Pandas 参考手册</a></p><p>安装</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pandas</span><br></pre></td></tr></table></figure><p>导入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br></pre></td></tr></table></figure><h3 id="核心数据结构"><a href="#核心数据结构" class="headerlink" title="核心数据结构"></a>核心数据结构</h3><h4 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h4><blockquote><p>一个类似于一维数组的对象</p><p>可以包含任何数据类型（整数、浮动数、字符串、Python 对象等），并且每个元素都带有一个标签（索引）</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">s = pd.Series([<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>]) <span class="comment"># 创建 Series 对象</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">0    10</span></span><br><span class="line"><span class="string">1    20</span></span><br><span class="line"><span class="string">2    30</span></span><br><span class="line"><span class="string">3    40</span></span><br><span class="line"><span class="string">dtype: int64</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>每个元素都有一个默认的索引（0, 1, 2, 3），也可以为它指定自定义的索引：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">s = pd.Series([<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>], index=[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">a    10</span></span><br><span class="line"><span class="string">b    20</span></span><br><span class="line"><span class="string">c    30</span></span><br><span class="line"><span class="string">d    40</span></span><br><span class="line"><span class="string">dtype: int64</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h4 id="DataFrame"><a href="#DataFrame" class="headerlink" title="DataFrame"></a>DataFrame</h4><blockquote><p>一个二维的表格数据结构，类似于 Excel 表格或 SQL 表格</p><p>它由多列数据组成，每一列可以是不同的数据类型，行和列都有索引</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建 DataFrame 对象</span></span><br><span class="line">data = &#123;<span class="string">&#x27;样本号&#x27;</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="string">&#x27;萼片长(cm)&#x27;</span>: [<span class="number">8.9</span>, <span class="number">2.1</span>, <span class="number">4.5</span>], <span class="string">&#x27;类型_num&#x27;</span>: [<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>]&#125;</span><br><span class="line">datadf = pd.DataFrame(data)</span><br><span class="line"><span class="built_in">print</span>(datadf)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">   样本号  萼片长(cm)  类型_num</span></span><br><span class="line"><span class="string">0    1      8.9       0</span></span><br><span class="line"><span class="string">1    2      2.1       0</span></span><br><span class="line"><span class="string">2    3      4.5       1</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(datadf.head(<span class="number">2</span>))</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">   样本号  萼片长(cm)  类型_num</span></span><br><span class="line"><span class="string">0    1      8.9       0</span></span><br><span class="line"><span class="string">1    2      2.1       0</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(datadf.info())</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;class &#x27;pandas.core.frame.DataFrame&#x27;&gt;</span></span><br><span class="line"><span class="string">RangeIndex: 3 entries, 0 to 2</span></span><br><span class="line"><span class="string">Data columns (total 3 columns):</span></span><br><span class="line"><span class="string"> #   Column   Non-Null Count  Dtype  </span></span><br><span class="line"><span class="string">---  ------   --------------  -----  </span></span><br><span class="line"><span class="string"> 0   样本号      3 non-null      int64  </span></span><br><span class="line"><span class="string"> 1   萼片长(cm)  3 non-null      float64</span></span><br><span class="line"><span class="string"> 2   类型_num   3 non-null      int64  </span></span><br><span class="line"><span class="string">dtypes: float64(1), int64(2)</span></span><br><span class="line"><span class="string">memory usage: 204.0 bytes</span></span><br><span class="line"><span class="string">None</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="数据读取与写入"><a href="#数据读取与写入" class="headerlink" title="数据读取与写入"></a>数据读取与写入</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_csv(<span class="string">&#x27;data.csv&#x27;</span>) <span class="comment"># 读取 CSV 文件</span></span><br><span class="line">df = pd.read_excel(<span class="string">&#x27;data.xlsx&#x27;</span>) <span class="comment"># 读取 Excel 文件</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df.to_csv(<span class="string">&#x27;output.csv&#x27;</span>, index=<span class="literal">False</span>) <span class="comment"># 保存到 CSV 文件</span></span><br><span class="line">df.to_excel(<span class="string">&#x27;output.xlsx&#x27;</span>, index=<span class="literal">False</span>) <span class="comment"># 保存到 Excel 文件</span></span><br></pre></td></tr></table></figure><h3 id="选择和索引"><a href="#选择和索引" class="headerlink" title="选择和索引"></a>选择和索引</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">&#x27;Name&#x27;</span>] <span class="comment"># 获取 &#x27;Name&#x27; 列的数据</span></span><br><span class="line"></span><br><span class="line">df.loc[<span class="number">0</span>] <span class="comment"># 通过行标签获取第一行数据</span></span><br><span class="line">df.iloc[<span class="number">0</span>] <span class="comment"># 通过位置索引获取第一行数据</span></span><br></pre></td></tr></table></figure><h3 id="条件筛选-1"><a href="#条件筛选-1" class="headerlink" title="条件筛选"></a>条件筛选</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">df[df[<span class="string">&#x27;Age&#x27;</span>] &gt; <span class="number">25</span>] <span class="comment"># 筛选年龄大于 25 的数据</span></span><br><span class="line">df_1 = df[df[<span class="string">&#x27;类型_num&#x27;</span>] == <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">lb = df[<span class="string">&#x27;花瓣宽(cm)&#x27;</span>].mean() - <span class="number">3</span> * df[<span class="string">&#x27;花瓣宽(cm)&#x27;</span>].std()</span><br><span class="line">ub = df[<span class="string">&#x27;花瓣宽(cm)&#x27;</span>].mean() + <span class="number">3</span> * df[<span class="string">&#x27;花瓣宽(cm)&#x27;</span>].std()</span><br><span class="line">selected_df = df[(df[<span class="string">&#x27;花瓣宽(cm)&#x27;</span>] &gt;= lb) &amp; (df[<span class="string">&#x27;花瓣宽(cm)&#x27;</span>] &lt;= ub)] <span class="comment"># 筛选掉异常值</span></span><br></pre></td></tr></table></figure><h3 id="数据清洗"><a href="#数据清洗" class="headerlink" title="数据清洗"></a>数据清洗</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df.fillna(<span class="number">0</span>) <span class="comment"># 将所有 NaN 填充为 0</span></span><br><span class="line">df.dropna() <span class="comment"># 删除含有缺失值的行</span></span><br><span class="line">df.drop_duplicates() <span class="comment"># 去除重复的行</span></span><br></pre></td></tr></table></figure><h3 id="数据统计与分析"><a href="#数据统计与分析" class="headerlink" title="数据统计与分析"></a>数据统计与分析</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df.describe() <span class="comment"># 获取数值型列的统计信息，如均值、标准差、最小值、最大值等</span></span><br><span class="line">df.groupby(<span class="string">&#x27;City&#x27;</span>)[<span class="string">&#x27;Age&#x27;</span>].mean() <span class="comment"># 按 &#x27;City&#x27; 列分组，并计算每组 &#x27;Age&#x27; 的平均值</span></span><br><span class="line">df.sort_values(by=<span class="string">&#x27;Age&#x27;</span>) <span class="comment"># 按照 &#x27;Age&#x27; 列升序排序</span></span><br></pre></td></tr></table></figure><h3 id="数据合并与连接"><a href="#数据合并与连接" class="headerlink" title="数据合并与连接"></a>数据合并与连接</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">df1 = pd.DataFrame(&#123;<span class="string">&#x27;ID&#x27;</span>: [<span class="number">1</span>, <span class="number">2</span>], <span class="string">&#x27;Name&#x27;</span>: [<span class="string">&#x27;Alice&#x27;</span>, <span class="string">&#x27;Bob&#x27;</span>]&#125;)</span><br><span class="line">df2 = pd.DataFrame(&#123;<span class="string">&#x27;ID&#x27;</span>: [<span class="number">1</span>, <span class="number">3</span>], <span class="string">&#x27;Age&#x27;</span>: [<span class="number">24</span>, <span class="number">30</span>]&#125;)</span><br><span class="line">merged_df = pd.merge(df1, df2, on=<span class="string">&#x27;ID&#x27;</span>, how=<span class="string">&#x27;inner&#x27;</span>) <span class="comment"># 根据 &#x27;ID&#x27; 列合并</span></span><br><span class="line"></span><br><span class="line">df1 = pd.DataFrame(&#123;<span class="string">&#x27;Name&#x27;</span>: [<span class="string">&#x27;Alice&#x27;</span>, <span class="string">&#x27;Bob&#x27;</span>], <span class="string">&#x27;Age&#x27;</span>: [<span class="number">24</span>, <span class="number">27</span>]&#125;)</span><br><span class="line">df2 = pd.DataFrame(&#123;<span class="string">&#x27;Name&#x27;</span>: [<span class="string">&#x27;Charlie&#x27;</span>], <span class="string">&#x27;Age&#x27;</span>: [<span class="number">22</span>]&#125;)</span><br><span class="line">concat_df = pd.concat([df1, df2], ignore_index=<span class="literal">True</span>) <span class="comment"># 按行拼接</span></span><br></pre></td></tr></table></figure><h3 id="数据透视表"><a href="#数据透视表" class="headerlink" title="数据透视表"></a>数据透视表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pivot_table = df.pivot_table(values=<span class="string">&#x27;Age&#x27;</span>, index=<span class="string">&#x27;City&#x27;</span>, aggfunc=<span class="string">&#x27;mean&#x27;</span>) <span class="comment"># 按城市计算平均年龄</span></span><br></pre></td></tr></table></figure><h3 id="高级功能"><a href="#高级功能" class="headerlink" title="高级功能"></a>高级功能</h3><h4 id="时间序列处理"><a href="#时间序列处理" class="headerlink" title="时间序列处理"></a>时间序列处理</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建日期范围</span></span><br><span class="line">dates = pd.date_range(<span class="string">&#x27;2024-01-01&#x27;</span>, periods=<span class="number">5</span>, freq=<span class="string">&#x27;D&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(dates)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以日期为索引的 DataFrame</span></span><br><span class="line">df = pd.DataFrame(&#123;<span class="string">&#x27;Value&#x27;</span>: [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>]&#125;, index=dates)</span><br><span class="line"><span class="built_in">print</span>(df)</span><br></pre></td></tr></table></figure><h4 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h4><blockquote><p>对 DataFrame 或 Series 中的每一行或每一列应用函数</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">&#x27;Age&#x27;</span>] = df[<span class="string">&#x27;Age&#x27;</span>].apply(<span class="keyword">lambda</span> x: x + <span class="number">1</span>) <span class="comment"># 将 &#x27;Age&#x27; 列的每个值加 1</span></span><br></pre></td></tr></table></figure><h4 id="map"><a href="#map" class="headerlink" title="map"></a>map</h4><blockquote><p>将函数应用到 Series 上的每个元素</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">&#x27;City&#x27;</span>] = df[<span class="string">&#x27;City&#x27;</span>].<span class="built_in">map</span>(&#123;<span class="string">&#x27;NY&#x27;</span>: <span class="string">&#x27;New York&#x27;</span>, <span class="string">&#x27;LA&#x27;</span>: <span class="string">&#x27;Los Angeles&#x27;</span>&#125;)</span><br><span class="line"><span class="comment"># &#x27;NY&#x27; 被替换为 &#x27;New York&#x27;</span></span><br><span class="line"><span class="comment"># &#x27;LA&#x27; 被替换为 &#x27;Los Angeles&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="Matplotlib"><a href="#Matplotlib" class="headerlink" title="Matplotlib"></a>Matplotlib</h1><p><strong>参考手册</strong>：<a href="https://matplotlib.org/stable/plot_types/index.html">Matplotlib 参考手册</a></p><p>安装</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install matplotlib</span><br></pre></td></tr></table></figure><p>导入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br></pre></td></tr></table></figure><h3 id="简单图表"><a href="#简单图表" class="headerlink" title="简单图表"></a>简单图表</h3><h4 id="线图"><a href="#线图" class="headerlink" title="线图"></a>线图</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 数据</span></span><br><span class="line">x = np.linspace(<span class="number">0</span>, <span class="number">10</span>, <span class="number">100</span>) </span><br><span class="line">y = np.sin(x)</span><br><span class="line"></span><br><span class="line">plt.plot(x, y) <span class="comment"># 创建图表</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加标题和标签</span></span><br><span class="line">plt.title(<span class="string">&#x27;y = sin(x)&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;X&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;Y&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.show() <span class="comment"># 显示图表</span></span><br></pre></td></tr></table></figure><p><img src="/../images/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/03%20Python%20%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E5%9F%BA%E7%A1%80-1.jpg"></p><h4 id="散点图"><a href="#散点图" class="headerlink" title="散点图"></a>散点图</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 数据</span></span><br><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">y = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>]</span><br><span class="line"></span><br><span class="line">plt.scatter(x, y, marker=<span class="string">&#x27;*&#x27;</span>, c=<span class="string">&#x27;r&#x27;</span>, label=<span class="string">&quot;数据点&quot;</span>) <span class="comment"># 创建散点图</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加标题和标签</span></span><br><span class="line">plt.title(<span class="string">&#x27;标题&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;X&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;Y&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.legend() <span class="comment"># 显示图例</span></span><br><span class="line">plt.show() <span class="comment"># 显示图表</span></span><br></pre></td></tr></table></figure><p><img src="/../images/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/03%20Python%20%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E5%9F%BA%E7%A1%80-2.jpg"></p><h4 id="柱状图"><a href="#柱状图" class="headerlink" title="柱状图"></a>柱状图</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 数据</span></span><br><span class="line">categories = [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;E&#x27;</span>]</span><br><span class="line">values = [<span class="number">5</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">plt.bar(categories, values) <span class="comment"># 创建柱状图</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加标题和标签</span></span><br><span class="line">plt.title(<span class="string">&#x27;标题&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;Category&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;Value&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.show() <span class="comment"># 显示图表</span></span><br></pre></td></tr></table></figure><p><img src="/../images/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/03%20Python%20%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E5%9F%BA%E7%A1%80-3.jpg"></p><h4 id="直方图"><a href="#直方图" class="headerlink" title="直方图"></a>直方图</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">data = np.random.randn(<span class="number">1000</span>) <span class="comment"># 数据</span></span><br><span class="line"></span><br><span class="line">plt.hist(data, bins=<span class="number">30</span>, edgecolor=<span class="string">&#x27;black&#x27;</span>) <span class="comment"># 创建直方图</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加标题和标签</span></span><br><span class="line">plt.title(<span class="string">&#x27;标题&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;Value&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;Frequency&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.show() <span class="comment"># 显示图表</span></span><br></pre></td></tr></table></figure><p><img src="/../images/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/03%20Python%20%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E5%9F%BA%E7%A1%80-4.jpg"></p><h3 id="复杂图表"><a href="#复杂图表" class="headerlink" title="复杂图表"></a>复杂图表</h3><h4 id="子图"><a href="#子图" class="headerlink" title="子图"></a>子图</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">fig, axes = plt.subplots(<span class="number">1</span>, <span class="number">2</span>, figsize=(<span class="number">10</span>, <span class="number">5</span>)) <span class="comment"># 创建两个子图</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一个子图：线图</span></span><br><span class="line">axes[<span class="number">0</span>].plot([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>])</span><br><span class="line">axes[<span class="number">0</span>].set_title(<span class="string">&#x27;Line Plot&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二个子图：柱状图</span></span><br><span class="line">axes[<span class="number">1</span>].bar([<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>], [<span class="number">5</span>, <span class="number">7</span>, <span class="number">3</span>])</span><br><span class="line">axes[<span class="number">1</span>].set_title(<span class="string">&#x27;Bar Chart&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示图表</span></span><br><span class="line">plt.tight_layout()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/../images/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/03%20Python%20%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E5%9F%BA%E7%A1%80-5.jpg"></p><h4 id="多种类型图表"><a href="#多种类型图表" class="headerlink" title="多种类型图表"></a>多种类型图表</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">fig, ax1 = plt.subplots() <span class="comment"># 创建图表</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建第一个 y 轴上的线图</span></span><br><span class="line">ax1.plot([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], [<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>], <span class="string">&#x27;tab:blue&#x27;</span>)</span><br><span class="line">ax1.set_xlabel(<span class="string">&#x27;X&#x27;</span>)</span><br><span class="line">ax1.set_ylabel(<span class="string">&#x27;Y1&#x27;</span>, color=<span class="string">&#x27;tab:blue&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建第二个 y 轴上的柱状图</span></span><br><span class="line">ax2 = ax1.twinx()</span><br><span class="line">ax2.bar([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], [<span class="number">5</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">8</span>], alpha=<span class="number">0.5</span>, color=<span class="string">&#x27;tab:red&#x27;</span>)</span><br><span class="line">ax2.set_ylabel(<span class="string">&#x27;Y2&#x27;</span>, color=<span class="string">&#x27;tab:red&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.show() <span class="comment"># 显示图表</span></span><br></pre></td></tr></table></figure><p><img src="/../images/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/03%20Python%20%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E5%9F%BA%E7%A1%80-6.jpg"></p><h3 id="样式和美化"><a href="#样式和美化" class="headerlink" title="样式和美化"></a>样式和美化</h3><h4 id="改变线条样式、颜色和宽度"><a href="#改变线条样式、颜色和宽度" class="headerlink" title="改变线条样式、颜色和宽度"></a>改变线条样式、颜色和宽度</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">y = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建图表，设置线条颜色、样式和宽度</span></span><br><span class="line">plt.plot(x, y, color=<span class="string">&#x27;green&#x27;</span>, linestyle=<span class="string">&#x27;--&#x27;</span>, linewidth=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">&#x27;标题&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;X&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;Y&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/../images/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/03%20Python%20%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E5%9F%BA%E7%A1%80-7.jpg"></p><h4 id="使用预定义的样式"><a href="#使用预定义的样式" class="headerlink" title="使用预定义的样式"></a>使用预定义的样式</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">plt.style.use(<span class="string">&#x27;ggplot&#x27;</span>) <span class="comment"># 使用预定义的样式</span></span><br><span class="line"></span><br><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">y = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>]</span><br><span class="line"></span><br><span class="line">plt.plot(x, y)</span><br><span class="line">plt.title(<span class="string">&#x27;标题&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/../images/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/03%20Python%20%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E5%9F%BA%E7%A1%80-8.jpg"></p><h3 id="保存图表"><a href="#保存图表" class="headerlink" title="保存图表"></a>保存图表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">y = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>]</span><br><span class="line"></span><br><span class="line">plt.plot(x, y)</span><br><span class="line"></span><br><span class="line">plt.savefig(<span class="string">&#x27;plot.png&#x27;</span>, dpi=<span class="number">300</span>) <span class="comment"># 保存图表</span></span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h3 id="中文支持"><a href="#中文支持" class="headerlink" title="中文支持"></a>中文支持</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib.pylab <span class="keyword">import</span> mpl</span><br><span class="line">mpl.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]</span><br><span class="line">mpl.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 语法 </tag>
            
            <tag> Python </tag>
            
            <tag> 数学建模 </tag>
            
            <tag> NumPy </tag>
            
            <tag> Pandas </tag>
            
            <tag> Matplotlib </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaJUC 多线程</title>
      <link href="/2024/11/16/13%20JavaJUC%20%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
      <url>/2024/11/16/13%20JavaJUC%20%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="锁机制"><a href="#锁机制" class="headerlink" title="锁机制"></a>锁机制</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (Main.class) &#123;</span><br><span class="line">        <span class="comment">// 同步代码块</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同步代码块的执行过程：</p><p><img src="/../images/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/13%20JavaJUC%20%E5%A4%9A%E7%BA%BF%E7%A8%8B-1.jpg"></p><p><code>synchronized</code>使用的锁存储在 Java 对象头中</p><p>每个对象内部，都有一部分空间用于存储对象头信息，包含了<code>Mark Word</code>用于存放<code>hashCode</code>和对象的锁信息</p><p><img src="/../images/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/13%20JavaJUC%20%E5%A4%9A%E7%BA%BF%E7%A8%8B-2.jpg"></p><h3 id="重量级锁"><a href="#重量级锁" class="headerlink" title="重量级锁"></a>重量级锁</h3><p>在 JDK6 之前，<code>synchronized</code>一直被称为重量级锁</p><p>每个对象都有一个<code>monitor</code>与之关联，在 Java 虚拟机（HotSpot）中，<code>monitor</code>是由<code>ObjectMonitor</code>实现的 </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ObjectMonitor</span>() &#123;</span><br><span class="line">    _header       = <span class="literal">NULL</span>;</span><br><span class="line">    _count        = <span class="number">0</span>; <span class="comment">// 记录个数</span></span><br><span class="line">    _waiters      = <span class="number">0</span>,</span><br><span class="line">    _recursions   = <span class="number">0</span>;</span><br><span class="line">    _object       = <span class="literal">NULL</span>;</span><br><span class="line">    _owner        = <span class="literal">NULL</span>;</span><br><span class="line">    _WaitSet      = <span class="literal">NULL</span>; <span class="comment">// 处于 wait 状态的线程，会被加入到 _WaitSet</span></span><br><span class="line">    _WaitSetLock  = <span class="number">0</span> ;</span><br><span class="line">    _Responsible  = <span class="literal">NULL</span>;</span><br><span class="line">    _succ         = <span class="literal">NULL</span>;</span><br><span class="line">    _cxq          = <span class="literal">NULL</span>;</span><br><span class="line">    FreeNext      = <span class="literal">NULL</span>;</span><br><span class="line">    _EntryList    = <span class="literal">NULL</span>; <span class="comment">// 处于等待锁 block 状态的线程，会被加入到该列表</span></span><br><span class="line">    _SpinFreq     = <span class="number">0</span> ;</span><br><span class="line">    _SpinClock    = <span class="number">0</span> ;</span><br><span class="line">    OwnerIsThread = <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每个等待锁的线程都会被封装成<code>ObjectWaiter</code>对象，进入到如下机制：</p><p><img src="/../images/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/13%20JavaJUC%20%E5%A4%9A%E7%BA%BF%E7%A8%8B-3.jpg"></p><ol><li><p>进入 Entry Set 等待</p></li><li><p>当线程获取到对象的<code>monitor</code>后，进入 The Owner 区域</p><p>并把<code>monitor</code>中的<code>owner</code>设置为当前线程，同时<code>monitor</code>中<code>count++</code></p></li><li><p>若当前线程执行完毕或调用<code>wait()</code>方法，将会释放当前持有的<code>monitor</code></p><p>并把<code>monitor</code>中的<code>owner</code>设置为<code>null</code>，同时<code>monitor</code>中<code>count--</code></p></li><li><p>该线程进入 WaitSet 集合中，等待被唤醒</p></li></ol><h3 id="轻量级锁"><a href="#轻量级锁" class="headerlink" title="轻量级锁"></a>轻量级锁</h3><p>在 JDK1.6 时，引入了<strong>轻量级锁</strong></p><p>轻量级锁的目标是，在无竞争情况下，减少重量级锁产生的性能消耗</p><p>它的运作机制如下：</p><ol><li>在即将开始执行同步代码块中的内容时，会首先检查对象的<code>Mark Word</code>，查看锁对象是否被其他线程占用</li><li>如果没有任何线程占用，那么会在当前线程中所处的栈帧中建立一个名为<strong>锁记录</strong>的空间，用于复制并存储对象目前的<code>Mark Word</code>信息</li><li>虚拟机将使用<strong>CAS</strong>操作将对象的<code>Mark Word</code>更新为轻量级锁状态</li></ol><blockquote><p>CAS 是一种无锁算法，用于避免线程在操作共享资源时的互斥锁或其他锁机制，降低并发性能瓶颈</p><p>CAS 的操作步骤如下：</p><ul><li>线程检查内存地址的当前值是否与预期值相同</li><li>如果相同，则将该内存位置的值更新为新值</li><li>如果不同，CAS 操作将失败，并且不会改变内存中的值。线程可以重新读取内存值并重新尝试</li></ul></blockquote><p>如果 CAS 操作失败了的话，那么说明可能这时有其他线程已经进入这个同步代码块了</p><p>这时虚拟机会再次检查对象的<code>Mark Word</code>是否指向当前线程的栈帧</p><p>如果是，说明是当前线程已经有了这个对象的锁，这时直接进同步代码块即可</p><p>否则，只能将锁膨胀为重量级锁，按照重量级锁的操作执行（注意锁的膨胀是不可逆的）</p><p><img src="/../images/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/13%20JavaJUC%20%E5%A4%9A%E7%BA%BF%E7%A8%8B-4.jpg"></p><h4 id="自旋锁"><a href="#自旋锁" class="headerlink" title="自旋锁"></a>自旋锁</h4><p>在 JDK1.4.2 时，引入了<strong>自旋锁</strong>（JDK6 之后默认开启）</p><p>它不会将处于等待状态的线程挂起，而是通过无限循环的方式，不断检测是否能够获取锁</p><p>由于单个线程占用锁的时间非常短，所以说循环次数不会太多，可能很快就能够拿到锁并运行</p><p>自旋锁的等待时间是有限制的，默认情况下为<code>10</code>次。如果失败，那么会进而采用重量级锁机制</p><p><img src="/../images/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/13%20JavaJUC%20%E5%A4%9A%E7%BA%BF%E7%A8%8B-5.jpg"></p><p>在 JDK6 之后，自旋锁得到了一次优化，自旋的次数限制不再是固定的，而是自适应变化的</p><blockquote><p>轻量级锁 -&gt; 失败 -&gt; 自适应自旋锁 -&gt; 失败 -&gt; 重量级锁</p></blockquote><h3 id="偏向锁"><a href="#偏向锁" class="headerlink" title="偏向锁"></a>偏向锁</h3><p>偏向锁实际上就是专门为单个线程而生的</p><p>当某个线程第一次获得锁时，如果接下来都没有其他线程获取此锁，那么持有锁的线程将不再需要进行同步操作</p><p>偏向锁也会通过 CAS 操作记录线程的 ID，如果一直都是同一个线程获取此锁，那么完全没有必要在进行额外的 CAS 操作</p><p>当然，如果有其他线程来抢了，那么偏向锁会根据当前状态，决定是否要恢复到<strong>未锁定</strong>或是膨胀为<strong>轻量级锁</strong></p><blockquote><p>可以添加<code>-XX:+UseBiased</code>参数，来开启偏向锁</p></blockquote><p>值得注意的是，如果对象通过调用<code>hashCode()</code>方法计算过对象的一致性哈希值，那么它是不支持偏向锁的，会直接进入到轻量级锁状态</p><p>因为偏向锁的<code>Mark Word</code>数据结构无法保存哈希值</p><p>如果对象已经是偏向锁状态，再去调用<code>hashCode()</code>方法，那么会直接将锁升级为重量级锁</p><p><img src="/../images/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/13%20JavaJUC%20%E5%A4%9A%E7%BA%BF%E7%A8%8B-6.jpg"></p><p>所以，最终锁的等级为：</p><blockquote><p>未锁定 &lt; 偏向锁 &lt; 轻量级锁 &lt; 重量级锁</p></blockquote><h3 id="锁消除和锁粗化"><a href="#锁消除和锁粗化" class="headerlink" title="锁消除和锁粗化"></a>锁消除和锁粗化</h3><h4 id="锁消除"><a href="#锁消除" class="headerlink" title="锁消除"></a>锁消除</h4><p>锁消除是 JVM 在编译时的一种优化技术，旨在消除不必要的锁</p><p>当 JVM 检测到某个对象的锁只在单线程中被使用，且不会在多个线程间共享时，它会自动消除锁，避免不必要的同步开销</p><h4 id="锁粗化"><a href="#锁粗化" class="headerlink" title="锁粗化"></a>锁粗化</h4><p>锁粗化是将多个相近的锁操作合并成一个更大的锁范围</p><p>这样做可以减少频繁的锁操作，降低上下文切换和加锁释放的开销，尤其是在多个连续的同步操作中</p><h1 id="JMM-内存模型"><a href="#JMM-内存模型" class="headerlink" title="JMM 内存模型"></a>JMM 内存模型</h1><p><img src="/../images/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/13%20JavaJUC%20%E5%A4%9A%E7%BA%BF%E7%A8%8B-7.jpg"></p><p><strong>JMM 内存模型</strong>规定如下：</p><ul><li><p>所有的变量全部存储在主内存</p></li><li><p>每条线程有着自己的工作内存（类比 CPU 的高速缓存）</p><p>线程对变量（不包括局部变量）的所有操作，必须在工作内存中进行，不能直接操作主内存中的数据</p></li><li><p>不同线程之间的工作内存相互隔离</p><p>如果需要在线程之间传递内容，只能通过主内存完成，无法直接访问对方的工作内存</p></li></ul><p>也就是说，每一条线程如果要操作主内存中的数据，那么得先拷贝到自己的工作内存中，并对工作内存中数据的副本进行操作</p><p>操作完成之后，也需要从工作副本中将结果拷贝回主内存中</p><p><strong>缓存不一致示例</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">100000</span>; j++) i++;</span><br><span class="line">        &#125;).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">100000</span>; j++) i++;</span><br><span class="line">        &#125;).start();</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        System.out.println(i); <span class="comment">// 149926（不符合预期）</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际上自增操作并不是由一条指令完成的</p><p>包括变量<code>i</code>的获取、修改、保存，都是被拆分为一个一个的操作完成的</p><p>那么这个时候就有可能出现在修改完保存之前，另一条线程也保存了，但是当前线程是毫不知情的</p><p><img src="/../images/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/13%20JavaJUC%20%E5%A4%9A%E7%BA%BF%E7%A8%8B-8.jpg"></p><p>这可以通过添加<code>synchronized</code>关键字，使其变为同步代码块解决</p><h3 id="重排序"><a href="#重排序" class="headerlink" title="重排序"></a>重排序</h3><p>在编译或执行时，为了优化程序的执行效率，编译器或处理器常常会对指令进行重排序，有以下情况：</p><ol><li>编译器重排序：Java 编译器通过对 Java 代码语义的理解，根据优化规则对代码指令进行重排序</li><li>机器指令级别的重排序：现代处理器很高级，能够自主判断和变更机器指令的执行顺序</li></ol><p>指令重排序能够在不改变结果（单线程）的情况下，优化程序的运行效率，比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">    System.out.println(a + b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实可以交换第一行和第二行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">    System.out.println(a + b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>即使发生交换，但是程序最后的运行结果是不会变的</p><p>虽然单线程下指令重排确实可以起到一定程度的优化作用，但是在多线程下，似乎会导致一些问题：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">0</span>, b = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span>(b == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span>(a == <span class="number">0</span>) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">                &#125;   </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            a = <span class="number">1</span>;</span><br><span class="line">            b = <span class="number">1</span>;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这段代码，在正常情况下，是不可能输出<code>A</code>的</p><p>因为只要<code>b == 1</code>，那么肯定有<code>a == 1</code>，因为<code>a</code>是在<code>b</code>之前完成的赋值</p><p>但是，如果进行了重排序，那么就有可能，<code>a</code>和<code>b</code>的赋值发生了交换</p><p><code>b</code>先被赋值为<code>1</code>，而恰巧这个时候，线程<code>1</code>已经开始判定<code>b == 1</code>了，这时<code>a</code>还没来得及被赋值为<code>1</code>，可能线程<code>1</code>就已经走到打印那里去了</p><p>所以，是有可能输出<code>A</code>的</p><h3 id="volatile-关键字"><a href="#volatile-关键字" class="headerlink" title="volatile 关键字"></a>volatile 关键字</h3><p>多线程编程中的三个重要概念：</p><ul><li><strong>原子性</strong>：一个操作要么完全成功，要么完全失败，不能被中断</li><li><strong>可见性</strong>：一个线程对共享变量的修改能立即被其他线程看到</li><li><strong>有序性</strong>：确保指令执行的顺序性</li></ul><p><strong>可见性示例</strong>：                   </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">while</span> (a == <span class="number">0</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;线程结束！&quot;</span>);</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;修改 a 的值...&quot;</span>);</span><br><span class="line">        a = <span class="number">1</span>; <span class="comment">// 按照正常的逻辑来说，a 的值被修改后，那么另一个线程将不再循环</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然主线程中修改了<code>a</code>的值，但是另一个线程并不知道<code>a</code>的值发生了改变，所以循环中依然是使用旧值在进行判断</p><p>因此，普通变量是不具有可见性的</p><p><strong>解决方案</strong>：</p><p>添加<code>volatile</code>关键字，以保证变量的可见性</p><p>当写入一个<code>volatile</code>变量时，JMM 会确保该线程将本地内存中的变量刷新到主内存中</p><p>同时其他线程中的相同<code>volatile</code>变量的缓存会失效，确保其他线程能看到最新的值               </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">while</span> (a == <span class="number">0</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;线程结束！&quot;</span>); <span class="comment">// 线程正常结束</span></span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;修改 a 的值...&quot;</span>);</span><br><span class="line">        a = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然说<code>volatile</code>能够保证可见性，但是不能保证原子性</p><p>要解决之前的<code>i++</code>的问题，目前还是只能使用加锁来完成：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">r</span> <span class="operator">=</span> () -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) a++;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(r).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(r).start();</span><br><span class="line"></span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        System.out.println(a); <span class="comment">// 16402</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后一个功能就是<code>volatile</code>会禁止指令重排</p><p>也就是说，如果操作的是一个<code>volatile</code>变量，它将不会出现重排序的情况</p><p>如果使用<code>volatile</code>修饰共享变量，在编译时，会在指令序列中插入<strong>内存屏障</strong>来禁止特定类型的处理器重排序</p><blockquote><p>内存屏障又称内存栅栏，是一个 CPU 指令，它的作用有两个：</p><ol><li>保证特定操作的顺序</li><li>保证某些变量的内存可见性</li></ol><p><img src="/../images/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/13%20JavaJUC%20%E5%A4%9A%E7%BA%BF%E7%A8%8B-9.jpg"></p><table><thead><tr><th align="center">屏障类型</th><th align="center">指令示例</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">LoadLoad</td><td align="center">Load1;LoadLoad;Load2</td><td align="center">读操作1 -&gt; 读操作2</td></tr><tr><td align="center">StoreStore</td><td align="center">Store1;StoreStore;Store2</td><td align="center">写操作1 -&gt; 写操作2</td></tr><tr><td align="center">LoadStore</td><td align="center">Load1;LoadStore;Store2</td><td align="center">读操作1 -&gt; 写操作2</td></tr><tr><td align="center">StoreLoad</td><td align="center">Store1;StoreLoad;Load2</td><td align="center">写操作1 -&gt; 读操作2</td></tr></tbody></table></blockquote><p>所以<code>volatile</code>能够保证：之前的指令一定全部执行，之后的指令一定都没有执行，并且前面语句的结果对后面的语句都可见</p><h3 id="happens-before-原则"><a href="#happens-before-原则" class="headerlink" title="happens-before 原则"></a>happens-before 原则</h3><p><strong>happens-before 原则</strong>（先行发生原则）是 JMM 中非常重要的一个概念，它定义了多线程程序中操作的执行顺序</p><p>简单来说，它规定了当一个操作在另一个操作之前执行时，前一个操作的结果对于后一个操作是可见的</p><p>具体来说，<strong>happens-before 原则</strong>用于回答以下问题：</p><blockquote><p>如果线程 A 对某个共享变量进行修改，线程 B 在某个时刻读取该变量，线程 B 能否看到线程 A 修改后的值？</p></blockquote><h4 id="关键点"><a href="#关键点" class="headerlink" title="关键点"></a>关键点</h4><ul><li><strong>happens-before</strong> 定义了操作之间的顺序关系，确保先执行的操作的结果对后执行的操作可见</li><li>如果操作 A <strong>happens-before</strong> 操作 B，那么线程 B 必定能够看到线程 A 对共享变量的修改</li><li>它不仅限于内存可见性，还涉及到程序执行的顺序性</li></ul><h4 id="常见规则"><a href="#常见规则" class="headerlink" title="常见规则"></a>常见规则</h4><ol><li><p><strong>程序顺序规则</strong></p><p>在一个线程中，按照程序中代码的顺序，先执行的操作 <strong>happens-before</strong> 后执行的操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> x + <span class="number">5</span>; <span class="comment">// 这里 y 的计算 happens-before x 的值被读取</span></span><br></pre></td></tr></table></figure></li><li><p><strong>监视器锁规则</strong></p><p>对一个锁的解锁操作 <strong>happens-before</strong> 后续对同一个锁的加锁操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">    <span class="comment">// 写操作</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这里的解锁 happens-before 后续线程对同一锁的加锁操作</span></span><br><span class="line"><span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">    <span class="comment">// 读操作</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>volatile 变量规则</strong></p><p>对<code>volatile</code>变量的写操作 <strong>happens-before</strong> 后续对该<code>volatile</code>变量的读操作</p><p>换句话说，如果线程 A 写入一个<code>volatile</code>变量，线程 B 读取该<code>volatile</code>变量，线程 B 能看到线程 A 修改后的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">flag = <span class="literal">true</span>; <span class="comment">// 线程 A 写操作</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 线程 B 读操作</span></span><br><span class="line"><span class="keyword">if</span> (flag) &#123; <span class="comment">// 线程 B 看到线程 A 写入的 flag 的最新值</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>线程启动规则</strong></p><p>在启动一个新线程时，线程 A 的启动操作 <strong>happens-before</strong> 线程 A 中的任何操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">    <span class="comment">// 线程 t 的任务</span></span><br><span class="line">&#125;);</span><br><span class="line">t.start(); <span class="comment">// 线程 t 的 start() happens-before 线程 t 中的任何操作</span></span><br></pre></td></tr></table></figure></li><li><p><strong>线程终止规则</strong></p><p>线程的<code>join()</code>操作 <strong>happens-before</strong> 线程终止后的操作</p><p>即调用<code>join()</code>方法的线程，会等待被调用线程结束，然后继续执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">t.join(); <span class="comment">// 线程 t 的结束 happens-before 线程 t 之后的操作</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><ul><li><p><strong>内存可见性</strong>：确保先发生的操作对后发生的操作是可见的</p></li><li><p><strong>避免乱序执行</strong>：通过指定操作顺序，避免 JVM 或硬件在优化时造成不必要的乱序执行</p></li><li><p><strong>保障正确性</strong>：帮助确保程序的正确性，特别是在多线程并发场景下，避免了出现竞态条件和数据不一致等问题</p></li></ul><h1 id="锁框架"><a href="#锁框架" class="headerlink" title="锁框架"></a>锁框架</h1><p>在 JDK 5 之后，并发包中新增了<code>Lock</code>接口（以及相关实现类）用来实现锁功能</p><p><code>Lock</code>接口提供了与<code>synchronized</code>关键字类似的同步功能，但需要在使用时手动获取锁和释放锁</p><h2 id="Lock"><a href="#Lock" class="headerlink" title="Lock"></a>Lock</h2><blockquote><p>提供了一种比传统的<code>synchronized</code>关键字更灵活、功能更强大的锁机制</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Lock</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">lock</span><span class="params">()</span>; <span class="comment">// 获取锁，若锁被占用，则会阻塞直到获取锁</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">lockInterruptibly</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException; <span class="comment">// 获取锁，但可以响应中断</span></span><br><span class="line">    </span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">()</span>; <span class="comment">// 尝试获取锁，如果获取不到立即返回 false</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">(<span class="type">long</span> time, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException; <span class="comment">// 尝试获取锁，最多等待指定的时间，时间单位由参数指定</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">unlock</span><span class="params">()</span>; <span class="comment">// 释放锁</span></span><br><span class="line">    Condition <span class="title function_">newCondition</span><span class="params">()</span>; <span class="comment">// 返回一个新的 Condition 实例，用于实现线程间的等待和通知</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>示例</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">Lock</span> <span class="variable">testLock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>(); <span class="comment">// 可重入锁 ReentrantLock 类是 Lock 类的一个实现</span></span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">action</span> <span class="operator">=</span> () -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">100000</span>; j++) &#123;</span><br><span class="line">                testLock.lock(); <span class="comment">// 加锁</span></span><br><span class="line">                i++;</span><br><span class="line">                testLock.unlock(); <span class="comment">// 解锁</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(action).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(action).start();</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        System.out.println(i); <span class="comment">// 200000</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Condition"><a href="#Condition" class="headerlink" title="Condition"></a>Condition</h2><blockquote><p>提供比传统的<code>Object</code>类中的<code>wait()</code>、<code>notify()</code>和<code>notifyAll()</code>方法更加灵活和强大的线程间通信机制</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Condition</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">await</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException; <span class="comment">// 与对象的 wait 方法类似，进入等待状态，并在被 signal 或 signalAll 唤醒后继续执行，同时等待状态下可以响应中断</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">awaitUninterruptibly</span><span class="params">()</span>; <span class="comment">// 同上，但不会响应中断</span></span><br><span class="line">    <span class="type">long</span> <span class="title function_">awaitNanos</span><span class="params">(<span class="type">long</span> nanosTimeout)</span> <span class="keyword">throws</span> InterruptedException; <span class="comment">// 等待指定纳秒时间，如果被唤醒则返回剩余时间，否则超时返回 0 或负值，可以响应中断</span></span><br><span class="line">    </span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">await</span><span class="params">(<span class="type">long</span> time, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException; <span class="comment">// 等待指定时间（时间单位可指定），如果在指定时间内被唤醒则返回 true，否则返回 false，可以响应中断</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">awaitUntil</span><span class="params">(Date deadline)</span> <span class="keyword">throws</span> InterruptedException; <span class="comment">// 等待直到指定的时间点，如果在指定时间前被唤醒返回 true，否则返回 false，可以响应中断</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">signal</span><span class="params">()</span>; <span class="comment">// 唤醒一个在等待状态中的线程，唤醒后线程需要重新获得锁才能继续执行</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">signalAll</span><span class="params">()</span>; <span class="comment">// 唤醒所有在等待状态中的线程，唤醒的线程需重新获得锁才能继续执行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>示例</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">Lock</span> <span class="variable">testLock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line">        <span class="type">Condition</span> <span class="variable">condition</span> <span class="operator">=</span> testLock.newCondition();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            testLock.lock();</span><br><span class="line">            System.out.println(<span class="string">&quot;线程 1 进入等待状态！&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                condition.await(); <span class="comment">// 进入等待状态</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;线程 1 等待结束！&quot;</span>);</span><br><span class="line">            testLock.unlock();</span><br><span class="line">        &#125;).start();</span><br><span class="line">        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            testLock.lock();</span><br><span class="line">            System.out.println(<span class="string">&quot;线程 2 开始唤醒其他等待线程&quot;</span>);</span><br><span class="line">            condition.signal(); <span class="comment">// 唤醒线程 1，但是此时线程 1 还必须要拿到锁才能继续运行</span></span><br><span class="line">            System.out.println(<span class="string">&quot;线程 2 结束&quot;</span>);</span><br><span class="line">            testLock.unlock(); <span class="comment">// 这里释放锁之后，线程 1 就可以拿到锁继续运行了</span></span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">线程 1 进入等待状态！</span><br><span class="line">线程 2 开始唤醒其他等待线程</span><br><span class="line">线程 2 结束</span><br><span class="line">线程 1 等待结束！</span><br><span class="line"></span><br><span class="line">进程已结束，退出代码为 0</span><br></pre></td></tr></table></figure><p><strong>示例</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">Lock</span> <span class="variable">testLock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line">        <span class="type">Condition</span> <span class="variable">condition</span> <span class="operator">=</span> testLock.newCondition();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            testLock.lock();</span><br><span class="line">            System.out.println(<span class="string">&quot;线程 1 进入等待状态！&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                testLock.newCondition().await(); <span class="comment">// 进入等待状态</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;线程 1 等待结束！&quot;</span>);</span><br><span class="line">            testLock.unlock();</span><br><span class="line">        &#125;).start();</span><br><span class="line">        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            testLock.lock();</span><br><span class="line">            System.out.println(<span class="string">&quot;线程 2 开始唤醒其他等待线程&quot;</span>);</span><br><span class="line">            testLock.newCondition().signal(); <span class="comment">// 与线程 1 使用的是不同的 Condition 对象，所以不能唤醒线程 1</span></span><br><span class="line">            System.out.println(<span class="string">&quot;线程 2 结束&quot;</span>);</span><br><span class="line">            testLock.unlock(); <span class="comment">// 这里释放锁之后，线程 1 还是在阻塞状态</span></span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">线程 1 进入等待状态！</span><br><span class="line">线程 2 开始唤醒其他等待线程</span><br><span class="line">线程 2 结束</span><br><span class="line"></span><br><span class="line">进程已结束，退出代码为 130</span><br></pre></td></tr></table></figure><p>同一把锁内是可以存在多个<code>Condition</code>对象的</p><p>只有对同一个<code>Condition</code>对象进行等待和唤醒操作才会有效，而不同的<code>Condition</code>对象是分开计算的</p><h2 id="TimeUnit"><a href="#TimeUnit" class="headerlink" title="TimeUnit"></a>TimeUnit</h2><blockquote><p>提供了一些便捷的方法来进行时间的转换和管理</p></blockquote><table><thead><tr><th align="center">字段</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>NANOSECONDS</code></td><td align="center">纳秒</td></tr><tr><td align="center"><code>MICROSECONDS</code></td><td align="center">微秒</td></tr><tr><td align="center"><code>MILLISECONDS</code></td><td align="center">毫秒</td></tr><tr><td align="center"><code>SECONDS</code></td><td align="center">秒</td></tr><tr><td align="center"><code>MINUTES</code></td><td align="center">分钟</td></tr><tr><td align="center"><code>HOURS</code></td><td align="center">小时</td></tr><tr><td align="center"><code>DAYS</code></td><td align="center">天</td></tr></tbody></table><table><thead><tr><th align="center">方法</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>toNanos(long duration)</code></td><td align="center">将给定时间单位转换为纳秒</td></tr><tr><td align="center"><code>toMicros(long duration)</code></td><td align="center">将给定时间单位转换为微秒</td></tr><tr><td align="center"><code>toMillis(long duration)</code></td><td align="center">将给定时间单位转换为毫秒</td></tr><tr><td align="center"><code>toSeconds(long duration)</code></td><td align="center">将给定时间单位转换为秒</td></tr><tr><td align="center"><code>toMinutes(long duration)</code></td><td align="center">将给定时间单位转换为分钟</td></tr><tr><td align="center"><code>toHours(long duration)</code></td><td align="center">将给定时间单位转换为小时</td></tr><tr><td align="center"><code>toDays(long duration)</code></td><td align="center">将给定时间单位转换为天</td></tr><tr><td align="center"><code>convert(long sourceDuration, TimeUnit sourceUnit)</code></td><td align="center">将给定的时间单位<code>sourceUnit</code>转换为当前时间单位</td></tr><tr><td align="center"><code>sleep(long timeout)</code></td><td align="center">使当前线程休眠指定的时间，单位由调用的<code>TimeUnit</code>枚举值决定</td></tr></tbody></table><h2 id="LockSupport"><a href="#LockSupport" class="headerlink" title="LockSupport"></a>LockSupport</h2><blockquote><p>用来进行线程的挂起和唤醒操作</p></blockquote><h3 id="线程挂起"><a href="#线程挂起" class="headerlink" title="线程挂起"></a>线程挂起</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LockSupport.park(); <span class="comment">// 使当前线程挂起，直到被唤醒或中断。挂起的线程会释放持有的锁，并且会处于阻塞状态</span></span><br></pre></td></tr></table></figure><h3 id="线程唤醒"><a href="#线程唤醒" class="headerlink" title="线程唤醒"></a>线程唤醒</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LockSupport.unpark(线程); <span class="comment">// 唤醒指定的线程，使它从 park() 状态中恢复执行</span></span><br></pre></td></tr></table></figure><h2 id="可重入锁"><a href="#可重入锁" class="headerlink" title="可重入锁"></a>可重入锁</h2><p>同一个线程，可以反复进行加锁操作                 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line">        lock.lock();</span><br><span class="line">        lock.lock(); <span class="comment">// 连续加锁 2 次</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;线程 2 想要获取锁&quot;</span>);</span><br><span class="line">            lock.lock();</span><br><span class="line">            System.out.println(<span class="string">&quot;线程 2 成功获取到锁&quot;</span>);</span><br><span class="line">        &#125;).start();</span><br><span class="line">        lock.unlock();</span><br><span class="line">        System.out.println(<span class="string">&quot;线程 1 释放了一次锁&quot;</span>);</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        lock.unlock();</span><br><span class="line">        System.out.println(<span class="string">&quot;线程 1 再次释放了一次锁&quot;</span>); <span class="comment">// 释放全部锁后，其他线程才能加锁</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在当前线程持有锁的情况下继续加锁不会被阻塞</p><p>并且，加锁几次，就必须要解锁几次，否则此线程依旧持有锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lock.getHoldCount() <span class="comment">// 当前加锁次数</span></span><br><span class="line">lock.isLocked() <span class="comment">// 是否被锁</span></span><br></pre></td></tr></table></figure><p>实际上，如果存在线程持有当前的锁，那么其他线程在获取锁时，是会暂时进入到等待队列的                   </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lock.getQueueLength() <span class="comment">// 当前锁的等待队列长度</span></span><br><span class="line">lock.hasQueuedThread(线程) <span class="comment">// 线程是否正在等待获取锁状态</span></span><br><span class="line">lock.getWaitQueueLength(condition) <span class="comment">// 查看同一个 Condition 目前有多少线程处于等待状态</span></span><br></pre></td></tr></table></figure><h2 id="公平锁与非公平锁"><a href="#公平锁与非公平锁" class="headerlink" title="公平锁与非公平锁"></a>公平锁与非公平锁</h2><p>锁分为<strong>公平锁</strong>和<strong>非公平锁</strong></p><ul><li><strong>公平锁</strong>：多个线程按照申请锁的顺序去获得锁，线程会直接进入队列去排队，永远都是队列的第一位才能得到锁</li><li><strong>非公平锁</strong>：多个线程去获取锁的时候，会直接去尝试获取，获取不到，再去进入等待队列，如果能获取到，就直接获取到锁</li></ul><p>创建出来的可重入锁<code>ReentrantLock</code>默认是采用的非公平锁作为底层锁机制</p><h2 id="读写锁"><a href="#读写锁" class="headerlink" title="读写锁"></a>读写锁</h2><p>它和可重入锁不同的地方在于，可重入锁是一种<strong>排他锁</strong></p><p>当一个线程得到锁之后，另一个线程必须等待其释放锁，否则一律不允许获取到锁</p><p>读写锁维护了一个读锁和一个写锁，这两个锁的机制是不同的</p><ul><li><strong>读锁</strong>：在没有任何线程占用写锁的情况下，同一时间可以有多个线程加读锁</li><li><strong>写锁</strong>：在没有任何线程占用读锁的情况下，同一时间只能有一个线程加写锁</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ReadWriteLock</span> &#123;</span><br><span class="line">    Lock <span class="title function_">readLock</span><span class="params">()</span>; <span class="comment">// 获取读锁</span></span><br><span class="line">    Lock <span class="title function_">writeLock</span><span class="params">()</span>; <span class="comment">// 获取写锁</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此接口有一个实现类<code>ReentrantReadWriteLock</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="type">ReentrantReadWriteLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantReadWriteLock</span>();</span><br><span class="line">    lock.readLock().lock();</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Thread</span>(lock.readLock()::lock).start(); <span class="comment">// 可以多个线程同时对读锁加锁</span></span><br><span class="line">&#125;                </span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="type">ReentrantReadWriteLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantReadWriteLock</span>();</span><br><span class="line">    lock.readLock().lock();</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Thread</span>(lock.writeLock()::lock).start(); <span class="comment">// 有读锁状态下无法加写锁</span></span><br><span class="line">&#125;              </span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="type">ReentrantReadWriteLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantReadWriteLock</span>();</span><br><span class="line">    lock.writeLock().lock();</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Thread</span>(lock.readLock()::lock).start(); <span class="comment">// 有写锁状态下无法加读锁</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>ReentrantReadWriteLock</code>不仅具有读写锁的功能，还保留了可重入锁和公平&#x2F;非公平机制         </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">ReentrantReadWriteLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantReadWriteLock</span>();</span><br><span class="line">        lock.writeLock().lock();</span><br><span class="line">        lock.writeLock().lock(); <span class="comment">// 同一个线程可以重复为写锁加锁</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            lock.writeLock().lock();</span><br><span class="line">            System.out.println(<span class="string">&quot;成功获取到写锁！&quot;</span>);</span><br><span class="line">        &#125;).start();</span><br><span class="line">        System.out.println(<span class="string">&quot;释放第一层锁！&quot;</span>);</span><br><span class="line">        lock.writeLock().unlock();</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;释放第二层锁！&quot;</span>);</span><br><span class="line">        lock.writeLock().unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="锁降级和锁升级"><a href="#锁降级和锁升级" class="headerlink" title="锁降级和锁升级"></a>锁降级和锁升级</h3><p><strong>锁降级</strong>：写锁降级为读锁</p><p>当一个线程持有写锁的情况下，虽然其他线程不能加读锁，但是线程自己是可以加读锁的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="type">ReentrantReadWriteLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantReadWriteLock</span>();</span><br><span class="line">    lock.writeLock().lock();</span><br><span class="line">    lock.readLock().lock(); <span class="comment">// 添加读锁</span></span><br><span class="line">    System.out.println(<span class="string">&quot;成功加读锁！&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">ReentrantReadWriteLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantReadWriteLock</span>();</span><br><span class="line">        lock.writeLock().lock();</span><br><span class="line">        lock.readLock().lock();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;开始加读锁！&quot;</span>);</span><br><span class="line">            lock.readLock().lock();</span><br><span class="line">            System.out.println(<span class="string">&quot;读锁添加成功！&quot;</span>);</span><br><span class="line">        &#125;).start();</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        lock.writeLock().unlock(); <span class="comment">// 在同时加了写锁和读锁的情况下，释放写锁（锁降级）</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>锁升级</strong>：读锁升级为写锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">ReentrantReadWriteLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantReadWriteLock</span>();</span><br><span class="line">        lock.readLock().lock();</span><br><span class="line">        lock.writeLock().lock(); <span class="comment">// 在仅持有读锁的情况下去申请写锁，ReentrantReadWriteLock 是不支持的</span></span><br><span class="line">        System.out.println(<span class="string">&quot;锁升级成功！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">进程已结束，退出代码为 130</span><br></pre></td></tr></table></figure><h2 id="队列同步器-AQS"><a href="#队列同步器-AQS" class="headerlink" title="队列同步器 AQS"></a>队列同步器 AQS</h2><p>公平锁和非公平锁都是继承自<code>Sync</code>，而<code>Sync</code>是继承自<code>AbstractQueuedSynchronizer</code>，简称<strong>队列同步器 AQS</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Sync</span> <span class="keyword">extends</span> <span class="title class_">AbstractQueuedSynchronizer</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">NonfairSync</span> <span class="keyword">extends</span> <span class="title class_">Sync</span> &#123;&#125; <span class="comment">// 非公平锁</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">FairSync</span> <span class="keyword">extends</span> <span class="title class_">Sync</span> &#123;&#125; <span class="comment">// 公平锁</span></span><br></pre></td></tr></table></figure><h3 id="底层实现"><a href="#底层实现" class="headerlink" title="底层实现"></a>底层实现</h3><p><code>AQS</code>是实现锁机制的基础，它的内部封装了包括锁的获取、释放、以及等待队列</p><p>一个锁（排他锁为例）的基本功能就是获取锁、释放锁</p><p>当锁被占用时，其他线程来争抢会进入等待队列，<code>AQS</code>已经将这些基本的功能封装完成了</p><p>其中等待队列是核心内容，等待队列是由双向链表数据结构实现的</p><p>每个等待状态下的线程都可以被封装进结点中并放入双向链表中，而对于双向链表是以队列的形式进行操作的</p><p><img src="/../images/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/13%20JavaJUC%20%E5%A4%9A%E7%BA%BF%E7%A8%8B-10.jpg"></p><p><code>AQS</code>中有一个<code>head</code>字段和一个<code>tail</code>字段，分别记录双向链表的头结点和尾结点</p><p>而之后的一系列操作都是围绕此队列来进行的</p><h4 id="AQS"><a href="#AQS" class="headerlink" title="AQS"></a>AQS</h4><p><code>AQS</code>的<code>Node</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AbstractQueuedSynchronizer</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Node</span> &#123; <span class="comment">// 每个处于等待状态的线程都可以是一个节点，并且每个节点是有很多状态的</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Node</span> <span class="variable">SHARED</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(); <span class="comment">// 每个节点都可以被分为独占模式节点或是共享模式节点，分别适用于独占锁和共享锁</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Node</span> <span class="variable">EXCLUSIVE</span> <span class="operator">=</span> <span class="literal">null</span>; <span class="comment">// 独占模式节点为空</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">CANCELLED</span> <span class="operator">=</span>  <span class="number">1</span>; <span class="comment">// 唯一一个大于 0 的状态，表示已失效，可能是由于超时或中断，此节点被取消</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">SIGNAL</span>    <span class="operator">=</span> -<span class="number">1</span>; <span class="comment">// 此节点后面的节点被挂起（进入等待状态）</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">CONDITION</span> <span class="operator">=</span> -<span class="number">2</span>; <span class="comment">// 在条件队列中的节点才是这个状态</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">PROPAGATE</span> <span class="operator">=</span> -<span class="number">3</span>; <span class="comment">// 传播，一般用于共享锁</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">volatile</span> <span class="type">int</span> waitStatus; <span class="comment">// 等待状态值</span></span><br><span class="line">    <span class="keyword">volatile</span> Node prev; <span class="comment">// 双向链表中的前一个节点</span></span><br><span class="line">    <span class="keyword">volatile</span> Node next; <span class="comment">// 双向链表中的下一个节点</span></span><br><span class="line">    <span class="keyword">volatile</span> Thread thread; <span class="comment">// 每一个线程都可以被封装进一个节点进入到等待队列</span></span><br><span class="line">  </span><br><span class="line">    Node nextWaiter; <span class="comment">// 在等待队列中表示模式，条件队列中作为下一个节点的指针</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">isShared</span><span class="params">()</span> &#123; <span class="comment">// 判断节点是否为共享模式</span></span><br><span class="line">        <span class="keyword">return</span> nextWaiter == SHARED;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> Node <span class="title function_">predecessor</span><span class="params">()</span> <span class="keyword">throws</span> NullPointerException &#123; <span class="comment">// 获取前一个节点</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">p</span> <span class="operator">=</span> prev;</span><br><span class="line">        <span class="keyword">if</span> (p == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Node() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    Node(Thread thread, Node mode) &#123; <span class="comment">// 带线程和模式的构造函数</span></span><br><span class="line">        <span class="built_in">this</span>.nextWaiter = mode; <span class="comment">// 设置节点模式</span></span><br><span class="line">        <span class="built_in">this</span>.thread = thread; <span class="comment">// 设置节点线程</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Node(Thread thread, <span class="type">int</span> waitStatus) &#123; <span class="comment">// 带线程和等待状态的构造函数</span></span><br><span class="line">        <span class="built_in">this</span>.waitStatus = waitStatus; <span class="comment">// 设置节点的等待状态</span></span><br><span class="line">        <span class="built_in">this</span>.thread = thread; <span class="comment">// 设置节点线程</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>AQS</code>初始化操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AbstractQueuedSynchronizer</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Unsafe</span> <span class="variable">unsafe</span> <span class="operator">=</span> Unsafe.getUnsafe(); <span class="comment">// 直接使用 Unsafe 类进行操作</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> stateOffset; <span class="comment">// 记录类中属性的在内存中的偏移地址，方便 Unsafe 类直接操作内存进行赋值等</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> headOffset; <span class="comment">// 这里对应的就是 AQS 类中的 head 头结点成员字段</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> tailOffset; <span class="comment">// 这里对应的就是 AQS 类中的 tail 成员字段</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> waitStatusOffset; <span class="comment">// 这里对应的就是 Node 类中的 waitStatus 成员字段</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> nextOffset; <span class="comment">// 这里对应的就是 Node 类中的 next 成员字段</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> &#123; <span class="comment">// 静态代码块，在类加载的时候就会自动获取偏移地址</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        stateOffset = unsafe.objectFieldOffset</span><br><span class="line">            (AbstractQueuedSynchronizer.class.getDeclaredField(<span class="string">&quot;state&quot;</span>));</span><br><span class="line">        headOffset = unsafe.objectFieldOffset</span><br><span class="line">            (AbstractQueuedSynchronizer.class.getDeclaredField(<span class="string">&quot;head&quot;</span>));</span><br><span class="line">        tailOffset = unsafe.objectFieldOffset</span><br><span class="line">            (AbstractQueuedSynchronizer.class.getDeclaredField(<span class="string">&quot;tail&quot;</span>));</span><br><span class="line">        waitStatusOffset = unsafe.objectFieldOffset</span><br><span class="line">            (Node.class.getDeclaredField(<span class="string">&quot;waitStatus&quot;</span>));</span><br><span class="line">        nextOffset = unsafe.objectFieldOffset</span><br><span class="line">            (Node.class.getDeclaredField(<span class="string">&quot;next&quot;</span>));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception ex) &#123; <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(ex); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">compareAndSetHead</span><span class="params">(Node update)</span> &#123; <span class="comment">// 通过 CAS 操作来修改头结点</span></span><br><span class="line">    <span class="comment">// 调用的是 Unsafe 类的 compareAndSwapObject 方法，通过 CAS 算法比较对象并替换</span></span><br><span class="line">    <span class="keyword">return</span> unsafe.compareAndSwapObject(<span class="built_in">this</span>, headOffset, <span class="literal">null</span>, update);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 同上，省略部分代码</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">compareAndSetTail</span><span class="params">(Node expect, Node update)</span> &#123;&#125; <span class="comment">// 通过 CAS 操作来修改尾结点</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">compareAndSetWaitStatus</span><span class="params">(Node node, <span class="type">int</span> expect, <span class="type">int</span> update)</span> &#123;&#125; <span class="comment">// 通过 CAS 操作来修改 Node 的 waitStatus 状态</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">compareAndSetNext</span><span class="params">(Node node, Node expect, Node update)</span> &#123;&#125; <span class="comment">// 通过 CAS 操作来修改 Node 的 next 节点</span></span><br></pre></td></tr></table></figure><p><code>AQS</code>可重写方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AbstractQueuedSynchronizer</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">tryAcquire</span><span class="params">(<span class="type">int</span> arg)</span> &#123; <span class="comment">// 独占式获取同步状态，查看同步状态是否和参数一致，如果没有问题，那么会使用 CAS 操作设置同步状态并返回 true</span></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">tryRelease</span><span class="params">(<span class="type">int</span> arg)</span> &#123; <span class="comment">// 独占式释放同步状态</span></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="type">int</span> <span class="title function_">tryAcquireShared</span><span class="params">(<span class="type">int</span> arg)</span> &#123; <span class="comment">// 共享式获取同步状态，返回值大于 0 表示成功，否则失败</span></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">tryReleaseShared</span><span class="params">(<span class="type">int</span> arg)</span> &#123; <span class="comment">// 共享式释放同步状态</span></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">isHeldExclusively</span><span class="params">()</span> &#123; <span class="comment">// 是否在独占模式下被当前线程占用（锁是否被当前线程持有）</span></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="公平锁加锁"><a href="#公平锁加锁" class="headerlink" title="公平锁加锁"></a>公平锁加锁</h4><p><code>ReentrantLock</code>（此类是全局独占式的）中的公平锁是如何借助<code>AQS</code>实现的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ReentrantLock</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">FairSync</span> <span class="keyword">extends</span> <span class="title class_">Sync</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">3000897897090466540L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">lock</span><span class="params">()</span> &#123;</span><br><span class="line">        acquire(<span class="number">1</span>); <span class="comment">// 加锁操作调用了 AQS 提供的模板方法 acquire</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AbstractQueuedSynchronizer</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@ReservedStackAccess</span> <span class="comment">// 保护被注解的方法，通过添加一些额外的空间，防止在多线程运行的时候出现栈溢出</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">acquire</span><span class="params">(<span class="type">int</span> arg)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!tryAcquire(arg) &amp;&amp;</span><br><span class="line">        acquireQueued(addWaiter(Node.EXCLUSIVE), arg)) <span class="comment">// 节点为独占模式 Node.EXCLUSIVE</span></span><br><span class="line">        selfInterrupt();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先会调用<code>tryAcquire()</code>方法（这里是由<code>FairSync</code>类实现的）</p><p>如果尝试加独占锁失败（返回<code>false</code>了），说明可能这个时候有其他线程持有了此独占锁，所以当前线程得先等着</p><p>那么会调用<code>addWaiter()</code>方法将线程加入等待队列中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AbstractQueuedSynchronizer</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Node <span class="title function_">addWaiter</span><span class="params">(Node mode)</span> &#123;</span><br><span class="line">    <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(Thread.currentThread(), mode); <span class="comment">// 创建一个新的节点，将当前线程和模式传入构造函数</span></span><br><span class="line">    <span class="type">Node</span> <span class="variable">pred</span> <span class="operator">=</span> tail; <span class="comment">// 获取尾节点</span></span><br><span class="line">    <span class="keyword">if</span> (pred != <span class="literal">null</span>) &#123;</span><br><span class="line">        node.prev = pred; <span class="comment">// 将新节点的前驱指向尾节点</span></span><br><span class="line">        <span class="keyword">if</span> (compareAndSetTail(pred, node)) &#123; <span class="comment">// 尝试通过 CAS 将尾节点设置为新节点</span></span><br><span class="line">            pred.next = node; <span class="comment">// 如果 CAS 成功，将尾节点的 next 指向新节点</span></span><br><span class="line">            <span class="keyword">return</span> node; <span class="comment">// 返回新节点</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    enq(node); <span class="comment">// CAS 快速入队失败时调用 enq 方法进行自旋入队</span></span><br><span class="line">    <span class="keyword">return</span> node; <span class="comment">// 返回新节点</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Node <span class="title function_">enq</span><span class="params">(<span class="keyword">final</span> Node node)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123; <span class="comment">// 自旋入队，进行无限循环</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">t</span> <span class="operator">=</span> tail; <span class="comment">// 获取当前尾节点</span></span><br><span class="line">        <span class="keyword">if</span> (t == <span class="literal">null</span>) &#123; <span class="comment">// 如果尾节点为 null，说明头结点和尾结点都还没有初始化</span></span><br><span class="line">            <span class="keyword">if</span> (compareAndSetHead(<span class="keyword">new</span> <span class="title class_">Node</span>())) <span class="comment">// 初始化头结点和尾结点</span></span><br><span class="line">                tail = head; <span class="comment">// 将尾节点指向头节点</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            node.prev = t; <span class="comment">// 将新节点的前驱指向当前尾节点</span></span><br><span class="line">            <span class="keyword">if</span> (compareAndSetTail(t, node)) &#123; <span class="comment">// 尝试通过 CAS 将尾节点设置为新节点</span></span><br><span class="line">                t.next = node; <span class="comment">// 如果 CAS 成功，将当前尾节点的 next 指向新节点</span></span><br><span class="line">                <span class="keyword">return</span> t; <span class="comment">// 返回当前尾节点</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>addWaiter()</code>会返回已经加入的节点</p><p><code>acquireQueued()</code>在得到返回的节点时，也会进入自旋状态，等待唤醒（也就是开始进入到拿锁的环节了）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AbstractQueuedSynchronizer</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@ReservedStackAccess</span></span><br><span class="line"><span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">acquireQueued</span><span class="params">(<span class="keyword">final</span> Node node, <span class="type">int</span> arg)</span> &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">failed</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">interrupted</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (;;) &#123; <span class="comment">// 无限循环，直到获取锁成功或出现错误</span></span><br><span class="line">            <span class="keyword">final</span> <span class="type">Node</span> <span class="variable">p</span> <span class="operator">=</span> node.predecessor(); <span class="comment">// 获取当前节点的前驱节点</span></span><br><span class="line">            <span class="keyword">if</span> (p == head &amp;&amp; tryAcquire(arg)) &#123; <span class="comment">// 可以看到当此节点位于队首 (node.prev == head) 时，会再次调用 tryAcquire 方法获取锁，如果获取成功，会返回此过程中是否被中断的值</span></span><br><span class="line">                setHead(node); <span class="comment">// 新的头结点设置为当前节点</span></span><br><span class="line">                p.next = <span class="literal">null</span>; <span class="comment">// 原有的头结点没有存在的意义了</span></span><br><span class="line">                failed = <span class="literal">false</span>; <span class="comment">// 获取锁成功，标志 failed 设为 false</span></span><br><span class="line">                <span class="keyword">return</span> interrupted; <span class="comment">// 直接返回等待过程中是否被中断</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 依然没获取成功，继续进行自旋</span></span><br><span class="line">            <span class="keyword">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp; <span class="comment">// 将当前节点的前驱节点等待状态设置为 SIGNAL，如果失败将直接开启下一轮循环，直到成功为止，如果成功接着往下</span></span><br><span class="line">                parkAndCheckInterrupt()) <span class="comment">// 挂起线程进入等待状态，等待被唤醒，如果在等待状态下被中断，那么会返回 true，直接将中断标志设为 true，否则就是正常唤醒，继续自旋</span></span><br><span class="line">                interrupted = <span class="literal">true</span>; <span class="comment">// 标记当前线程被中断</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (failed) <span class="comment">// 如果获取锁失败</span></span><br><span class="line">            cancelAcquire(node); <span class="comment">// 取消当前节点的获取请求</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">parkAndCheckInterrupt</span><span class="params">()</span> &#123;</span><br><span class="line">    LockSupport.park(<span class="built_in">this</span>); <span class="comment">// 通过 unsafe 类操作底层挂起线程（会直接进入阻塞状态）</span></span><br><span class="line">    <span class="keyword">return</span> Thread.interrupted(); <span class="comment">// 检查并清除中断状态，返回当前线程是否被中断</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AbstractQueuedSynchronizer</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">shouldParkAfterFailedAcquire</span><span class="params">(Node pred, Node node)</span> &#123;  </span><br><span class="line">    <span class="type">int</span> <span class="variable">ws</span> <span class="operator">=</span> pred.waitStatus; <span class="comment">// 获取前驱节点的等待状态</span></span><br><span class="line">    <span class="keyword">if</span> (ws == Node.SIGNAL)  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// 已经是 SIGNAL，直接返回 true</span></span><br><span class="line">    <span class="keyword">if</span> (ws &gt; <span class="number">0</span>) &#123; <span class="comment">// 不能是已经取消的节点，必须找到一个没被取消的</span></span><br><span class="line">        <span class="keyword">do</span> &#123;  </span><br><span class="line">            node.prev = pred = pred.prev; <span class="comment">// 将节点的前驱指针更新为前驱节点的前驱</span></span><br><span class="line">        &#125; <span class="keyword">while</span> (pred.waitStatus &gt; <span class="number">0</span>); <span class="comment">// 继续向前查找，直到遇到一个没有被取消的节点</span></span><br><span class="line">        pred.next = node; <span class="comment">// 直接抛弃被取消的节点，连接当前节点</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">        <span class="comment">// 不是 SIGNAL，先 CAS 设置为 SIGNAL（这里没有返回 true 因为 CAS 不一定成功，需要下一轮再判断一次）</span></span><br><span class="line">        compareAndSetWaitStatus(pred, ws, Node.SIGNAL); <span class="comment">// 尝试通过 CAS 设置前驱节点的等待状态为 SIGNAL</span></span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 返回 false，马上开启下一轮循环</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以，<code>acquire()</code>中的<code>if</code>条件如果为<code>true</code>，那么只有一种情况，就是等待过程中被中断了</p><p>其他任何情况下都是成功获取到独占锁，所以当等待过程被中断时，会调用<code>selfInterrupt()</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Thread</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">selfInterrupt</span><span class="params">()</span> &#123;</span><br><span class="line">    Thread.currentThread().interrupt(); <span class="comment">// 直接向当前线程发送中断信号</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>公平锁的<code>tryAcquire()</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ReentrantLock</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">FairSync</span> <span class="keyword">extends</span> <span class="title class_">Sync</span> &#123;</span><br><span class="line">    <span class="meta">@ReservedStackAccess</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">tryAcquire</span><span class="params">(<span class="type">int</span> acquires)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Thread</span> <span class="variable">current</span> <span class="operator">=</span> Thread.currentThread(); <span class="comment">// 先获取当前线程的 Thread 对象</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> getState(); <span class="comment">// 获取当前 AQS 对象状态（独占模式下 0 为未占用，大于 0 表示已占用）</span></span><br><span class="line">        <span class="keyword">if</span> (c == <span class="number">0</span>) &#123; <span class="comment">// 如果是 0，那就表示没有占用，现在线程就要来尝试占用它</span></span><br><span class="line">            <span class="keyword">if</span> (!hasQueuedPredecessors() &amp;&amp; <span class="comment">// 等待队列是否不为空且当前线程没有拿到锁，其实就是看看当前线程有没有必要进行排队，如果没必要排队，就说明可以直接获取锁</span></span><br><span class="line">                compareAndSetState(<span class="number">0</span>, acquires)) &#123; <span class="comment">// CAS 设置状态，如果成功则说明成功拿到了这把锁，失败则说明可能这个时候其他线程在争抢，并且还先抢到</span></span><br><span class="line">                setExclusiveOwnerThread(current); <span class="comment">// 成功拿到锁，会将独占模式所有者线程设定为当前线程（这个方法是父类 AbstractOwnableSynchronizer 中的，就表示当前这把锁已经是这个线程的了）</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// 占用锁成功，返回 true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (current == getExclusiveOwnerThread()) &#123; <span class="comment">// 如果不是 0，那就表示被线程占用了，这个时候看看是不是自己占用的，如果是，由于是可重入锁，可以继续加锁</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">nextc</span> <span class="operator">=</span> c + acquires; <span class="comment">// 多次加锁会将状态值进行增加，状态值就是加锁次数</span></span><br><span class="line">            <span class="keyword">if</span> (nextc &lt; <span class="number">0</span>) <span class="comment">// 加到 int 值溢出了？</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Maximum lock count exceeded&quot;</span>);</span><br><span class="line">            setState(nextc); <span class="comment">// 设置为新的加锁次数</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// 成功加锁，返回 true</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 其他任何情况都是加锁失败</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="公平锁解锁"><a href="#公平锁解锁" class="headerlink" title="公平锁解锁"></a>公平锁解锁</h4><p><code>AQS</code>的解锁过程：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ReentrantLock</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unlock</span><span class="params">()</span> &#123;</span><br><span class="line">    sync.release(<span class="number">1</span>); <span class="comment">// 直接调用了 AQS 中的 release 方法，参数为 1 表示解锁一次，state--</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AbstractQueuedSynchronizer</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@ReservedStackAccess</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">release</span><span class="params">(<span class="type">int</span> arg)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (tryRelease(arg)) &#123; <span class="comment">// 和 tryAcquire 一样，也得子类去重写，释放锁操作</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">h</span> <span class="operator">=</span> head; <span class="comment">// 释放锁成功后，获取新的头结点</span></span><br><span class="line">        <span class="keyword">if</span> (h != <span class="literal">null</span> &amp;&amp; h.waitStatus != <span class="number">0</span>) &#123; <span class="comment">// 如果新的头结点不为空并且不是刚刚建立的结点（初始状态下 status 为默认值 0，而上面在进行了 shouldParkAfterFailedAcquire 之后，会被设定为 SIGNAL 状态，值为 -1）</span></span><br><span class="line">            unparkSuccessor(h); <span class="comment">// 唤醒头节点下一个节点中的线程</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// 释放锁成功</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 释放锁失败</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AbstractQueuedSynchronizer</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">unparkSuccessor</span><span class="params">(Node node)</span> &#123; <span class="comment">// 定义 unparkSuccessor 方法，用于唤醒下一个节点</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">ws</span> <span class="operator">=</span> node.waitStatus; <span class="comment">// 获取当前节点的等待状态</span></span><br><span class="line">    <span class="keyword">if</span> (ws &lt; <span class="number">0</span>) <span class="comment">// 如果等待状态小于 0，即节点处于被中断或取消的状态</span></span><br><span class="line">        compareAndSetWaitStatus(node, ws, <span class="number">0</span>); <span class="comment">// 将当前节点的等待状态设置为初始值 0</span></span><br><span class="line"></span><br><span class="line">    <span class="type">Node</span> <span class="variable">s</span> <span class="operator">=</span> node.next; <span class="comment">// 获取下一个节点</span></span><br><span class="line">    <span class="keyword">if</span> (s == <span class="literal">null</span> || s.waitStatus &gt; <span class="number">0</span>) &#123; <span class="comment">// 如果下一个节点为空或等待状态大于 0，表示该节点已被取消，不能通知 unpark</span></span><br><span class="line">        s = <span class="literal">null</span>; <span class="comment">// 将下一个节点设为 null</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">Node</span> <span class="variable">t</span> <span class="operator">=</span> tail; t != <span class="literal">null</span> &amp;&amp; t != node; t = t.prev) <span class="comment">// 从队尾向前遍历节点，直到找到一个等待状态小于等于 0 的节点</span></span><br><span class="line">            <span class="keyword">if</span> (t.waitStatus &lt;= <span class="number">0</span>) <span class="comment">// 如果找到了符合条件的节点</span></span><br><span class="line">                s = t; <span class="comment">// 更新 s 为找到的节点</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (s != <span class="literal">null</span>) <span class="comment">// 如果找到了合适的节点</span></span><br><span class="line">        LockSupport.unpark(s.thread); <span class="comment">// 唤醒该节点所对应的线程</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Sync</code>的<code>tryRelease()</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ReentrantLock</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@ReservedStackAccess</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">tryRelease</span><span class="params">(<span class="type">int</span> releases)</span> &#123; <span class="comment">// 尝试释放锁，返回是否释放成功</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> getState() - releases; <span class="comment">// 先计算本次解锁之后的状态值</span></span><br><span class="line">    <span class="keyword">if</span> (Thread.currentThread() != getExclusiveOwnerThread()) <span class="comment">// 因为是独占锁，那肯定这把锁得是当前线程持有才行</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalMonitorStateException</span>(); <span class="comment">// 否则直接抛异常</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">free</span> <span class="operator">=</span> <span class="literal">false</span>; <span class="comment">// 用于标记是否成功释放锁</span></span><br><span class="line">    <span class="keyword">if</span> (c == <span class="number">0</span>) &#123; <span class="comment">// 如果解锁之后的值为 0，表示已经完全释放此锁</span></span><br><span class="line">        free = <span class="literal">true</span>; <span class="comment">// 设置释放标志为 true</span></span><br><span class="line">        setExclusiveOwnerThread(<span class="literal">null</span>); <span class="comment">// 将独占锁持有线程设置为 null</span></span><br><span class="line">    &#125;</span><br><span class="line">    setState(c); <span class="comment">// 状态值设定为 c</span></span><br><span class="line">    <span class="keyword">return</span> free; <span class="comment">// 如果不是 0 表示此锁还没完全释放，返回 false，是 0 就返回 true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/../images/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/13%20JavaJUC%20%E5%A4%9A%E7%BA%BF%E7%A8%8B-11.jpg"></p><h3 id="公平锁一定公平吗？"><a href="#公平锁一定公平吗？" class="headerlink" title="公平锁一定公平吗？"></a>公平锁一定公平吗？</h3><p>来回顾一下<code>tryAcquire()</code>方法的实现：         </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ReentrantLock</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@ReservedStackAccess</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">tryAcquire</span><span class="params">(<span class="type">int</span> acquires)</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">Thread</span> <span class="variable">current</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">    <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> getState();</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!hasQueuedPredecessors() &amp;&amp; <span class="comment">// 注意这里，公平锁的机制是，一开始会查看是否有节点处于等待</span></span><br><span class="line">            compareAndSetState(<span class="number">0</span>, acquires)) &#123; <span class="comment">// 如果前面的方法执行后发现没有等待节点，就直接进入占锁环节了</span></span><br><span class="line">            setExclusiveOwnerThread(current);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (current == getExclusiveOwnerThread()) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">nextc</span> <span class="operator">=</span> c + acquires;</span><br><span class="line">        <span class="keyword">if</span> (nextc &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Maximum lock count exceeded&quot;</span>);</span><br><span class="line">        setState(nextc);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假如现在出现了这样的情况：</p><p>线程 1 已经持有锁了，这时线程 2 来争抢这把锁，走到<code>hasQueuedPredecessors()</code>，判断出为 <code>false</code></p><p>线程 2 继续运行，然后线程 2 肯定获取锁失败（因为锁这时是被线程 1 占有的），因此就进入到等待队列中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AbstractQueuedSynchronizer</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Node <span class="title function_">addWaiter</span><span class="params">(Node mode)</span> &#123;</span><br><span class="line">    <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(Thread.currentThread(), mode);</span><br><span class="line">    <span class="type">Node</span> <span class="variable">pred</span> <span class="operator">=</span> tail;</span><br><span class="line">    <span class="keyword">if</span> (pred != <span class="literal">null</span>) &#123; <span class="comment">// 由于一开始 head 和 tail 都是 null，所以线程 2 直接就进 enq() 了</span></span><br><span class="line">        node.prev = pred;</span><br><span class="line">        <span class="keyword">if</span> (compareAndSetTail(pred, node)) &#123;</span><br><span class="line">            pred.next = node;</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    enq(node);</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Node <span class="title function_">enq</span><span class="params">(<span class="keyword">final</span> Node node)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">t</span> <span class="operator">=</span> tail;</span><br><span class="line">        <span class="keyword">if</span> (t == <span class="literal">null</span>) &#123; <span class="comment">// 线程 2 进来之后，肯定是要先走这里的，因为 head 和 tail 都是 null</span></span><br><span class="line">            <span class="keyword">if</span> (compareAndSetHead(<span class="keyword">new</span> <span class="title class_">Node</span>()))</span><br><span class="line">                tail = head; <span class="comment">// 这里就将 tail 直接等于 head 了，注意这里完了之后还没完，这里只是初始化过程</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            node.prev = t;</span><br><span class="line">            <span class="keyword">if</span> (compareAndSetTail(t, node)) &#123;</span><br><span class="line">                t.next = node;</span><br><span class="line">                <span class="keyword">return</span> t;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而碰巧不巧，这个时候线程 3 也来抢锁了</p><p>按照正常流程走到了<code>hasQueuedPredecessors()</code>方法，而在此方法中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AbstractQueuedSynchronizer</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">hasQueuedPredecessors</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Node</span> <span class="variable">t</span> <span class="operator">=</span> tail;</span><br><span class="line">    <span class="type">Node</span> <span class="variable">h</span> <span class="operator">=</span> head;</span><br><span class="line">    Node s;</span><br><span class="line">  <span class="comment">// 这里直接判断 h != t，而此时线程 2 才刚刚执行完 tail = head，所以直接就返回 false 了</span></span><br><span class="line">    <span class="keyword">return</span> h != t &amp;&amp;</span><br><span class="line">        ((s = h.next) == <span class="literal">null</span> || s.thread != Thread.currentThread());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因此，线程 3 这时就紧接着准备开始 CAS 操作了。又碰巧，这时线程 1 释放锁了</p><p>现在的情况就是，线程 3 直接开始 CAS 判断，而线程 2 还在插入节点状态</p><p>结果可想而知，居然是线程 3 先拿到了锁，这显然是违背了公平锁的公平机制</p><p><img src="/../images/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/13%20JavaJUC%20%E5%A4%9A%E7%BA%BF%E7%A8%8B-12.jpg"></p><p>因此公不公平全看<code>hasQueuedPredecessors()</code>，而此方法只有在等待队列中存在节点时才能保证不会出现问题</p><p>所以公平锁，只有在等待队列存在节点时，才是真正公平的</p><h3 id="Condition-实现原理"><a href="#Condition-实现原理" class="headerlink" title="Condition 实现原理"></a>Condition 实现原理</h3><p>在<code>AQS</code>中，<code>Condition</code>有一个实现类<code>ConditionObject</code>，而这里也是使用了链表实现了条件队列：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ConditionObject</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConditionObject</span> <span class="keyword">implements</span> <span class="title class_">Condition</span>, java.io.Serializable &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1173984872572414699L</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> Node firstWaiter; <span class="comment">// 条件队列的头结点</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> Node lastWaiter; <span class="comment">// 条件队列的尾结点</span></span><br><span class="line">  </span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里是直接使用了<code>AQS</code>中的<code>Node</code>类，但是使用的是<code>Node</code>类中的<code>nextWaiter</code>字段连接节点，并且<code>Node</code>的<code>status</code>为<code>CONDITION</code>：</p><p><img src="/../images/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/13%20JavaJUC%20%E5%A4%9A%E7%BA%BF%E7%A8%8B-13.jpg"></p><p>当一个线程调用<code>await()</code>方法时，会进入等待状态，直到其他线程调用<code>signal()</code>方法将其唤醒</p><p>而这里的条件队列，正是用于存储这些处于<strong>等待状态</strong>的线程</p><p><code>await()</code>方法的目标：</p><ul><li>只有已经持有锁的线程才可以使用此方法</li><li>当调用此方法后，会直接释放锁，无论加了多少次锁</li><li>只有其他线程调用<code>signal()</code>或是被中断时才会唤醒等待中的线程</li><li>被唤醒后，需要等待其他线程释放锁，拿到锁之后才可以继续执行，并且会恢复到之前的状态</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AbstractQueuedSynchronizer</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">await</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="keyword">if</span> (Thread.interrupted()) </span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InterruptedException</span>(); <span class="comment">// 如果在调用 await 之前就被添加了中断标记，那么会直接抛出中断异常</span></span><br><span class="line">    <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> addConditionWaiter(); <span class="comment">// 为当前线程创建一个新的节点，并将其加入到条件队列中</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">savedState</span> <span class="operator">=</span> fullyRelease(node); <span class="comment">// 完全释放当前线程持有的锁，并且保存一下 state 值，因为唤醒之后还得恢复</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">interruptMode</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">// 用于保存中断状态</span></span><br><span class="line">    <span class="keyword">while</span> (!isOnSyncQueue(node)) &#123; <span class="comment">// 循环判断是否位于同步队列中，如果等待状态下的线程被其他线程唤醒，那么会正常进入到 AQS 的等待队列中</span></span><br><span class="line">        LockSupport.park(<span class="built_in">this</span>); <span class="comment">// 如果依然处于等待状态，那么继续挂起</span></span><br><span class="line">        <span class="keyword">if</span> ((interruptMode = checkInterruptWhileWaiting(node)) != <span class="number">0</span>) <span class="comment">// 看看等待的时候是不是被中断了</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 出了循环之后，那线程肯定是已经醒了，这时就差拿到锁就可以恢复运行了</span></span><br><span class="line">    <span class="keyword">if</span> (acquireQueued(node, savedState) &amp;&amp; interruptMode != THROW_IE) <span class="comment">// 直接开始 acquireQueued 尝试拿锁（之前已经讲过了）从这里开始基本就和一个线程去抢锁是一样的了</span></span><br><span class="line">        interruptMode = REINTERRUPT;</span><br><span class="line">    <span class="comment">// 已经拿到锁了，基本可以开始继续运行了，这里再进行一下后期清理工作</span></span><br><span class="line">    <span class="keyword">if</span> (node.nextWaiter != <span class="literal">null</span>) </span><br><span class="line">        unlinkCancelledWaiters(); <span class="comment">// 将等待队列中，不是 Node.CONDITION 状态的节点移除</span></span><br><span class="line">    <span class="keyword">if</span> (interruptMode != <span class="number">0</span>) <span class="comment">// 依然是响应中断</span></span><br><span class="line">        reportInterruptAfterWait(interruptMode);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>signal()</code>方法的目标：</p><ul><li>只有持有锁的线程才能唤醒锁所属的<code>Condition</code>等待的线程</li><li>优先唤醒条件队列中的第一个，如果唤醒过程中出现问题，接着找往下找，直到找到一个可以唤醒的</li><li>唤醒操作本质上是将条件队列中的结点直接丢进<code>AQS</code>等待队列中，让其参与到锁的竞争中</li><li>拿到锁之后，线程才能恢复运行</li></ul><p><img src="/../images/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/13%20JavaJUC%20%E5%A4%9A%E7%BA%BF%E7%A8%8B-14.jpg">           </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AbstractQueuedSynchronizer</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">signal</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!isHeldExclusively()) <span class="comment">// 先看看当前线程是不是持有锁的状态</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalMonitorStateException</span>();</span><br><span class="line">    <span class="type">Node</span> <span class="variable">first</span> <span class="operator">=</span> firstWaiter; <span class="comment">// 获取条件队列的第一个结点</span></span><br><span class="line">    <span class="keyword">if</span> (first != <span class="literal">null</span>) <span class="comment">// 如果队列不为空，获取到了，那么就可以开始唤醒操作</span></span><br><span class="line">        doSignal(first); <span class="comment">// 执行唤醒操作</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AbstractQueuedSynchronizer</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">doSignal</span><span class="params">(Node first)</span> &#123; <span class="comment">// 定义 doSignal 方法，处理条件队列中的信号</span></span><br><span class="line">    <span class="keyword">do</span> &#123; <span class="comment">// 开始循环，处理队列中的节点</span></span><br><span class="line">        <span class="keyword">if</span> ( (firstWaiter = first.nextWaiter) == <span class="literal">null</span>) <span class="comment">// 如果当前节点在本轮循环没有后继节点了，条件队列就为空了</span></span><br><span class="line">            lastWaiter = <span class="literal">null</span>; <span class="comment">// 所以这里相当于是直接清空</span></span><br><span class="line">        first.nextWaiter = <span class="literal">null</span>; <span class="comment">// 将给定节点的下一个结点设置为 null，因为当前结点马上就会离开条件队列了</span></span><br><span class="line">    &#125; <span class="keyword">while</span> (!transferForSignal(first) &amp;&amp;</span><br><span class="line">             (first = firstWaiter) != <span class="literal">null</span>); <span class="comment">// 能走到这里只能说明给定节点被设定为了取消状态，那就继续看下一个结点</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AbstractQueuedSynchronizer</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">transferForSignal</span><span class="params">(Node node)</span> &#123; <span class="comment">// 定义 transferForSignal 方法，用于处理节点的信号传递</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!compareAndSetWaitStatus(node, Node.CONDITION, <span class="number">0</span>)) <span class="comment">// 如果 CAS 操作失败，表示节点的等待状态已经被取消，返回 false</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// CAS 成功之后，节点的等待状态变成默认值 0，接着通过 enq 方法将节点丢进 AQS 的等待队列，相当于唤醒并等待获取锁</span></span><br><span class="line">    <span class="type">Node</span> <span class="variable">p</span> <span class="operator">=</span> enq(node); <span class="comment">// 将节点加入到 AQS 的等待队列，返回队尾的前驱节点</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">ws</span> <span class="operator">=</span> p.waitStatus; <span class="comment">// 保存前驱节点的等待状态</span></span><br><span class="line">    <span class="comment">// 如果上一个节点的状态为取消，或者尝试设置上一个节点的状态为 SIGNAL 失败（可能是在 ws &gt; 0 判断完之后马上变成取消状态，导致 CAS 失败）</span></span><br><span class="line">    <span class="keyword">if</span> (ws &gt; <span class="number">0</span> || !compareAndSetWaitStatus(p, ws, Node.SIGNAL)) <span class="comment">// 如果前驱节点的等待状态为取消，或者 CAS 操作失败</span></span><br><span class="line">        LockSupport.unpark(node.thread); <span class="comment">// 直接唤醒当前节点对应的线程</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// 返回 true，表示节点成功传递了信号</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/../images/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/13%20JavaJUC%20%E5%A4%9A%E7%BA%BF%E7%A8%8B-15.jpg"></p><h2 id="自行实现锁类"><a href="#自行实现锁类" class="headerlink" title="自行实现锁类"></a>自行实现锁类</h2><p>要求：同一时间只能有一个线程持有锁，不要求可重入（反复加锁无视即可）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyLock</span> <span class="keyword">implements</span> <span class="title class_">Lock</span> &#123; <span class="comment">// 自行实现一个最普通的独占锁</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 设计思路：</span></span><br><span class="line"><span class="comment">         * 1. 锁被占用，那么 exclusiveOwnerThread 应该被记录，并且 state = 1</span></span><br><span class="line"><span class="comment">         * 2. 锁没有被占用，那么 exclusiveOwnerThread 为 null，并且 state = 0</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Sync</span> <span class="keyword">extends</span> <span class="title class_">AbstractQueuedSynchronizer</span> &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">tryAcquire</span><span class="params">(<span class="type">int</span> arg)</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(isHeldExclusively()) <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// 无需可重入功能，如果是当前线程直接返回 true</span></span><br><span class="line">                <span class="keyword">if</span>(compareAndSetState(<span class="number">0</span>, arg)) &#123; <span class="comment">// CAS 操作进行状态替换</span></span><br><span class="line">                    setExclusiveOwnerThread(Thread.currentThread()); <span class="comment">// 成功后设置当前的所有者线程</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">tryRelease</span><span class="params">(<span class="type">int</span> arg)</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(getState() == <span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalMonitorStateException</span>(); <span class="comment">// 没加锁情况下是不能直接解锁的</span></span><br><span class="line">                <span class="keyword">if</span>(isHeldExclusively()) &#123; <span class="comment">// 只有持有锁的线程才能解锁</span></span><br><span class="line">                    setExclusiveOwnerThread(<span class="literal">null</span>); <span class="comment">// 设置所有者线程为 null</span></span><br><span class="line">                    setState(<span class="number">0</span>); <span class="comment">// 状态变为 0</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">isHeldExclusively</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> getExclusiveOwnerThread() == Thread.currentThread();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">protected</span> Condition <span class="title function_">newCondition</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ConditionObject</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Sync</span> <span class="variable">sync</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Sync</span>();</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">lock</span><span class="params">()</span> &#123;</span><br><span class="line">            sync.acquire(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">lockInterruptibly</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">            sync.acquireInterruptibly(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> sync.tryAcquire(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">(<span class="type">long</span> time, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">            <span class="keyword">return</span> sync.tryAcquireNanos(<span class="number">1</span>, unit.toNanos(time));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unlock</span><span class="params">()</span> &#123;</span><br><span class="line">            sync.release(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Condition <span class="title function_">newCondition</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> sync.newCondition();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="原子类"><a href="#原子类" class="headerlink" title="原子类"></a>原子类</h1><h3 id="基本数据类"><a href="#基本数据类" class="headerlink" title="基本数据类"></a>基本数据类</h3><h4 id="AtomicInteger"><a href="#AtomicInteger" class="headerlink" title="AtomicInteger"></a>AtomicInteger</h4><p>原子更新<code>int</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">AtomicInteger</span> <span class="variable">i</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(值)</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">i.get() <span class="comment">// 获取当前值</span></span><br><span class="line">i.set(<span class="type">int</span> newValue) <span class="comment">// 设置为指定的新值</span></span><br><span class="line"></span><br><span class="line">i.getAndSet(<span class="type">int</span> newValue) <span class="comment">// 获取当前值并将其更新为新值，返回旧值</span></span><br><span class="line">i.compareAndSet(<span class="type">int</span> expect, <span class="type">int</span> update) <span class="comment">// 如果当前值等于预期值，则将其更新为新值</span></span><br><span class="line">i.getAndIncrement() <span class="comment">// 获取当前值并递增</span></span><br><span class="line">i.incrementAndGet() <span class="comment">// 将当前值递增并返回更新后的新值</span></span><br><span class="line">i.getAndDecrement() <span class="comment">// 获取当前值并递减</span></span><br><span class="line">i.decrementAndGet() <span class="comment">// 将当前值递减并返回更新后的新值</span></span><br><span class="line">i.addAndGet(<span class="type">int</span> delta) <span class="comment">// 将当前值增加指定的值并返回新值</span></span><br><span class="line">i.getAndAdd(<span class="type">int</span> delta) <span class="comment">// 获取当前值并将指定的值加到当前值，返回旧值</span></span><br><span class="line"></span><br><span class="line">i.toString() <span class="comment">// 获取当前值的字符串表示</span></span><br><span class="line">i.intValue() <span class="comment">// 返回当前值的普通 int 类型</span></span><br><span class="line">i.longValue() <span class="comment">// 返回当前值的 long 类型</span></span><br><span class="line">i.floatValue() <span class="comment">// 返回当前值的 float 类型</span></span><br><span class="line">i.doubleValue() <span class="comment">// 返回当前值的 double 类型</span></span><br><span class="line">i.weakCompareAndSet(<span class="type">int</span> expect, <span class="type">int</span> update) <span class="comment">// 与 compareAndSet 类似，但使用弱一致性</span></span><br></pre></td></tr></table></figure><h4 id="AtomicLong"><a href="#AtomicLong" class="headerlink" title="AtomicLong"></a>AtomicLong</h4><p>原子更新<code>long</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">AtomicLong</span> <span class="variable">i</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicLong</span>(值)</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">i.get() <span class="comment">// 获取当前值</span></span><br><span class="line">i.set(<span class="type">long</span> newValue) <span class="comment">// 设置为指定的新值</span></span><br><span class="line"></span><br><span class="line">i.getAndSet(<span class="type">long</span> newValue) <span class="comment">// 获取当前值并将其更新为新值，返回旧值</span></span><br><span class="line">i.compareAndSet(<span class="type">long</span> expect, <span class="type">long</span> update) <span class="comment">// 如果当前值等于预期值，则将其更新为新值</span></span><br><span class="line">i.getAndIncrement() <span class="comment">// 获取当前值并递增</span></span><br><span class="line">i.incrementAndGet() <span class="comment">// 将当前值递增并返回更新后的新值</span></span><br><span class="line">i.getAndDecrement() <span class="comment">// 获取当前值并递减</span></span><br><span class="line">i.decrementAndGet() <span class="comment">// 将当前值递减并返回更新后的新值</span></span><br><span class="line">i.addAndGet(<span class="type">long</span> delta) <span class="comment">// 将当前值增加指定的值并返回新值</span></span><br><span class="line">i.getAndAdd(<span class="type">long</span> delta) <span class="comment">// 获取当前值并将指定的值加到当前值，返回旧值</span></span><br><span class="line"></span><br><span class="line">i.toString() <span class="comment">// 获取当前值的字符串表示</span></span><br><span class="line">i.intValue() <span class="comment">// 返回当前值的普通 int 类型</span></span><br><span class="line">i.longValue() <span class="comment">// 返回当前值的 long 类型</span></span><br><span class="line">i.floatValue() <span class="comment">// 返回当前值的 float 类型</span></span><br><span class="line">i.doubleValue() <span class="comment">// 返回当前值的 double 类型</span></span><br><span class="line">i.weakCompareAndSet(<span class="type">long</span> expect, <span class="type">long</span> update) <span class="comment">// 与 compareAndSet 类似，但使用弱一致性</span></span><br></pre></td></tr></table></figure><h4 id="AtomicBoolean"><a href="#AtomicBoolean" class="headerlink" title="AtomicBoolean"></a>AtomicBoolean</h4><p>原子更新<code>boolean</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">AtomicBoolean</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicBoolean</span>(<span class="literal">true</span>)</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">b.get() <span class="comment">// 获取当前值</span></span><br><span class="line">b.set(<span class="type">boolean</span> newValue) <span class="comment">// 设置为指定的新值</span></span><br><span class="line"></span><br><span class="line">b.getAndSet(<span class="type">boolean</span> newValue) <span class="comment">// 获取当前值并将其更新为新值，返回旧值</span></span><br><span class="line">b.compareAndSet(<span class="type">boolean</span> expect, <span class="type">boolean</span> update) <span class="comment">// 如果当前值等于预期值，则将其更新为新值</span></span><br><span class="line">b.toString() <span class="comment">// 获取当前值的字符串表示</span></span><br></pre></td></tr></table></figure><h3 id="数组类"><a href="#数组类" class="headerlink" title="数组类"></a>数组类</h3><h4 id="AtomicIntegerArray"><a href="#AtomicIntegerArray" class="headerlink" title="AtomicIntegerArray"></a>AtomicIntegerArray</h4><p>原子更新<code>int</code>数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">AtomicIntegerArray</span> <span class="variable">arr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicIntegerArray</span>(数组)</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">arr.get(<span class="type">int</span> index) <span class="comment">// 获取指定索引的当前值</span></span><br><span class="line">arr.set(<span class="type">int</span> index, <span class="type">int</span> newValue) <span class="comment">// 设置指定索引的值为新值</span></span><br><span class="line">    </span><br><span class="line">arr.getAndSet(<span class="type">int</span> index, <span class="type">int</span> newValue) <span class="comment">// 获取指定索引的当前值并将其更新为新值，返回旧值</span></span><br><span class="line">arr.compareAndSet(<span class="type">int</span> index, <span class="type">int</span> expect, <span class="type">int</span> update) <span class="comment">// 如果指定索引的当前值等于预期值，则将其更新为新值</span></span><br><span class="line">arr.getAndIncrement(<span class="type">int</span> index) <span class="comment">// 获取指定索引的当前值并递增，返回旧值</span></span><br><span class="line">arr.incrementAndGet(<span class="type">int</span> index) <span class="comment">// 将指定索引的值递增并返回更新后的新值</span></span><br><span class="line">arr.getAndDecrement(<span class="type">int</span> index) <span class="comment">// 获取指定索引的当前值并递减，返回旧值</span></span><br><span class="line">arr.decrementAndGet(<span class="type">int</span> index) <span class="comment">// 将指定索引的值递减并返回更新后的新值</span></span><br><span class="line">arr.addAndGet(<span class="type">int</span> index, <span class="type">int</span> delta) <span class="comment">// 将指定索引的值增加指定的增量并返回新值</span></span><br><span class="line">arr.getAndAdd(<span class="type">int</span> index, <span class="type">int</span> delta) <span class="comment">// 获取指定索引的当前值并将指定的增量加到当前值，返回旧值</span></span><br><span class="line">    </span><br><span class="line">arr.length() <span class="comment">// 返回数组的长度</span></span><br><span class="line">arr.toString() <span class="comment">// 获取当前值的字符串表示</span></span><br><span class="line">arr.atomic(<span class="type">int</span> index) <span class="comment">// 获取指定索引的原子值（可以用来处理更多自定义操作）</span></span><br></pre></td></tr></table></figure><h4 id="AtomicLongArray"><a href="#AtomicLongArray" class="headerlink" title="AtomicLongArray"></a>AtomicLongArray</h4><p>原子更新<code>long</code>数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">AtomicLongArray</span> <span class="variable">arr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicLongArray</span>(数组)</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">arr.get(<span class="type">int</span> index) <span class="comment">// 获取指定索引的当前值</span></span><br><span class="line">arr.set(<span class="type">int</span> index, <span class="type">long</span> newValue) <span class="comment">// 设置指定索引的值为新值</span></span><br><span class="line"></span><br><span class="line">arr.getAndSet(<span class="type">int</span> index, <span class="type">long</span> newValue) <span class="comment">// 获取指定索引的当前值并将其更新为新值，返回旧值</span></span><br><span class="line">arr.compareAndSet(<span class="type">int</span> index, <span class="type">long</span> expect, <span class="type">long</span> update) <span class="comment">// 如果指定索引的当前值等于预期值，则将其更新为新值</span></span><br><span class="line">arr.getAndIncrement(<span class="type">int</span> index) <span class="comment">// 获取指定索引的当前值并递增，返回旧值</span></span><br><span class="line">arr.incrementAndGet(<span class="type">int</span> index) <span class="comment">// 将指定索引的值递增并返回更新后的新值</span></span><br><span class="line">arr.getAndDecrement(<span class="type">int</span> index) <span class="comment">// 获取指定索引的当前值并递减，返回旧值</span></span><br><span class="line">arr.decrementAndGet(<span class="type">int</span> index) <span class="comment">// 将指定索引的值递减并返回更新后的新值</span></span><br><span class="line">arr.addAndGet(<span class="type">int</span> index, <span class="type">long</span> delta) <span class="comment">// 将指定索引的值增加指定的增量并返回新值</span></span><br><span class="line">arr.getAndAdd(<span class="type">int</span> index, <span class="type">long</span> delta) <span class="comment">// 获取指定索引的当前值并将指定的增量加到当前值，返回旧值</span></span><br><span class="line"></span><br><span class="line">arr.length() <span class="comment">// 返回数组的长度</span></span><br><span class="line">arr.toString() <span class="comment">// 获取当前数组值的字符串表示</span></span><br><span class="line">arr.atomic(<span class="type">int</span> index) <span class="comment">// 获取指定索引的原子值（用于处理更复杂的操作）</span></span><br><span class="line">arr.longValue() <span class="comment">// 返回指定索引的值的 long 类型</span></span><br><span class="line">arr.intValue() <span class="comment">// 返回指定索引的值的 int 类型</span></span><br><span class="line">arr.floatValue() <span class="comment">// 返回指定索引的值的 float 类型</span></span><br><span class="line">arr.doubleValue() <span class="comment">// 返回指定索引的值的 double 类型</span></span><br></pre></td></tr></table></figure><h4 id="AtomicReferenceArray"><a href="#AtomicReferenceArray" class="headerlink" title="AtomicReferenceArray"></a>AtomicReferenceArray</h4><p>原子更新引用数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">AtomicReferenceArray</span> <span class="variable">arr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicReferenceArray</span>(数组)</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">arr.get(<span class="type">int</span> index) <span class="comment">// 获取指定索引的当前值</span></span><br><span class="line">arr.set(<span class="type">int</span> index, V newValue) <span class="comment">// 设置指定索引的值为新值</span></span><br><span class="line"></span><br><span class="line">arr.getAndSet(<span class="type">int</span> index, V newValue) <span class="comment">// 获取指定索引的当前值并将其更新为新值，返回旧值</span></span><br><span class="line">arr.compareAndSet(<span class="type">int</span> index, V expect, V update) <span class="comment">// 如果指定索引的当前值等于预期值，则将其更新为新值</span></span><br><span class="line">arr.lazySet(<span class="type">int</span> index, V newValue) <span class="comment">// 延迟设置指定索引的值，可能不会立即生效</span></span><br><span class="line">arr.length() <span class="comment">// 返回数组的长度</span></span><br><span class="line">arr.toString() <span class="comment">// 获取当前数组值的字符串表示</span></span><br><span class="line">arr.getReference(<span class="type">int</span> index) <span class="comment">// 获取指定索引的引用值（在某些实现中可能为其他操作）</span></span><br><span class="line">arr.getAndUpdate(<span class="type">int</span> index, UnaryOperator&lt;V&gt; updateFunction) <span class="comment">// 使用给定的更新函数更新并返回旧值</span></span><br><span class="line">arr.updateAndGet(<span class="type">int</span> index, UnaryOperator&lt;V&gt; updateFunction) <span class="comment">// 使用给定的更新函数更新并返回新值</span></span><br><span class="line">arr.getAndAccumulate(<span class="type">int</span> index, V delta, BinaryOperator&lt;V&gt; accumulator) <span class="comment">// 使用给定的累加器函数更新值，并返回旧值</span></span><br><span class="line">arr.accumulateAndGet(<span class="type">int</span> index, V delta, BinaryOperator&lt;V&gt; accumulator) <span class="comment">// 使用给定的累加器函数更新值，并返回新值</span></span><br><span class="line">    </span><br><span class="line">arr.intValue(<span class="type">int</span> index) <span class="comment">// 返回指定索引的值的 int 类型</span></span><br><span class="line">arr.longValue(<span class="type">int</span> index) <span class="comment">// 返回指定索引的值的 long 类型</span></span><br><span class="line">arr.floatValue(<span class="type">int</span> index) <span class="comment">// 返回指定索引的值的 float 类型</span></span><br><span class="line">arr.doubleValue(<span class="type">int</span> index) <span class="comment">// 返回指定索引的值的 double 类型</span></span><br></pre></td></tr></table></figure><h3 id="ABA-问题及解决方案"><a href="#ABA-问题及解决方案" class="headerlink" title="ABA 问题及解决方案"></a>ABA 问题及解决方案</h3><p><strong>问题引入</strong>：</p><p><img src="/../images/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/13%20JavaJUC%20%E5%A4%9A%E7%BA%BF%E7%A8%8B-16.jpg"></p><p>线程 1 和线程 2 同时开始对<code>a</code>的值进行 CAS 修改</p><p>但是线程 1 的速度比较快，将<code>a</code>的值修改为<code>2</code>之后紧接着又修改回<code>1</code></p><p>这时线程2才开始进行判断，发现<code>a</code>的值是<code>1</code>，所以 CAS 操作成功</p><p>很明显，这里的<code>1</code>已经不是一开始的那个<code>1</code>了，而是被重新赋值的<code>1</code>，这也是 CAS 操作存在的问题</p><p>它只会机械地比较当前值是不是预期值，但是并不会关心当前值是否被修改过，这种问题称之为 <strong>ABA 问题</strong></p><p><strong>解决方案</strong>：</p><p>JUC 提供了带版本号的引用类型，只要每次操作都记录一下版本号，并且版本号不会重复，那么就可以解决 ABA 问题了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">b</span> <span class="operator">=</span> <span class="string">&quot;World&quot;</span>;</span><br><span class="line">    AtomicStampedReference&lt;String&gt; reference = <span class="keyword">new</span> <span class="title class_">AtomicStampedReference</span>&lt;&gt;(a, <span class="number">1</span>); <span class="comment">// 在构造时需要指定初始值和对应的版本号</span></span><br><span class="line">    reference.attemptStamp(a, <span class="number">2</span>); <span class="comment">// 可以中途对版本号进行修改，注意要填写当前的引用对象</span></span><br><span class="line">    System.out.println(reference.compareAndSet(a, b, <span class="number">2</span>, <span class="number">3</span>)); <span class="comment">// CAS 操作时不仅需要提供预期值和修改值，还要提供预期版本号和新的版本号</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="并发容器"><a href="#并发容器" class="headerlink" title="并发容器"></a>并发容器</h1><h3 id="CopyOnWriteArrayList"><a href="#CopyOnWriteArrayList" class="headerlink" title="CopyOnWriteArrayList"></a>CopyOnWriteArrayList</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;T&gt; list = <span class="keyword">new</span> <span class="title class_">CopyOnWriteArrayList</span>&lt;&gt;()</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法同 ArrayList</span></span><br></pre></td></tr></table></figure><h3 id="ConcurrentHashMap"><a href="#ConcurrentHashMap" class="headerlink" title="ConcurrentHashMap"></a>ConcurrentHashMap</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;T, V&gt; map = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法同 HashMap</span></span><br></pre></td></tr></table></figure><h3 id="阻塞队列"><a href="#阻塞队列" class="headerlink" title="阻塞队列"></a>阻塞队列</h3><h4 id="ArrayBlockingQueue"><a href="#ArrayBlockingQueue" class="headerlink" title="ArrayBlockingQueue"></a>ArrayBlockingQueue</h4><ol><li><p><strong>固定大小</strong>：大小在创建时就必须指定，并且大小是固定的，它不会自动扩容</p></li><li><p><strong>阻塞操作</strong>：它支持阻塞式的插入和移除操作：</p><ul><li>当队列已满时，生产者线程会被阻塞，直到队列有空余位置</li><li>当队列为空时，消费者线程会被阻塞，直到队列中有元素可供消费</li></ul></li><li><p><strong>线程安全</strong>：内部通过使用锁确保多线程的安全性。在多个线程之间对队列进行插入、删除等操作时，它能避免数据不一致的问题</p></li><li><p><strong>公平性</strong>：可以选择公平性策略</p><p>​    如果使用公平锁，会按照线程请求的顺序处理队列操作，防止线程饥饿</p><p>​否则，线程的执行顺序是无序的</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Queue&lt;T&gt; q = <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>(<span class="type">int</span> capacity) <span class="comment">// 创建一个指定容量的队列，默认不使用公平性</span></span><br><span class="line">Queue&lt;T&gt; q = <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>(<span class="type">int</span> capacity, <span class="type">boolean</span> fair) <span class="comment">// 创建一个指定容量的队列，并指定是否使用公平性</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">q.add(E e) <span class="comment">// 插入元素 e，如果队列已满则抛出 IllegalStateException</span></span><br><span class="line">q.offer(E e) <span class="comment">// 插入元素 e，如果队列已满返回 false（非阻塞）</span></span><br><span class="line">q.offer(E e, <span class="type">long</span> timeout, TimeUnit unit) <span class="comment">// 尝试在指定时间内插入元素 e，如果队列已满则阻塞指定时间</span></span><br><span class="line">q.put(E e) <span class="comment">// 插入元素 e，如果队列已满则阻塞，直到有空间</span></span><br><span class="line">q.take() <span class="comment">// 移除并返回队头元素，如果队列为空则阻塞</span></span><br><span class="line">q.poll(<span class="type">long</span> timeout, TimeUnit unit) <span class="comment">// 尝试移除并返回队头元素，如果队列为空则阻塞指定时间</span></span><br><span class="line">q.poll() <span class="comment">// 移除并返回队头元素，如果队列为空则返回 null（非阻塞）</span></span><br><span class="line">q.peek() <span class="comment">// 返回队头元素，但不移除，如果队列为空返回 null</span></span><br><span class="line">q.remove() <span class="comment">// 移除队头元素，如果队列为空则抛出异常</span></span><br><span class="line">q.size() <span class="comment">// 返回队列当前元素的个数</span></span><br><span class="line">q.isEmpty() <span class="comment">// 判断队列是否为空</span></span><br><span class="line">q.isFull() <span class="comment">// 判断队列是否已满</span></span><br><span class="line">q.clear() <span class="comment">// 清空队列中的所有元素</span></span><br></pre></td></tr></table></figure><h4 id="SynchronousQueue"><a href="#SynchronousQueue" class="headerlink" title="SynchronousQueue"></a>SynchronousQueue</h4><ol><li><p><strong>零容量队列</strong>：它不存储任何元素。每个插入操作必须等待另一个线程的移除操作，反之亦然</p></li><li><p><strong>线程同步</strong>：它用于在两个线程之间进行数据交换</p><p>​    当一个线程插入元素时，它必须等待另一个线程将其取走</p><p>​同样，当一个线程试图取出元素时，它必须等待另一个线程插入元素</p></li><li><p><strong>不支持缓存</strong>：没有缓存功能，它不会缓存任何元素，因此每次插入和移除操作都必须在两个线程之间进行同步</p></li><li><p><strong>无容量</strong>：队列的容量为零，因此它是实现线程间交换的理想工具，常用于实现线程池任务的处理</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Queue&lt;T&gt; q = <span class="keyword">new</span> <span class="title class_">SynchronousQueue</span>() <span class="comment">// 创建一个新的空的 SynchronousQueue，默认是非公平的</span></span><br><span class="line">Queue&lt;T&gt; q = <span class="keyword">new</span> <span class="title class_">SynchronousQueue</span>(<span class="type">boolean</span> fair) <span class="comment">// 创建一个新的空的 SynchronousQueue，可以指定是否使用公平性策略</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">q.put(E e) <span class="comment">// 插入元素 e，如果队列为空则阻塞，直到另一个线程调用 take() 获取元素</span></span><br><span class="line">q.take() <span class="comment">// 移除并返回队头元素，如果队列为空则阻塞，直到另一个线程调用 put() 插入元素</span></span><br><span class="line">q.poll(<span class="type">long</span> timeout, TimeUnit unit) <span class="comment">// 尝试在指定时间内移除并返回队头元素，如果队列为空则阻塞指定时间</span></span><br><span class="line">q.poll() <span class="comment">// 尝试移除并返回队头元素，如果队列为空则返回 null（非阻塞）</span></span><br><span class="line">q.isEmpty() <span class="comment">// 判断队列是否为空</span></span><br><span class="line">q.size() <span class="comment">// 返回队列当前元素的数量，始终为 0 或 1</span></span><br><span class="line">q.clear() <span class="comment">// 清空队列中的所有元素（此方法通常不适用，因为队列中没有持久存储的元素）</span></span><br></pre></td></tr></table></figure><h4 id="LinkedBlockingQueue"><a href="#LinkedBlockingQueue" class="headerlink" title="LinkedBlockingQueue"></a>LinkedBlockingQueue</h4><ol><li><p><strong>有容量的阻塞队列</strong>：一个基于链表实现的阻塞队列，它可以选择指定容量，也可以使用默认的无界容量</p><p>​   通过容量控制线程之间的同步</p></li><li><p><strong>线程安全</strong>：可以在多个线程间安全地进行插入和移除操作</p></li><li><p><strong>支持阻塞操作</strong>：如果队列满了，插入操作会阻塞；如果队列空了，移除操作会阻塞</p></li><li><p><strong>适用于生产者-消费者模型</strong>：由于其线程安全和阻塞特性，它广泛用于生产者-消费者问题的解决方案，适合任务调度和线程池的实现</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Queue&lt;T&gt; q = <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>() <span class="comment">// 创建一个默认容量为 Integer.MAX_VALUE 的 LinkedBlockingQueue</span></span><br><span class="line">Queue&lt;T&gt; q = <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>(<span class="type">int</span> capacity) <span class="comment">// 创建一个指定容量的 LinkedBlockingQueue</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">q.put(E e) <span class="comment">// 插入元素 e，如果队列已满则阻塞，直到有空间可用</span></span><br><span class="line">q.take() <span class="comment">// 移除并返回队头元素，如果队列为空则阻塞，直到有元素可用</span></span><br><span class="line">q.offer(E e) <span class="comment">// 尝试插入元素 e，如果队列未满则返回 true，否则返回 false（非阻塞）</span></span><br><span class="line">q.offer(E e, <span class="type">long</span> timeout, TimeUnit unit) <span class="comment">// 尝试在指定时间内插入元素 e，如果队列未满则返回 true，否则返回 false（带超时）</span></span><br><span class="line">q.poll(<span class="type">long</span> timeout, TimeUnit unit) <span class="comment">// 尝试在指定时间内移除并返回队头元素，如果队列为空则阻塞指定时间</span></span><br><span class="line">q.poll() <span class="comment">// 尝试移除并返回队头元素，如果队列为空则返回 null（非阻塞）</span></span><br><span class="line">q.peek() <span class="comment">// 返回队头元素但不移除它，如果队列为空则返回 null</span></span><br><span class="line">q.isEmpty() <span class="comment">// 判断队列是否为空</span></span><br><span class="line">q.size() <span class="comment">// 返回队列当前元素的数量</span></span><br><span class="line">q.clear() <span class="comment">// 清空队列中的所有元素</span></span><br><span class="line">q.drainTo(Collection&lt;? <span class="built_in">super</span> E&gt; c) <span class="comment">// 移除队列中的所有元素并将其添加到给定的集合 c 中</span></span><br></pre></td></tr></table></figure><h4 id="PriorityBlockingQueue"><a href="#PriorityBlockingQueue" class="headerlink" title="PriorityBlockingQueue"></a>PriorityBlockingQueue</h4><ol><li><p><strong>优先级队列</strong>：一个支持优先级排序的阻塞队列，队列中的元素根据其优先级进行排序，优先级高的元素会先被移除</p><p>​   默认使用元素的自然顺序，或者可以通过提供自定义的比较器来控制排序</p></li><li><p><strong>线程安全</strong>：可以在多个线程中安全地进行插入和移除操作</p></li><li><p><strong>无界队列</strong>：它是一个无界队列，即队列的容量仅受系统可用内存的限制，不会因为达到容量限制而阻塞插入操作</p><p>​    插入操作会继续，直到内存不足</p></li><li><p><strong>阻塞操作</strong>：尽管它是无界的，它仍然可以进行阻塞操作。当调用 <code>take()</code> 时，如果队列为空，它会阻塞直到有元素可用</p></li><li><p><strong>适用场景</strong>：常用于处理具有优先级的任务调度、事件处理等场景</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Queue&lt;T&gt; q = <span class="keyword">new</span> <span class="title class_">PriorityBlockingQueue</span>() <span class="comment">// 创建一个无界的 PriorityBlockingQueue，默认按照元素的自然顺序进行排序</span></span><br><span class="line">Queue&lt;T&gt; q = <span class="keyword">new</span> <span class="title class_">PriorityBlockingQueue</span>(<span class="type">int</span> initialCapacity) <span class="comment">// 创建一个具有指定初始容量的无界 PriorityBlockingQueue</span></span><br><span class="line">Queue&lt;T&gt; q = <span class="keyword">new</span> <span class="title class_">PriorityBlockingQueue</span>(<span class="type">int</span> initialCapacity, <span class="type">int</span> capacity, Comparator&lt;? <span class="built_in">super</span> E&gt; comparator) <span class="comment">// 创建一个具有指定初始容量和自定义排序规则的无界 PriorityBlockingQueue</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">q.put(E e) <span class="comment">// 插入元素 e，如果队列已满则阻塞，直到有空间可用（无界队列一般不会阻塞插入）</span></span><br><span class="line">q.take() <span class="comment">// 移除并返回队头元素（优先级最高的元素），如果队列为空则阻塞，直到有元素可用</span></span><br><span class="line">q.offer(E e) <span class="comment">// 尝试插入元素 e，如果队列未满则返回 true，否则返回 false（非阻塞）</span></span><br><span class="line">q.offer(E e, <span class="type">long</span> timeout, TimeUnit unit) <span class="comment">// 尝试在指定时间内插入元素 e，如果队列未满则返回 true，否则返回 false（带超时）</span></span><br><span class="line">q.poll(<span class="type">long</span> timeout, TimeUnit unit) <span class="comment">// 尝试在指定时间内移除并返回队头元素，如果队列为空则阻塞指定时间</span></span><br><span class="line">q.poll() <span class="comment">// 尝试移除并返回队头元素（优先级最高的元素），如果队列为空则返回 null（非阻塞）</span></span><br><span class="line">q.peek() <span class="comment">// 返回队头元素但不移除它，如果队列为空则返回 null</span></span><br><span class="line">q.isEmpty() <span class="comment">// 判断队列是否为空</span></span><br><span class="line">q.size() <span class="comment">// 返回队列当前元素的数量</span></span><br><span class="line">q.clear() <span class="comment">// 清空队列中的所有元素</span></span><br><span class="line">q.drainTo(Collection&lt;? <span class="built_in">super</span> E&gt; c) <span class="comment">// 移除队列中的所有元素并将其添加到给定的集合 c 中</span></span><br></pre></td></tr></table></figure><h4 id="DelayQueue"><a href="#DelayQueue" class="headerlink" title="DelayQueue"></a>DelayQueue</h4><p><strong>延迟队列</strong>：其元素只能在指定的延迟时间到期后才能被取出，队列中的每个元素都需要实现 <code>Delayed</code> 接口，并指定一个延迟时间。</p><p><strong>阻塞操作</strong>：它是一个线程安全的阻塞队列</p><p>​当尝试取出队列中的元素时，如果元素尚未到期，调用者会被阻塞，直到有元素到期或者队列为空</p><p><strong>无界队列</strong>：可以不断插入元素，队列的容量仅受限于系统内存。当元素没有到期时，不会被移除，直到到期时间达到</p><p><strong>适用场景</strong>：适用于任务调度和延时事件处理的场景，例如处理定时任务或处理延迟消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Queue&lt;T&gt; q = <span class="keyword">new</span> <span class="title class_">DelayQueue</span>() <span class="comment">// 创建一个新的无界 DelayQueue，队列元素按延迟时间进行排序</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">q.put(E e) <span class="comment">// 将元素 e 插入队列，元素的延迟时间由 e 的 `getDelay()` 方法指定</span></span><br><span class="line">q.take() <span class="comment">// 移除并返回队头元素，只有当队头元素的延迟时间已到时才会返回，如果队列为空或元素尚未到期，则阻塞</span></span><br><span class="line">q.poll(<span class="type">long</span> timeout, TimeUnit unit) <span class="comment">// 尝试在指定时间内移除并返回队头元素，如果队列为空或队头元素尚未到期则阻塞指定时间</span></span><br><span class="line">q.poll() <span class="comment">// 尝试移除并返回队头元素，如果队列为空或队头元素尚未到期则返回 null（非阻塞）</span></span><br><span class="line">q.peek() <span class="comment">// 返回队头元素但不移除它，如果队列为空或队头元素尚未到期则返回 null</span></span><br><span class="line">q.isEmpty() <span class="comment">// 判断队列是否为空</span></span><br><span class="line">q.size() <span class="comment">// 返回队列当前元素的数量</span></span><br><span class="line">q.clear() <span class="comment">// 清空队列中的所有元素</span></span><br></pre></td></tr></table></figure><h1 id="并发工具"><a href="#并发工具" class="headerlink" title="并发工具"></a>并发工具</h1><h3 id="计数器锁-CountDownLatch"><a href="#计数器锁-CountDownLatch" class="headerlink" title="计数器锁 CountDownLatch"></a>计数器锁 CountDownLatch</h3><blockquote><p>允许一个或多个线程，直到其他线程都完成工作后，才会继续执行</p></blockquote><p><strong>需求</strong>：</p><ul><li>有<code>20</code>个计算任务，需要先将这些任务的结果全部计算出来，每个任务的执行时间未知</li><li>当所有任务结束之后，立即整合统计最终结果</li></ul><p><strong>示例</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">CountDownLatch</span> <span class="variable">latch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(<span class="number">20</span>); <span class="comment">// 创建一个初始值为 20 的计数器锁</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">finalI</span> <span class="operator">=</span> i;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep((<span class="type">long</span>) (<span class="number">2000</span> * <span class="keyword">new</span> <span class="title class_">Random</span>().nextDouble()));</span><br><span class="line">                    System.out.println(<span class="string">&quot;子任务&quot;</span> + finalI + <span class="string">&quot;执行完成！&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                latch.countDown(); <span class="comment">// 每执行一次计数器都会 -1</span></span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        latch.await(); <span class="comment">// 开始等待所有的线程完成，当计数器为0时，恢复运行</span></span><br><span class="line">        System.out.println(<span class="string">&quot;所有子任务都完成！！！&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 注意这个计数器只能使用一次，用完只能重新创一个，没有重置的说法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">子任务11执行完成！</span><br><span class="line">子任务5执行完成！</span><br><span class="line">子任务14执行完成！</span><br><span class="line">子任务17执行完成！</span><br><span class="line">子任务4执行完成！</span><br><span class="line">子任务8执行完成！</span><br><span class="line">子任务7执行完成！</span><br><span class="line">子任务9执行完成！</span><br><span class="line">子任务2执行完成！</span><br><span class="line">子任务19执行完成！</span><br><span class="line">子任务1执行完成！</span><br><span class="line">子任务15执行完成！</span><br><span class="line">子任务18执行完成！</span><br><span class="line">子任务12执行完成！</span><br><span class="line">子任务6执行完成！</span><br><span class="line">子任务0执行完成！</span><br><span class="line">子任务10执行完成！</span><br><span class="line">子任务16执行完成！</span><br><span class="line">子任务3执行完成！</span><br><span class="line">子任务13执行完成！</span><br><span class="line">所有子任务都完成！！！</span><br><span class="line"></span><br><span class="line">进程已结束，退出代码为 0</span><br></pre></td></tr></table></figure><h3 id="循环屏障-CyclicBarrier"><a href="#循环屏障-CyclicBarrier" class="headerlink" title="循环屏障 CyclicBarrier"></a>循环屏障 CyclicBarrier</h3><blockquote><p>允许一组线程互相等待，直到所有线程都到达某个公共的同步点后，才会继续执行</p></blockquote><p><strong>需求</strong>：</p><p>假如现在游戏房间为空，但是游戏开始需要<code>5</code>人</p><p>所以必须集齐<code>5</code>人到来之后才能开始游戏，并且保证游戏开始时所有玩家都是同时进入</p><p><strong>示例</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">CyclicBarrier</span> <span class="variable">barrier</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CyclicBarrier</span>(<span class="number">5</span>, <span class="comment">// 创建一个初始值为 5 的循环屏障</span></span><br><span class="line">                () -&gt; System.out.println(<span class="string">&quot;飞机马上就要起飞了，各位特种兵请准备！&quot;</span>)); <span class="comment">// 人等够之后执行的任务</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">finalI</span> <span class="operator">=</span> i;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep((<span class="type">long</span>) (<span class="number">2000</span> * <span class="keyword">new</span> <span class="title class_">Random</span>().nextDouble()));</span><br><span class="line">                    System.out.println(<span class="string">&quot;玩家 &quot;</span> + finalI + <span class="string">&quot; 进入房间进行等待... (&quot;</span> + (barrier.getNumberWaiting() + <span class="number">1</span>) + <span class="string">&quot; / 10 )&quot;</span>);</span><br><span class="line">                    barrier.await(); <span class="comment">// 调用 await 方法进行等待，直到等待的线程足够多为止（可循环）</span></span><br><span class="line">                    System.out.println(<span class="string">&quot;玩家 &quot;</span> + finalI + <span class="string">&quot; 进入游戏！&quot;</span>); <span class="comment">// 开始游戏</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException | BrokenBarrierException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">玩家 4 进入房间进行等待... (1 / 10 )</span><br><span class="line">玩家 9 进入房间进行等待... (2 / 10 )</span><br><span class="line">玩家 5 进入房间进行等待... (3 / 10 )</span><br><span class="line">玩家 3 进入房间进行等待... (4 / 10 )</span><br><span class="line">玩家 2 进入房间进行等待... (5 / 10 )</span><br><span class="line">飞机马上就要起飞了，各位特种兵请准备！</span><br><span class="line">玩家 2 进入游戏！</span><br><span class="line">玩家 5 进入游戏！</span><br><span class="line">玩家 3 进入游戏！</span><br><span class="line">玩家 9 进入游戏！</span><br><span class="line">玩家 4 进入游戏！</span><br><span class="line">玩家 6 进入房间进行等待... (1 / 10 )</span><br><span class="line">玩家 8 进入房间进行等待... (2 / 10 )</span><br><span class="line">玩家 7 进入房间进行等待... (3 / 10 )</span><br><span class="line">玩家 1 进入房间进行等待... (4 / 10 )</span><br><span class="line">玩家 0 进入房间进行等待... (5 / 10 )</span><br><span class="line">飞机马上就要起飞了，各位特种兵请准备！</span><br><span class="line">玩家 6 进入游戏！</span><br><span class="line">玩家 0 进入游戏！</span><br><span class="line">玩家 8 进入游戏！</span><br><span class="line">玩家 1 进入游戏！</span><br><span class="line">玩家 7 进入游戏！</span><br><span class="line"></span><br><span class="line">进程已结束，退出代码为 0</span><br></pre></td></tr></table></figure><h3 id="信号量-Semaphore"><a href="#信号量-Semaphore" class="headerlink" title="信号量 Semaphore"></a>信号量 Semaphore</h3><blockquote><p>用于控制多个线程对共享资源的访问，它通过维护一个许可计数来管理并发访问</p><p>可以被用来限制同时访问特定资源的线程数，从而避免资源竞争和过度的线程争用</p></blockquote><p><strong>需求</strong>：</p><p>现在有<code>10</code>个线程同时进行任务，任务要求是执行某个方法</p><p>但是这个方法最多同时只能由<code>5</code>个线程执行</p><p><strong>示例</strong>：             </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Semaphore</span> <span class="variable">semaphore</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Semaphore</span>(<span class="number">5</span>); <span class="comment">// 信号量为 5</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123; <span class="comment">// 10 个线程</span></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Task</span>(semaphore, i)).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Task</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123; <span class="comment">// 任务类</span></span><br><span class="line">        <span class="keyword">private</span> Semaphore semaphore;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> threadId;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Task</span><span class="params">(Semaphore semaphore, <span class="type">int</span> threadId)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.semaphore = semaphore;</span><br><span class="line">            <span class="built_in">this</span>.threadId = threadId;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                semaphore.acquire(); <span class="comment">// 获取信号量</span></span><br><span class="line">                System.out.println(<span class="string">&quot;线程 &quot;</span> + threadId + <span class="string">&quot; 开始执行任务...&quot;</span>);</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>); <span class="comment">// 获取到信号量，开始执行任务</span></span><br><span class="line">                semaphore.release(); <span class="comment">// 执行完毕，释放信号量</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">线程 1 开始执行任务...</span><br><span class="line">线程 3 开始执行任务...</span><br><span class="line">线程 2 开始执行任务...</span><br><span class="line">线程 6 开始执行任务...</span><br><span class="line">线程 0 开始执行任务...</span><br><span class="line">线程 4 开始执行任务...</span><br><span class="line">线程 5 开始执行任务...</span><br><span class="line">线程 9 开始执行任务...</span><br><span class="line">线程 7 开始执行任务...</span><br><span class="line">线程 8 开始执行任务...</span><br><span class="line"></span><br><span class="line">进程已结束，退出代码为 0</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">semaphore.availablePermits() <span class="comment">// 剩余许可证数量</span></span><br><span class="line">semaphore.hasQueuedThreads() <span class="comment">// 是否存在线程等待许可证</span></span><br><span class="line">semaphore.getQueueLength() <span class="comment">// 等待许可证线程数量</span></span><br><span class="line">    </span><br><span class="line">semaphore.drainPermits() <span class="comment">// 直接回收掉剩余的许可证</span></span><br></pre></td></tr></table></figure><h3 id="数据交换-Exchanger"><a href="#数据交换-Exchanger" class="headerlink" title="数据交换 Exchanger"></a>数据交换 Exchanger</h3><blockquote><p>用于线程之间的数据交换</p></blockquote><p><strong>示例</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        Exchanger&lt;String&gt; exchanger = <span class="keyword">new</span> <span class="title class_">Exchanger</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;收到主线程传递的交换数据：&quot;</span> + exchanger.exchange(<span class="string">&quot;AAA&quot;</span>));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">        System.out.println(<span class="string">&quot;收到子线程传递的交换数据：&quot;</span> + exchanger.exchange(<span class="string">&quot;BBB&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">收到主线程传递的交换数据：BBB</span><br><span class="line">收到子线程传递的交换数据：AAA</span><br><span class="line"></span><br><span class="line">进程已结束，退出代码为 0</span><br></pre></td></tr></table></figure><h3 id="Fork-Join-框架"><a href="#Fork-Join-框架" class="headerlink" title="Fork&#x2F;Join 框架"></a>Fork&#x2F;Join 框架</h3><p>在 JDK7 时，出现了一个新的框架用于并行执行任务</p><p>它的目的是为了把大型任务拆分为多个小任务，最后汇总多个小任务的结果，得到整大任务的结果</p><p>并且这些小任务都是同时在进行，大大提高运算效率</p><blockquote><p>Fork 就是拆分，Join 就是合并</p></blockquote><p><img src="/../images/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/13%20JavaJUC%20%E5%A4%9A%E7%BA%BF%E7%A8%8B-17.jpg"></p><p>它不仅仅只是拆分任务并使用多线程，而且还可以利用工作窃取算法，提高线程的利用率</p><blockquote><p><strong>工作窃取算法：</strong> </p><p>指某个线程从其他队列里窃取任务来执行</p><p>一个大任务分割为若干个互不依赖的子任务，为了减少线程间的竞争，把这些子任务分别放到不同的队列里，并为每个队列创建一个单独的线程来执行队列里的任务，线程和队列一一对应</p><p>但是有的线程会先把自己队列里的任务干完，而其他线程对应的队列里还有任务待处理</p><p>干完活的线程与其等着，不如帮其他线程干活，于是它就去其他线程的队列里窃取一个任务来执行</p></blockquote><p><img src="/../images/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/13%20JavaJUC%20%E5%A4%9A%E7%BA%BF%E7%A8%8B-18.jpg"></p><p><strong>需求</strong>：</p><p>计算<code>1-1000</code>的和</p><p><strong>示例</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException, ExecutionException &#123;</span><br><span class="line">        <span class="type">ForkJoinPool</span> <span class="variable">pool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ForkJoinPool</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;求和结果：&quot;</span> + pool.submit(<span class="keyword">new</span> <span class="title class_">SubTask</span>(<span class="number">1</span>, <span class="number">1000</span>)).get());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SubTask</span> <span class="keyword">extends</span> <span class="title class_">RecursiveTask</span>&lt;Integer&gt; &#123; <span class="comment">// 继承 RecursiveTask，这样才可以作为一个任务，泛型就是计算结果类型</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> start, end; <span class="comment">// 范围</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">SubTask</span><span class="params">(<span class="type">int</span> start, <span class="type">int</span> end)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.start = start;</span><br><span class="line">            <span class="built_in">this</span>.end = end;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> Integer <span class="title function_">compute</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(end - start &gt; <span class="number">125</span>) &#123; <span class="comment">// 每个任务最多计算 125 个数的和，大于继续拆分</span></span><br><span class="line">                <span class="type">SubTask</span> <span class="variable">subTask1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SubTask</span>(start, (end + start) / <span class="number">2</span>);</span><br><span class="line">                subTask1.fork(); <span class="comment">// 继续划分子任务执行</span></span><br><span class="line">                <span class="type">SubTask</span> <span class="variable">subTask2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SubTask</span>((end + start) / <span class="number">2</span> + <span class="number">1</span>, end);</span><br><span class="line">                subTask2.fork(); <span class="comment">// 继续划分子任务执行</span></span><br><span class="line">                <span class="keyword">return</span> subTask1.join() + subTask2.join(); <span class="comment">// 合并结果返回</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// 小于就可以开始算了</span></span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;：开始计算 &quot;</span> + start + <span class="string">&quot; - &quot;</span> + end + <span class="string">&quot; 的值!&quot;</span>);</span><br><span class="line">                <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start; i &lt;= end; i++) &#123;</span><br><span class="line">                    res += i;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> res;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ForkJoinPool-1-worker-5：开始计算 251 - 375 的值!</span><br><span class="line">ForkJoinPool-1-worker-1：开始计算 1 - 125 的值!</span><br><span class="line">ForkJoinPool-1-worker-4：开始计算 126 - 250 的值!</span><br><span class="line">ForkJoinPool-1-worker-8：开始计算 751 - 875 的值!</span><br><span class="line">ForkJoinPool-1-worker-2：开始计算 501 - 625 的值!</span><br><span class="line">ForkJoinPool-1-worker-6：开始计算 376 - 500 的值!</span><br><span class="line">ForkJoinPool-1-worker-9：开始计算 626 - 750 的值!</span><br><span class="line">ForkJoinPool-1-worker-10：开始计算 876 - 1000 的值!</span><br><span class="line">求和结果：500500</span><br><span class="line"></span><br><span class="line">进程已结束，退出代码为 0</span><br></pre></td></tr></table></figure><h1 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h1><p>将已创建的线程复用，利用池化技术，就像数据库连接池一样</p><p>然后反复地使用这些线程，而不对它们进行销毁</p><p><img src="/../images/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/13%20JavaJUC%20%E5%A4%9A%E7%BA%BF%E7%A8%8B-19.jpg"></p><h3 id="线程池的使用"><a href="#线程池的使用" class="headerlink" title="线程池的使用"></a>线程池的使用</h3><h4 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ThreadPoolExecutor</span><span class="params">(<span class="type">int</span> corePoolSize,</span></span><br><span class="line"><span class="params">                          <span class="type">int</span> maximumPoolSize,</span></span><br><span class="line"><span class="params">                          <span class="type">long</span> keepAliveTime,</span></span><br><span class="line"><span class="params">                          TimeUnit unit,</span></span><br><span class="line"><span class="params">                          BlockingQueue&lt;Runnable&gt; workQueue,</span></span><br><span class="line"><span class="params">                          ThreadFactory threadFactory,</span></span><br><span class="line"><span class="params">                          RejectedExecutionHandler handler)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (corePoolSize &lt; <span class="number">0</span> ||</span><br><span class="line">        maximumPoolSize &lt;= <span class="number">0</span> ||</span><br><span class="line">        maximumPoolSize &lt; corePoolSize ||</span><br><span class="line">        keepAliveTime &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>();</span><br><span class="line">    <span class="keyword">if</span> (workQueue == <span class="literal">null</span> || threadFactory == <span class="literal">null</span> || handler == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">    <span class="built_in">this</span>.acc = System.getSecurityManager() == <span class="literal">null</span> ?</span><br><span class="line">            <span class="literal">null</span> :</span><br><span class="line">            AccessController.getContext();</span><br><span class="line">    <span class="built_in">this</span>.corePoolSize = corePoolSize;</span><br><span class="line">    <span class="built_in">this</span>.maximumPoolSize = maximumPoolSize;</span><br><span class="line">    <span class="built_in">this</span>.workQueue = workQueue;</span><br><span class="line">    <span class="built_in">this</span>.keepAliveTime = unit.toNanos(keepAliveTime);</span><br><span class="line">    <span class="built_in">this</span>.threadFactory = threadFactory;</span><br><span class="line">    <span class="built_in">this</span>.handler = handler;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>参数</strong>：</p><ul><li><p><code>corePoolSize</code>：<strong>核心线程池大小</strong></p><p>每向线程池提交一个多线程任务时，都会创建一个新的<code>核心线程</code></p><p>无论是否存在其他空闲线程，直到到达核心线程池大小为止，之后会尝试复用线程资源</p></li><li><p><code>maximumPoolSize</code>：<strong>最大线程池大小</strong></p><p>当目前线程池中所有的线程都处于运行状态，并且等待队列已满</p><p>那么就会直接尝试继续创建新的<code>非核心线程</code>运行，但是不能超过最大线程池大小</p></li><li><p><code>keepAliveTime</code>：<strong>线程最大空闲时间</strong></p><p>当一个<code>非核心线程</code>空闲超过一定时间，会自动销毁</p></li><li><p><code>unit</code>：<strong>线程最大空闲时间的时间单位</strong></p></li><li><p><code>workQueue</code>：<strong>线程等待队列</strong></p><p>当线程池中核心线程数已满时，就会将任务暂时存到等待队列中，直到有线程资源可用为止</p></li><li><p><code>threadFactory</code>：<strong>线程创建工厂</strong></p><p>可以自定义线程池中线程的创建过程</p></li><li><p><code>handler</code>：<strong>拒绝策略</strong></p><p>当等待队列和线程池都没有空间时，来了个新的多线程任务，这时就会根据当前设定的拒绝策略进行处理</p></li></ul><table><thead><tr><th align="center">拒绝策略</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center"><code>AbortPolicy</code></td><td align="center">直接抛异常（默认）</td></tr><tr><td align="center"><code>CallerRunsPolicy</code></td><td align="center">直接让提交任务的线程运行这个任务</td></tr><tr><td align="center"><code>DiscardOldestPolicy</code></td><td align="center">丢弃队列中最近的一个任务，替换为当前任务</td></tr><tr><td align="center"><code>DiscardPolicy</code></td><td align="center">什么也不用做</td></tr></tbody></table><p><strong>线程池执行任务的特性</strong>：</p><ul><li><strong>CPU 密集型：</strong> 主要是执行计算任务。线程池大小一般配置为 CPU 的核心数</li><li><strong>IO 密集型：</strong> 主要是进行 IO 操作。线程池大小一般配置为 CPU 的核心数的 2 倍</li></ul><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">ThreadPoolExecutor</span> <span class="variable">executor</span> <span class="operator">=</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">2</span>, <span class="number">4</span>, <span class="comment">// 2 个核心线程，最大线程数为 4 个</span></span><br><span class="line">                        <span class="number">3</span>, TimeUnit.SECONDS, <span class="comment">// 最大空闲时间为 3 秒</span></span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="number">2</span>)); <span class="comment">// 这里使用容量为 2 的阻塞队列</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123; <span class="comment">// 开始 6 个任务</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">finalI</span> <span class="operator">=</span> i;</span><br><span class="line">            executor.execute(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot; 开始执行！&quot;</span> + finalI);</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot; 已结束！&quot;</span> + finalI);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;线程池中线程数量：&quot;</span> + executor.getPoolSize()); <span class="comment">// 查看当前线程池中的线程数量</span></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">5</span>); <span class="comment">// 等到超过空闲时间</span></span><br><span class="line">        System.out.println(<span class="string">&quot;线程池中线程数量：&quot;</span> + executor.getPoolSize());</span><br><span class="line"></span><br><span class="line">        executor.shutdownNow(); <span class="comment">// 使用完线程池记得关闭，不然程序不会结束，它会取消所有等待中的任务以及试图中断正在执行的任务，关闭后，无法再提交任务，一律拒绝</span></span><br><span class="line">        <span class="comment">// executor.shutdown(); // 同样可以关闭，但是会执行完等待队列中的任务再关闭</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">pool-1-thread-3 开始执行！4</span><br><span class="line">pool-1-thread-2 开始执行！1</span><br><span class="line">pool-1-thread-4 开始执行！5</span><br><span class="line">pool-1-thread-1 开始执行！0</span><br><span class="line">pool-1-thread-2 已结束！1</span><br><span class="line">pool-1-thread-4 已结束！5</span><br><span class="line">pool-1-thread-3 已结束！4</span><br><span class="line">pool-1-thread-2 开始执行！2</span><br><span class="line">pool-1-thread-4 开始执行！3</span><br><span class="line">pool-1-thread-1 已结束！0</span><br><span class="line">线程池中线程数量：4</span><br><span class="line">pool-1-thread-2 已结束！2</span><br><span class="line">pool-1-thread-4 已结束！3</span><br><span class="line">线程池中线程数量：2</span><br><span class="line"></span><br><span class="line">进程已结束，退出代码为 0</span><br></pre></td></tr></table></figure><p>除了使用官方提供的 4 种拒绝策略之外，还可以使用自定义的策略：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ThreadPoolExecutor</span> <span class="variable">executor</span> <span class="operator">=</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">2</span>, <span class="number">4</span>,</span><br><span class="line">                <span class="number">3</span>, TimeUnit.SECONDS,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">SynchronousQueue</span>&lt;&gt;(),</span><br><span class="line">                (r, executor1) -&gt; &#123; <span class="comment">// 实现一个就在当前线程执行的策略</span></span><br><span class="line">                    r.run(); <span class="comment">// 直接运行</span></span><br><span class="line">                &#125;);</span><br></pre></td></tr></table></figure><p>还可以自行决定如何创建新的线程：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ThreadPoolExecutor</span> <span class="variable">executor</span> <span class="operator">=</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">2</span>, <span class="number">4</span>,</span><br><span class="line">                        <span class="number">3</span>, TimeUnit.SECONDS,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">SynchronousQueue</span>&lt;&gt;(),</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">ThreadFactory</span>() &#123;</span><br><span class="line">                            <span class="type">int</span> <span class="variable">counter</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">                            <span class="meta">@Override</span></span><br><span class="line">                            <span class="keyword">public</span> Thread <span class="title function_">newThread</span><span class="params">(Runnable r)</span> &#123;</span><br><span class="line">                                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(r, <span class="string">&quot;我的自定义线程 - &quot;</span> + counter++);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">            executor.execute(() -&gt; System.out.println(Thread.currentThread().getName() + <span class="string">&quot;：开始执行！&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">我的自定义线程 - 0：开始执行！</span><br><span class="line">我的自定义线程 - 3：开始执行！</span><br><span class="line">我的自定义线程 - 1：开始执行！</span><br><span class="line">我的自定义线程 - 2：开始执行！</span><br><span class="line"></span><br><span class="line">进程已结束，退出代码为 130</span><br></pre></td></tr></table></figure><p>如果任务在运行过程中出现异常了，再次提交新的任务，执行的线程是一个新的线程了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">ThreadPoolExecutor</span> <span class="variable">executor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="comment">// 最大容量和核心容量锁定为 1</span></span><br><span class="line">                <span class="number">0</span>, TimeUnit.MILLISECONDS, <span class="keyword">new</span> <span class="title class_">LinkedBlockingDeque</span>&lt;&gt;());</span><br><span class="line">        executor.execute(() -&gt; &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName());</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;我是异常！&quot;</span>); <span class="comment">// 抛出异常</span></span><br><span class="line">        &#125;);</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        executor.execute(() -&gt; &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName());</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">pool-1-thread-1</span><br><span class="line">Exception in thread &quot;pool-1-thread-1&quot; java.lang.RuntimeException: 我是异常！</span><br><span class="line">at Main.lambda$main$0(Main.java:16)</span><br><span class="line">at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)</span><br><span class="line">at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)</span><br><span class="line">at java.base/java.lang.Thread.run(Thread.java:840)</span><br><span class="line">pool-1-thread-2</span><br><span class="line"></span><br><span class="line">进程已结束，退出代码为 130</span><br></pre></td></tr></table></figure><p>可以使用<code>Executors</code>工具类来快速创建线程池：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ExecutorService</span> <span class="variable">executor</span> <span class="operator">=</span> Executors.newFixedThreadPool(值); <span class="comment">// 创建一个固定容量的线程池</span></span><br><span class="line"><span class="type">ExecutorService</span> <span class="variable">executor</span> <span class="operator">=</span> Executors.newSingleThreadExecutor(); <span class="comment">// 创建一个只有一个线程的线程池</span></span><br><span class="line"><span class="type">ExecutorService</span> <span class="variable">executor</span> <span class="operator">=</span> Executors.newCachedThreadPool(); <span class="comment">// 会根据需要无限制创建新线程的线程池</span></span><br></pre></td></tr></table></figure><h3 id="执行带返回值的任务"><a href="#执行带返回值的任务" class="headerlink" title="执行带返回值的任务"></a>执行带返回值的任务</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException, ExecutionException &#123;</span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">executor</span> <span class="operator">=</span> Executors.newSingleThreadExecutor();</span><br><span class="line">        Future&lt;String&gt; future = executor.submit(() -&gt; &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;AAA&quot;</span>;</span><br><span class="line">        &#125;); <span class="comment">// 使用 submit 提交任务，会返回一个 Future 对象</span></span><br><span class="line">        System.out.println(future.get()); <span class="comment">// 如果任务未完成，get 会被阻塞，任务完成返回执行结果的返回值</span></span><br><span class="line">        System.out.println(<span class="string">&quot;任务是否执行完成：&quot;</span> + future.isDone());</span><br><span class="line">        System.out.println(<span class="string">&quot;任务是否被取消：&quot;</span> + future.isCancelled());</span><br><span class="line">        <span class="comment">// System.out.println(future.cancel(true)); // 取消任务</span></span><br><span class="line">        <span class="comment">// System.out.println(&quot;任务是否被取消：&quot; + future.isCancelled());</span></span><br><span class="line">        executor.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">AAA</span><br><span class="line">任务是否执行完成：true</span><br><span class="line">任务是否被取消：false</span><br><span class="line"></span><br><span class="line">进程已结束，退出代码为 0</span><br></pre></td></tr></table></figure><h3 id="执行定时任务"><a href="#执行定时任务" class="headerlink" title="执行定时任务"></a>执行定时任务</h3><p>JDK5 之后，可以使用<code>ScheduledThreadPoolExecutor</code>来提交定时任务，它继承自<code>ThreadPoolExecutor</code></p><p>并且所有的构造方法都必须要求最大线程池容量为<code>Integer.MAX_VALUE</code>，并且都是采用的<code>DelayedWorkQueue</code>作为等待队列</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ScheduledThreadPoolExecutor</span> <span class="variable">executor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ScheduledThreadPoolExecutor</span>(<span class="number">1</span>); <span class="comment">// 核心线程数为 1</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">executor.schedule(() -&gt; System.out.println(<span class="string">&quot;Hello World!&quot;</span>), <span class="number">3</span>, TimeUnit.SECONDS); <span class="comment">// 计划在 3 秒后执行</span></span><br><span class="line">executor.scheduleAtFixedRate(() -&gt; System.out.println(<span class="string">&quot;Hello World!&quot;</span>),</span><br><span class="line">        <span class="number">3</span>, <span class="number">1</span>, TimeUnit.SECONDS); <span class="comment">// 计划在 3 秒后执行，之后每隔一秒钟执行一次</span></span><br></pre></td></tr></table></figure><h3 id="线程池实现原理"><a href="#线程池实现原理" class="headerlink" title="线程池实现原理"></a>线程池实现原理</h3><h4 id="字段"><a href="#字段" class="headerlink" title="字段"></a>字段</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ThreadPoolExecutor</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">AtomicInteger</span> <span class="variable">ctl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(ctlOf(RUNNING, <span class="number">0</span>)); <span class="comment">// 用于同时保存线程池运行状态和线程数量</span></span><br><span class="line"><span class="comment">// 它是通过拆分 32 个 bit 位来保存数据的，前 3 位保存状态，后 29 位保存工作线程数量</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">COUNT_BITS</span> <span class="operator">=</span> Integer.SIZE - <span class="number">3</span>; <span class="comment">// 29 位，线程数量位</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">CAPACITY</span>   <span class="operator">=</span> (<span class="number">1</span> &lt;&lt; COUNT_BITS) - <span class="number">1</span>; <span class="comment">// 计算得出最大容量（2^29-1）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">RUNNING</span>    <span class="operator">=</span> -<span class="number">1</span> &lt;&lt; COUNT_BITS; <span class="comment">// 接收新任务，并等待执行队列中的任务</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">SHUTDOWN</span>   <span class="operator">=</span>  <span class="number">0</span> &lt;&lt; COUNT_BITS; <span class="comment">// 不接收新任务，但是依然等待执行队列中的任务</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">STOP</span>       <span class="operator">=</span>  <span class="number">1</span> &lt;&lt; COUNT_BITS; <span class="comment">// 不接收新任务，也不执行队列中的任务，并且还要中断正在执行中的任务</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">TIDYING</span>    <span class="operator">=</span>  <span class="number">2</span> &lt;&lt; COUNT_BITS; <span class="comment">// 所有的任务都已结束，线程数量为 0，即将完全关闭</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">TERMINATED</span> <span class="operator">=</span>  <span class="number">3</span> &lt;&lt; COUNT_BITS; <span class="comment">// 完全关闭</span></span><br></pre></td></tr></table></figure><p><img src="/../images/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/13%20JavaJUC%20%E5%A4%9A%E7%BA%BF%E7%A8%8B-20.jpg"></p><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">runStateOf</span><span class="params">(<span class="type">int</span> c)</span> &#123; <span class="keyword">return</span> c &amp; ~CAPACITY; &#125; <span class="comment">// 取运行状态</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">workerCountOf</span><span class="params">(<span class="type">int</span> c)</span> &#123; <span class="keyword">return</span> c &amp; CAPACITY; &#125; <span class="comment">// 取线程数量</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">ctlOf</span><span class="params">(<span class="type">int</span> rs, <span class="type">int</span> wc)</span> &#123; <span class="keyword">return</span> rs | wc; &#125; </span><br></pre></td></tr></table></figure><h4 id="执行任务"><a href="#执行任务" class="headerlink" title="执行任务"></a>执行任务</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ThreadPoolExecutor</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> BlockingQueue&lt;Runnable&gt; workQueue; <span class="comment">// 指定的阻塞队列</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(Runnable command)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (command == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>(); <span class="comment">// 如果任务为 null，直接抛出空指针异常</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> ctl.get(); <span class="comment">// 获取 ctl 的值</span></span><br><span class="line">    <span class="keyword">if</span> (workerCountOf(c) &lt; corePoolSize) &#123; <span class="comment">// 判断工作线程数量是否小于核心线程数</span></span><br><span class="line">        <span class="keyword">if</span> (addWorker(command, <span class="literal">true</span>)) <span class="comment">// 直接加新的线程执行即可</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        c = ctl.get(); <span class="comment">// 如果线程添加失败（有可能其他线程也在对线程池进行操作），那就更新一下 c 的值</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (isRunning(c) &amp;&amp; workQueue.offer(command)) &#123; <span class="comment">// 如果当前线程池是运行状态，那就向阻塞队列中添加一个新的等待任务</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">recheck</span> <span class="operator">=</span> ctl.get(); <span class="comment">// 再次获取 ctl 的值</span></span><br><span class="line">        <span class="keyword">if</span> (!isRunning(recheck) &amp;&amp; remove(command)) <span class="comment">// 这里是再次确认当前线程池是否关闭，如果添加等待任务后线程池关闭了，那就把刚刚加进去任务的又拿出来</span></span><br><span class="line">            reject(command); <span class="comment">// 然后直接拒绝当前任务的提交（会根据我们的拒绝策略决定如何进行拒绝操作）</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (workerCountOf(recheck) == <span class="number">0</span>) <span class="comment">// 如果这个时候线程池依然在运行状态，那么就检查一下当前工作线程数是否为 0，如果是那就直接添加新线程执行</span></span><br><span class="line">            addWorker(<span class="literal">null</span>, <span class="literal">false</span>); <span class="comment">// 添加一个新的非核心线程，但是注意没添加任务</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (!addWorker(command, <span class="literal">false</span>)) <span class="comment">// 这种情况要么就是线程池没有运行，要么就是队列满了，按照之前的规则，核心线程数已满且队列已满，那么会直接添加新的非核心线程，但是如果已经添加到最大数量，这里肯定是会失败的</span></span><br><span class="line">        reject(command); <span class="comment">// 拒绝</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ThreadPoolExecutor</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">addWorker</span><span class="params">(Runnable firstTask, <span class="type">boolean</span> core)</span> &#123;</span><br><span class="line">    retry: <span class="comment">// 标签</span></span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> ctl.get(); <span class="comment">// 获取 ctl 值</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">rs</span> <span class="operator">=</span> runStateOf(c); <span class="comment">// 解析当前的运行状态</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (rs &gt;= SHUTDOWN &amp;&amp; <span class="comment">// 判断线程池是否处于非运行状态</span></span><br><span class="line">            ! (rs == SHUTDOWN &amp;&amp;</span><br><span class="line">               firstTask == <span class="literal">null</span> &amp;&amp;   </span><br><span class="line">               ! workQueue.isEmpty()))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 如果不是运行状态，判断线程是 SHUTDOWN 状态并且任务不为 null 、等待队列不为空，只要有其中一者不满足，直接返回 false，添加失败</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">wc</span> <span class="operator">=</span> workerCountOf(c); <span class="comment">// 解析当前的工作线程数量</span></span><br><span class="line">            <span class="keyword">if</span> (wc &gt;= CAPACITY ||</span><br><span class="line">                wc &gt;= (core ? corePoolSize : maximumPoolSize)) <span class="comment">// 判断一下还装得下不，如果装得下，看看是核心线程还是非核心线程，如果是核心线程，不能大于核心线程数的限制，如果是非核心线程，不能大于最大线程数限制</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (compareAndIncrementWorkerCount(c)) <span class="comment">// CAS 自增线程计数，如果增加成功，任务完成，直接跳出继续</span></span><br><span class="line">                <span class="keyword">break</span> retry; <span class="comment">// 直接跳出最外层循环</span></span><br><span class="line">            c = ctl.get(); <span class="comment">// 如果 CAS 失败，更新一下 c 的值</span></span><br><span class="line">            <span class="keyword">if</span> (runStateOf(c) != rs) <span class="comment">// 如果 CAS 失败的原因是因为线程池状态和一开始的不一样了，那么就重新从外层循环再来一次</span></span><br><span class="line">                <span class="keyword">continue</span> retry; <span class="comment">// 直接从最外层循环继续</span></span><br><span class="line">            <span class="comment">// 如果是其他原因导致的 CAS 失败，那只可能是其他线程同时在自增，所以重新再来一次内层循环</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 线程计数自增完了，接着就是添加新的工作线程了</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">workerStarted</span> <span class="operator">=</span> <span class="literal">false</span>; <span class="comment">// 工作线程是否已启动</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">workerAdded</span> <span class="operator">=</span> <span class="literal">false</span>; <span class="comment">// 工作线程是否已添加</span></span><br><span class="line">    <span class="type">Worker</span> <span class="variable">w</span> <span class="operator">=</span> <span class="literal">null</span>; <span class="comment">// 暂时理解为工作线程</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        w = <span class="keyword">new</span> <span class="title class_">Worker</span>(firstTask); <span class="comment">// 创建新的工作线程</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> w.thread; <span class="comment">// 传入提交的任务到工作线程中封装的 Thread 对象</span></span><br><span class="line">        <span class="keyword">if</span> (t != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">ReentrantLock</span> <span class="variable">mainLock</span> <span class="operator">=</span> <span class="built_in">this</span>.mainLock;</span><br><span class="line">            mainLock.lock(); <span class="comment">// 加锁</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">rs</span> <span class="operator">=</span> runStateOf(ctl.get()); <span class="comment">// 获取当前线程的运行状态</span></span><br><span class="line">                <span class="keyword">if</span> (rs &lt; SHUTDOWN ||</span><br><span class="line">                    (rs == SHUTDOWN &amp;&amp; firstTask == <span class="literal">null</span>)) &#123; <span class="comment">// 只有当前线程池是正在运行状态，或是 SHUTDOWN 状态且firstTask 为空，那么就继续</span></span><br><span class="line">                    <span class="keyword">if</span> (t.isAlive()) <span class="comment">// 检查一下线程是否正在运行状态</span></span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalThreadStateException</span>(); <span class="comment">// 如果是那肯定是不能运行这个任务的</span></span><br><span class="line">                    workers.add(w); <span class="comment">// 直接将新创建的 Work 丢进 workers 集合中</span></span><br><span class="line">                    <span class="type">int</span> <span class="variable">s</span> <span class="operator">=</span> workers.size(); <span class="comment">// 查看当前 workers 的大小</span></span><br><span class="line">                    <span class="keyword">if</span> (s &gt; largestPoolSize) <span class="comment">// 记录线程池运行以来，历史上的最多线程数</span></span><br><span class="line">                        largestPoolSize = s;</span><br><span class="line">                    workerAdded = <span class="literal">true</span>; <span class="comment">// 工作线程已添加</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                mainLock.unlock(); <span class="comment">// 解锁</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (workerAdded) &#123;</span><br><span class="line">                t.start(); <span class="comment">// 启动线程</span></span><br><span class="line">                workerStarted = <span class="literal">true</span>; <span class="comment">// 工作线程已启动</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!workerStarted) <span class="comment">// 如果线程在上面的启动过程中失败了</span></span><br><span class="line">            addWorkerFailed(w); <span class="comment">// 将 w 移出 workers 并将计数器 -1，最后如果线程池是终止状态，会尝试加速终止线程池</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> workerStarted; <span class="comment">// 返回是否成功启动</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ThreadPoolExecutor</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Worker</span></span><br><span class="line">    <span class="keyword">extends</span> <span class="title class_">AbstractQueuedSynchronizer</span></span><br><span class="line">    <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> Thread thread; <span class="comment">// 主线程</span></span><br><span class="line">    Runnable firstTask; <span class="comment">// 要执行的第一个任务</span></span><br><span class="line">    <span class="keyword">volatile</span> <span class="type">long</span> completedTasks; <span class="comment">// 记录这个线程完成了多少个任务</span></span><br><span class="line"></span><br><span class="line">    Worker(Runnable firstTask) &#123;</span><br><span class="line">        setState(-<span class="number">1</span>); <span class="comment">// 执行 Task 之前不让中断，将 AQS 的 state 设定为 -1</span></span><br><span class="line">        <span class="built_in">this</span>.firstTask = firstTask;</span><br><span class="line">        <span class="built_in">this</span>.thread = getThreadFactory().newThread(<span class="built_in">this</span>); <span class="comment">// 通过预定义或是自定义的线程工厂创建线程</span></span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        runWorker(<span class="built_in">this</span>); <span class="comment">// 真正开始执行任务</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">isHeldExclusively</span><span class="params">()</span> &#123; <span class="comment">// 是否已加锁</span></span><br><span class="line">        <span class="keyword">return</span> getState() != <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">&#125;      </span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ThreadPoolExecutor</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">runWorker</span><span class="params">(Worker w)</span> &#123;</span><br><span class="line">    <span class="type">Thread</span> <span class="variable">wt</span> <span class="operator">=</span> Thread.currentThread(); <span class="comment">// 获取当前线程</span></span><br><span class="line">    <span class="type">Runnable</span> <span class="variable">task</span> <span class="operator">=</span> w.firstTask; <span class="comment">// 取出要执行的任务</span></span><br><span class="line">    w.firstTask = <span class="literal">null</span>; <span class="comment">// 然后把 Worker 中的任务设定为 null</span></span><br><span class="line">    w.unlock(); <span class="comment">// 因为一开始为 -1，这里是通过 unlock 操作将其修改回 0，只有 state 大于等于 0 才能响应中断</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">completedAbruptly</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 只要任务不为 null，或是任务为空但是可以从等待队列中取出任务不为空，那么就开始执行这个任务，注意这里是无限循环，也就是说如果当前没有任务了，那么会在 getTask 方法中卡住，因为要从阻塞队列中等着取任务</span></span><br><span class="line">        <span class="keyword">while</span> (task != <span class="literal">null</span> || (task = getTask()) != <span class="literal">null</span>) &#123;</span><br><span class="line">            w.lock(); <span class="comment">// 对当前 Worker 加锁，这里其实并不是防其他线程，而是在 shutdown 时保护此任务的运行</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 由于线程池在 STOP 状态及以上会禁止新线程加入并且中断正在进行的线程</span></span><br><span class="line">            <span class="keyword">if</span> ((runStateAtLeast(ctl.get(), STOP) || <span class="comment">// 只要线程池是 STOP 及以上的状态，那肯定是不能开始新任务的</span></span><br><span class="line">                (Thread.interrupted() &amp;&amp; <span class="comment">// 线程是否已经被打上中断标记并且线程一定是 STOP 及以上</span></span><br><span class="line">                runStateAtLeast(ctl.get(), STOP))) &amp;&amp;</span><br><span class="line">                !wt.isInterrupted()) <span class="comment">// 再次确保线程没有被打上中断标记</span></span><br><span class="line">                wt.interrupt(); <span class="comment">// 打中断标记</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                beforeExecute(wt, task); <span class="comment">// 开始之前的准备工作，这里暂时没有实现</span></span><br><span class="line">                <span class="type">Throwable</span> <span class="variable">thrown</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    task.run(); <span class="comment">// 开始执行任务</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (RuntimeException x) &#123;</span><br><span class="line">                    thrown = x; <span class="keyword">throw</span> x;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Error x) &#123;</span><br><span class="line">                    thrown = x; <span class="keyword">throw</span> x;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Throwable x) &#123;</span><br><span class="line">                    thrown = x; <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(x);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    afterExecute(task, thrown); <span class="comment">// 执行之后的工作，也没实现</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                task = <span class="literal">null</span>; <span class="comment">// 任务已完成，不需要了</span></span><br><span class="line">                w.completedTasks++; <span class="comment">// 任务完成数++</span></span><br><span class="line">                w.unlock(); <span class="comment">// 解锁</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        completedAbruptly = <span class="literal">false</span>;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">// 如果能走到这一步，那说明上面的循环肯定是跳出了，也就是说这个 Worker 可以丢弃了</span></span><br><span class="line">        <span class="comment">// 所以这里会直接将 Worker 从 workers 里删除掉</span></span><br><span class="line">        processWorkerExit(w, completedAbruptly);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;              </span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ThreadPoolExecutor</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Runnable <span class="title function_">getTask</span><span class="params">()</span> &#123; <span class="comment">// 从阻塞队列里获取任务</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">timedOut</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> ctl.get(); <span class="comment">// 获取 ctl</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">rs</span> <span class="operator">=</span> runStateOf(c); <span class="comment">// 解析线程池运行状态</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (rs &gt;= SHUTDOWN &amp;&amp; (rs &gt;= STOP || workQueue.isEmpty())) &#123; <span class="comment">// 判断是不是没有必要再执行等待队列中的任务了，也就是处于关闭线程池的状态了</span></span><br><span class="line">            decrementWorkerCount(); <span class="comment">// 直接减少一个工作线程数量</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>; <span class="comment">// 返回 null，这样上面的 runWorker 就直接结束了，下同</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">wc</span> <span class="operator">=</span> workerCountOf(c); <span class="comment">// 如果线程池运行正常，那就获取当前的工作线程数量</span></span><br><span class="line"></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">timed</span> <span class="operator">=</span> allowCoreThreadTimeOut || wc &gt; corePoolSize; <span class="comment">// 如果线程数大于核心线程数或是允许核心线程等待超时，那么就标记为可超时的</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 超时或 maximumPoolSize 在运行期间被修改了，并且线程数大于 1 或等待队列为空，那也是不能获取到任务的</span></span><br><span class="line">        <span class="keyword">if</span> ((wc &gt; maximumPoolSize || (timed &amp;&amp; timedOut))</span><br><span class="line">            &amp;&amp; (wc &gt; <span class="number">1</span> || workQueue.isEmpty())) &#123;</span><br><span class="line">            <span class="keyword">if</span> (compareAndDecrementWorkerCount(c)) <span class="comment">// 如果 CAS 减少工作线程成功</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">continue</span>; <span class="comment">// 否则开启下一轮循环</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Runnable</span> <span class="variable">r</span> <span class="operator">=</span> timed ?</span><br><span class="line">                workQueue.poll(keepAliveTime, TimeUnit.NANOSECONDS) : <span class="comment">// 如果可超时，那么最多等到超时时间</span></span><br><span class="line">                workQueue.take(); <span class="comment">// 如果不可超时，那就一直等着拿任务</span></span><br><span class="line">            <span class="keyword">if</span> (r != <span class="literal">null</span>) <span class="comment">// 如果成功拿到任务，ok，返回</span></span><br><span class="line">                <span class="keyword">return</span> r;</span><br><span class="line">            timedOut = <span class="literal">true</span>; <span class="comment">// 否则就是超时了，下一轮循环将直接返回 null</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException retry) &#123;</span><br><span class="line">            timedOut = <span class="literal">false</span>; <span class="comment">// 发生中断异常，重置超时标记</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 开下一轮循环吧</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="关闭线程池"><a href="#关闭线程池" class="headerlink" title="关闭线程池"></a>关闭线程池</h4><h5 id="shutdown"><a href="#shutdown" class="headerlink" title="shutdown"></a>shutdown</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ThreadPoolExecutor</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">shutdown</span><span class="params">()</span> &#123; <span class="comment">// 关闭线程池，但是会继续将等待队列中的线程执行完成后再关闭</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">ReentrantLock</span> <span class="variable">mainLock</span> <span class="operator">=</span> <span class="built_in">this</span>.mainLock;</span><br><span class="line">    mainLock.lock(); <span class="comment">// 加锁</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        checkShutdownAccess(); <span class="comment">// 判断是否有权限终止</span></span><br><span class="line">        advanceRunState(SHUTDOWN); <span class="comment">// CAS 将线程池运行状态改为 SHUTDOWN 状态</span></span><br><span class="line">        interruptIdleWorkers(); <span class="comment">// 让闲着的线程（比如正在等新的任务）中断，但是并不会影响正在运行的线程</span></span><br><span class="line">        onShutdown(); <span class="comment">// 给 ScheduledThreadPoolExecutor 提供的钩子方法，就是等 ScheduledThreadPoolExecutor 去实现的，当前类没有实现</span></span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        mainLock.unlock(); <span class="comment">// 解锁</span></span><br><span class="line">    &#125;</span><br><span class="line">    tryTerminate(); <span class="comment">// 最后尝试终止线程池</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ThreadPoolExecutor</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">advanceRunState</span><span class="params">(<span class="type">int</span> targetState)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> ctl.get(); <span class="comment">// 获取 ctl</span></span><br><span class="line">        <span class="keyword">if</span> (runStateAtLeast(c, targetState) || <span class="comment">// 是否大于等于指定的状态</span></span><br><span class="line">            ctl.compareAndSet(c, ctlOf(targetState, workerCountOf(c)))) <span class="comment">// CAS 设置 ctl 的值</span></span><br><span class="line">            <span class="keyword">break</span>; <span class="comment">// 结束</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ThreadPoolExecutor</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">interruptIdleWorkers</span><span class="params">(<span class="type">boolean</span> onlyOne)</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">ReentrantLock</span> <span class="variable">mainLock</span> <span class="operator">=</span> <span class="built_in">this</span>.mainLock;</span><br><span class="line">    mainLock.lock(); <span class="comment">// 加锁</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Worker w : workers) &#123;</span><br><span class="line">            <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> w.thread; <span class="comment">// 拿到 Worker 中的线程</span></span><br><span class="line">            <span class="keyword">if</span> (!t.isInterrupted() &amp;&amp; w.tryLock()) &#123; <span class="comment">// 先判断一下线程是不是没有被中断然后尝试加锁，但是通过前面的 runWorker() 源代码得知，开始之后是让 Worker 加了锁的，所以如果线程还在执行任务，那么这里肯定会 false</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    t.interrupt(); <span class="comment">// 如果走到这里，那么说明线程肯定是一个闲着的线程，直接给中断吧</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (SecurityException ignore) &#123;</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    w.unlock(); <span class="comment">// 解锁</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (onlyOne) <span class="comment">// 如果只针对一个 Worker，那么就结束循环</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        mainLock.unlock(); <span class="comment">// 解锁</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="shutdownNow"><a href="#shutdownNow" class="headerlink" title="shutdownNow"></a>shutdownNow</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ThreadPoolExecutor</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> List&lt;Runnable&gt; <span class="title function_">shutdownNow</span><span class="params">()</span> &#123; <span class="comment">// 关闭线程池，不仅不允许新的任务到来，也不会再执行等待队列的线程，而且会终止正在执行的线程</span></span><br><span class="line">    List&lt;Runnable&gt; tasks;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">ReentrantLock</span> <span class="variable">mainLock</span> <span class="operator">=</span> <span class="built_in">this</span>.mainLock;</span><br><span class="line">    mainLock.lock(); <span class="comment">// 加锁</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        checkShutdownAccess();</span><br><span class="line">        advanceRunState(STOP); <span class="comment">// 直接设定为 STOP 状态</span></span><br><span class="line">        interruptWorkers(); <span class="comment">// 直接中断所有工作线程</span></span><br><span class="line">        tasks = drainQueue(); <span class="comment">// 取出仍处于阻塞队列中的线程</span></span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        mainLock.unlock(); <span class="comment">// 解锁</span></span><br><span class="line">    &#125;</span><br><span class="line">    tryTerminate();</span><br><span class="line">    <span class="keyword">return</span> tasks; <span class="comment">// 最后返回还没开始的任务</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ThreadPoolExecutor</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">interruptWorkers</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">ReentrantLock</span> <span class="variable">mainLock</span> <span class="operator">=</span> <span class="built_in">this</span>.mainLock;</span><br><span class="line">    mainLock.lock(); <span class="comment">// 加锁</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Worker w : workers) <span class="comment">// 遍历所有 Worker</span></span><br><span class="line">            w.interruptIfStarted(); <span class="comment">// 无差别对待，一律加中断标记</span></span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        mainLock.unlock(); <span class="comment">// 解锁</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;       </span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ThreadPoolExecutor</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">tryTerminate</span><span class="params">()</span> &#123; <span class="comment">// 完完全全终止掉一个线程池</span></span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> ctl.get(); <span class="comment">// 获取一下 ctl 的值</span></span><br><span class="line">      <span class="comment">// 只要是正在运行或是线程池基本上关闭了或是处于 SHUTDOWN 状态且工作队列不为空，那么这时还不能关闭线程池</span></span><br><span class="line">        <span class="keyword">if</span> (isRunning(c) ||</span><br><span class="line">            runStateAtLeast(c, TIDYING) ||</span><br><span class="line">            (runStateOf(c) == SHUTDOWN &amp;&amp; ! workQueue.isEmpty()))</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 走到这里，要么处于 SHUTDOWN 状态且等待队列为空或是 STOP 状态</span></span><br><span class="line">        <span class="keyword">if</span> (workerCountOf(c) != <span class="number">0</span>) &#123; <span class="comment">// 如果工作线程数不是 0，这里也会中断空闲状态下的线程</span></span><br><span class="line">            interruptIdleWorkers(ONLY_ONE); <span class="comment">// 这里最多只中断一个空闲线程，然后返回</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 走到这里，工作线程也为空了，可以终止线程池了</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">ReentrantLock</span> <span class="variable">mainLock</span> <span class="operator">=</span> <span class="built_in">this</span>.mainLock;</span><br><span class="line">        mainLock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (ctl.compareAndSet(c, ctlOf(TIDYING, <span class="number">0</span>))) &#123; <span class="comment">// 先 CAS 将状态设定为 TIDYING 表示基本终止，正在做最后的操作</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    terminated(); <span class="comment">// 终止，暂时没有实现</span></span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    ctl.set(ctlOf(TERMINATED, <span class="number">0</span>)); <span class="comment">// 最后将状态设定为 TERMINATED，表示线程池结束了</span></span><br><span class="line">                    termination.signalAll(); <span class="comment">// 如果有线程调用了 awaitTermination 方法，会等待当前线程池终止，到这里差不多就可以唤醒了</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            mainLock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果 CAS 失败，会直接进下一轮循环重新判断</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 锁 </tag>
            
            <tag> JUC </tag>
            
            <tag> volatile </tag>
            
            <tag> AQS </tag>
            
            <tag> 原子类 </tag>
            
            <tag> 并发 </tag>
            
            <tag> 线程池 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaJVM 虚拟机</title>
      <link href="/2024/11/01/12%20JavaJVM%20%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
      <url>/2024/11/01/12%20JavaJVM%20%E8%99%9A%E6%8B%9F%E6%9C%BA/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="JVM-启动流程"><a href="#JVM-启动流程" class="headerlink" title="JVM 启动流程"></a>JVM 启动流程</h1><p><img src="/../images/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/12%20JavaJVM%20%E8%99%9A%E6%8B%9F%E6%9C%BA-1.jpg"></p><p>虚拟机的启动入口位于<code>jdk/src/share/bin/java.c</code>的<code>JLI_Launch</code>函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">JLI_Launch</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> ** argv,                 <span class="comment">/* 主函数参数个数, argc */</span></span></span><br><span class="line"><span class="params">               <span class="type">int</span> jargc, <span class="type">const</span> <span class="type">char</span>** jargv,          <span class="comment">/* Java 参数 */</span></span></span><br><span class="line"><span class="params">               <span class="type">int</span> appclassc, <span class="type">const</span> <span class="type">char</span>** appclassv,  <span class="comment">/* 应用类路径 */</span></span></span><br><span class="line"><span class="params">               <span class="type">const</span> <span class="type">char</span>* fullversion,                <span class="comment">/* 定义的完整版本 */</span></span></span><br><span class="line"><span class="params">               <span class="type">const</span> <span class="type">char</span>* dotversion,                 <span class="comment">/* 定义的小版本 */</span></span></span><br><span class="line"><span class="params">               <span class="type">const</span> <span class="type">char</span>* pname,                      <span class="comment">/* 程序名称 */</span></span></span><br><span class="line"><span class="params">               <span class="type">const</span> <span class="type">char</span>* lname,                      <span class="comment">/* 启动器名称 */</span></span></span><br><span class="line"><span class="params">               jboolean javaargs,                      <span class="comment">/* JAVA_ARGS */</span></span></span><br><span class="line"><span class="params">               jboolean cpwildcard,                    <span class="comment">/* 类路径通配符 */</span></span></span><br><span class="line"><span class="params">               jboolean javaw,                         <span class="comment">/* Windows 专用 javaw */</span></span></span><br><span class="line"><span class="params">               jint ergo_class                         <span class="comment">/* 人机工程政策 */</span></span></span><br><span class="line"><span class="params">)</span>;</span><br></pre></td></tr></table></figure><h2 id="1-进行初始化操作"><a href="#1-进行初始化操作" class="headerlink" title="1. 进行初始化操作"></a>1. 进行初始化操作</h2><p>还有<code>Debug</code>信息打印配置等</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">InitLauncher(javaw);</span><br><span class="line">DumpState();</span><br><span class="line"><span class="keyword">if</span> (JLI_IsTraceLauncher()) &#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Command line args:\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; argc ; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;argv[%d] = %s\n&quot;</span>, i, argv[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    AddOption(<span class="string">&quot;-Dsun.java.launcher.diag=true&quot;</span>, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-选择-JRE-版本"><a href="#2-选择-JRE-版本" class="headerlink" title="2. 选择 JRE 版本"></a>2. 选择 JRE 版本</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 确保指定版本的 JRE 正在运行</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 关于 SelectVersion() 例程，有三点需要注意：</span></span><br><span class="line"><span class="comment"> *  1) 如果正在运行的版本不正确，该例程不会返回（要么是正确的版本已被执行，要么是发生了错误）</span></span><br><span class="line"><span class="comment"> *  2) 在此作用域中的 Argc 和 Argv 不会被该例程修改</span></span><br><span class="line"><span class="comment"> *     后续代码有责任忽略由该例程处理的参数</span></span><br><span class="line"><span class="comment"> *  3) 作为副作用，变量 &quot;main_class&quot; 确保被设置（如果它应该被设置的话）</span></span><br><span class="line"><span class="comment"> *     这并不是结构化编程的典型示例，但为了不重复处理 jar 文件操作数，这是一个小代价</span></span><br><span class="line"><span class="comment"> *     （注意：该副作用已被禁用。请参见下面关于 bugid 5030265 的注释）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">SelectVersion(argc, argv, &amp;main_class);</span><br></pre></td></tr></table></figure><h2 id="3-创建-JVM-执行环境"><a href="#3-创建-JVM-执行环境" class="headerlink" title="3. 创建 JVM 执行环境"></a>3. 创建 JVM 执行环境</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CreateExecutionEnvironment(&amp;argc, &amp;argv, jrepath, <span class="keyword">sizeof</span>(jrepath),</span><br><span class="line">                           jvmpath, <span class="keyword">sizeof</span>(jvmpath), jvmcfg,  <span class="keyword">sizeof</span>(jvmcfg));</span><br></pre></td></tr></table></figure><p>此函数只在头文件中定义，具体的实现是根据不同平台而定的</p><h2 id="4-加载-JVM"><a href="#4-加载-JVM" class="headerlink" title="4. 加载 JVM"></a>4. 加载 JVM</h2><p>动态加载<code>jvm.so</code>共享库，并把<code>jvm.so</code>中的相关函数导出并且初始化</p><p>启动<code>JVM</code>的函数也在其中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!LoadJavaVM(jvmpath, &amp;ifn)) &#123;</span><br><span class="line">    <span class="keyword">return</span>(<span class="number">6</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">jboolean <span class="title function_">LoadJavaVM</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *jvmpath, InvocationFunctions *ifn)</span> &#123; <span class="comment">// Mac 实现</span></span><br><span class="line">    Dl_info dlinfo;</span><br><span class="line">    <span class="type">void</span> *libjvm;</span><br><span class="line"></span><br><span class="line">    JLI_TraceLauncher(<span class="string">&quot;JVM path is %s\n&quot;</span>, jvmpath);</span><br><span class="line"></span><br><span class="line">    libjvm = dlopen(jvmpath, RTLD_NOW + RTLD_GLOBAL);</span><br><span class="line">    <span class="keyword">if</span> (libjvm == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        JLI_ReportErrorMessage(DLL_ERROR1, __LINE__);</span><br><span class="line">        JLI_ReportErrorMessage(DLL_ERROR2, jvmpath, dlerror());</span><br><span class="line">        <span class="keyword">return</span> JNI_FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ifn-&gt;CreateJavaVM = (CreateJavaVM_t)</span><br><span class="line">        dlsym(libjvm, <span class="string">&quot;JNI_CreateJavaVM&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (ifn-&gt;CreateJavaVM == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        JLI_ReportErrorMessage(DLL_ERROR2, jvmpath, dlerror());</span><br><span class="line">        <span class="keyword">return</span> JNI_FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ifn-&gt;GetDefaultJavaVMInitArgs = (GetDefaultJavaVMInitArgs_t)</span><br><span class="line">        dlsym(libjvm, <span class="string">&quot;JNI_GetDefaultJavaVMInitArgs&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (ifn-&gt;GetDefaultJavaVMInitArgs == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        JLI_ReportErrorMessage(DLL_ERROR2, jvmpath, dlerror());</span><br><span class="line">        <span class="keyword">return</span> JNI_FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ifn-&gt;GetCreatedJavaVMs = (GetCreatedJavaVMs_t)</span><br><span class="line">    dlsym(libjvm, <span class="string">&quot;JNI_GetCreatedJavaVMs&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (ifn-&gt;GetCreatedJavaVMs == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        JLI_ReportErrorMessage(DLL_ERROR2, jvmpath, dlerror());</span><br><span class="line">        <span class="keyword">return</span> JNI_FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> JNI_TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-初始化-JVM"><a href="#5-初始化-JVM" class="headerlink" title="5. 初始化 JVM"></a>5. 初始化 JVM</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> JVMInit(&amp;ifn, threadStackSize, argc, argv, mode, what, ret);</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">JVMInit</span><span class="params">(InvocationFunctions* ifn, jlong threadStackSize,</span></span><br><span class="line"><span class="params">                 <span class="type">int</span> argc, <span class="type">char</span> **argv,</span></span><br><span class="line"><span class="params">                 <span class="type">int</span> mode, <span class="type">char</span> *what, <span class="type">int</span> ret)</span> &#123; <span class="comment">// Mac 实现</span></span><br><span class="line">    <span class="keyword">if</span> (sameThread) &#123;</span><br><span class="line">        <span class="comment">// 无需关心...</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 正常情况下走这个</span></span><br><span class="line">        <span class="keyword">return</span> ContinueInNewThread(ifn, threadStackSize, argc, argv, mode, what, ret);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">ContinueInNewThread</span><span class="params">(InvocationFunctions* ifn, jlong threadStackSize,</span></span><br><span class="line"><span class="params">                    <span class="type">int</span> argc, <span class="type">char</span> **argv,</span></span><br><span class="line"><span class="params">                    <span class="type">int</span> mode, <span class="type">char</span> *what, <span class="type">int</span> ret)</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">        rslt = ContinueInNewThread0(JavaMain, threadStackSize, (<span class="type">void</span>*)&amp;args);</span><br><span class="line">        <span class="comment">/* 如果调用者认为发生了错误</span></span><br><span class="line"><span class="comment">         * 我们直接返回该错误，否则返回被调用者的返回值</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">return</span> (ret != <span class="number">0</span>) ? ret : rslt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">ContinueInNewThread0</span><span class="params">(<span class="type">int</span> (JNICALL *continuation)(<span class="type">void</span> *), jlong stack_size, <span class="type">void</span> * args)</span> &#123;</span><br><span class="line">    <span class="type">int</span> rslt;</span><br><span class="line">    <span class="type">pthread_t</span> tid;</span><br><span class="line">    <span class="type">pthread_attr_t</span> attr;</span><br><span class="line">    pthread_attr_init(&amp;attr);</span><br><span class="line">    pthread_attr_setdetachstate(&amp;attr, PTHREAD_CREATE_JOINABLE);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (stack_size &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        pthread_attr_setstacksize(&amp;attr, stack_size);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pthread_create(&amp;tid, &amp;attr, (<span class="type">void</span> *(*)(<span class="type">void</span>*))continuation, (<span class="type">void</span>*)args) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">void</span> * tmp;</span><br><span class="line">        pthread_join(tid, &amp;tmp);</span><br><span class="line">        rslt = (<span class="type">int</span>)tmp;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">       * 如果由于某种原因（例如内存不足/LWP）无法创建新线程，</span></span><br><span class="line"><span class="comment">       * 则继续在当前线程中执行。这可能会在后续的 continuation 中失败，</span></span><br><span class="line"><span class="comment">       * 因为 JNI_CreateJavaVM 仍然需要创建许多新线程，但可以先尝试一下</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      rslt = continuation(args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pthread_attr_destroy(&amp;attr);</span><br><span class="line">    <span class="keyword">return</span> rslt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-初始化虚拟机"><a href="#6-初始化虚拟机" class="headerlink" title="6. 初始化虚拟机"></a>6. 初始化虚拟机</h2><p>如果报错会直接退出</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 初始化虚拟机 */</span></span><br><span class="line">start = CounterGet();</span><br><span class="line"><span class="keyword">if</span> (!InitializeJVM(&amp;vm, &amp;env, &amp;ifn)) &#123;</span><br><span class="line">    JLI_ReportErrorMessage(JVM_ERROR1);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-加载主类"><a href="#7-加载主类" class="headerlink" title="7. 加载主类"></a>7. 加载主类</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 获取应用程序的主类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 参见 bugid 5030265。Main-Class 名称已经从清单中解析出来，</span></span><br><span class="line"><span class="comment"> * 但并没有正确支持 UTF-8。因此，这里的代码忽略之前提取的值，</span></span><br><span class="line"><span class="comment"> * 而是使用现有代码重新提取该值。这可能是发布周期结束时的权宜之计</span></span><br><span class="line"><span class="comment"> * 然而，已经发现通过环境传递某些字符集在某些 Windows 变种上</span></span><br><span class="line"><span class="comment"> * 会有“奇怪”的行为。因此，启动器本地的清单解析代码可能永远不应该增强</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 因此，未来的工作应该是：</span></span><br><span class="line"><span class="comment"> *     1)   修正本地解析代码，确保 Main-Class 属性</span></span><br><span class="line"><span class="comment"> *          能够在所有环境中正确传递，</span></span><br><span class="line"><span class="comment"> *     2)   删除通过环境维护 main_class 的遗留物（并移除这些注释）</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 该方法还正确处理启动现有的 JavaFX 应用程序，这些应用程序可能</span></span><br><span class="line"><span class="comment"> * 有或没有 Main-Class 清单条目</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">mainClass = LoadMainClass(env, mode, what);</span><br></pre></td></tr></table></figure><p>对于某些没有主方法的<code>Java</code>程序</p><p>比如<code>JavaFX</code>应用，会获取<code>ApplicationMainClass</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 在某些情况下，当启动需要助手的应用程序时，例如，</span></span><br><span class="line"><span class="comment"> * 没有主方法的 JavaFX 应用程序，mainClass 不会是应用程序</span></span><br><span class="line"><span class="comment"> * 自身的主类，而是一个助手类。为了保持 UI 中的一致性，</span></span><br><span class="line"><span class="comment"> * 我们需要跟踪并报告应用程序的主类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">appClass = GetApplicationClass(env);</span><br></pre></td></tr></table></figure><h2 id="8-初始化完成"><a href="#8-初始化完成" class="headerlink" title="8. 初始化完成"></a>8. 初始化完成</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * PostJVMInit 使用类名作为 GUI 目的的应用程序名称，</span></span><br><span class="line"><span class="comment"> * 例如，在 OSX 上，这将设置菜单栏中的应用程序名称，</span></span><br><span class="line"><span class="comment"> * 适用于 SWT 和 JavaFX。因此，我们将在这里传递实际的应用程序类，</span></span><br><span class="line"><span class="comment"> * 而不是 mainClass，因为 mainClass 可能是启动器或助手类，</span></span><br><span class="line"><span class="comment"> * 而不是应用程序类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">PostJVMInit(env, appClass, vm);</span><br></pre></td></tr></table></figure><h2 id="9-获取主方法"><a href="#9-获取主方法" class="headerlink" title="9. 获取主方法"></a>9. 获取主方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * LoadMainClass 不仅加载主类，还将确保主方法的签名正确，</span></span><br><span class="line"><span class="comment"> * 因此不需要进一步检查。这里调用主方法是为了避免</span></span><br><span class="line"><span class="comment"> * 多余的 Java 栈出现在应用程序的栈跟踪中</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">mainID = (*env)-&gt;GetStaticMethodID(env, mainClass, <span class="string">&quot;main&quot;</span>, <span class="string">&quot;([Ljava/lang/String;)V&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="10-调用主方法"><a href="#10-调用主方法" class="headerlink" title="10. 调用主方法"></a>10. 调用主方法</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 调用主方法 */</span></span><br><span class="line">(*env)-&gt;CallStaticVoidMethod(env, mainClass, mainID, mainArgs);</span><br></pre></td></tr></table></figure><h2 id="11-主方法结束，销毁-JVM"><a href="#11-主方法结束，销毁-JVM" class="headerlink" title="11. 主方法结束，销毁 JVM"></a>11. 主方法结束，销毁 JVM</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 启动器的退出代码（在没有调用</span></span><br><span class="line"><span class="comment"> * System.exit 的情况下）如果 main 抛出异常将为非零</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">ret = (*env)-&gt;ExceptionOccurred(env) == <span class="literal">NULL</span> ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line">LEAVE(); <span class="comment">// 销毁 JVM</span></span><br></pre></td></tr></table></figure><p>至此，一个<code>Java</code>程序的运行流程结束</p><h1 id="JNI-调用本地方法"><a href="#JNI-调用本地方法" class="headerlink" title="JNI 调用本地方法"></a>JNI 调用本地方法</h1><h2 id="1-创建本地方法"><a href="#1-创建本地方法" class="headerlink" title="1. 创建本地方法"></a>1. 创建本地方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(sum(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>; <span class="comment">// 本地方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-生成-C-头文件"><a href="#2-生成-C-头文件" class="headerlink" title="2. 生成 C 头文件"></a>2. 生成 C 头文件</h2><p>点击构建按钮，会出现一个<code>out</code>文件夹，也就是生成的<code>class</code>文件在其中</p><p>生成对应的<code>C</code>头文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javah -classpath out/production/SimpleHelloWorld -d ./jni com.test.Main</span><br></pre></td></tr></table></figure><p>生成的头文件位于<code>jni</code>文件夹下</p><h2 id="3-新建-C-项目"><a href="#3-新建-C-项目" class="headerlink" title="3. 新建 C++ 项目"></a>3. 新建 C++ 项目</h2><p>新建一个<code>C++</code>项目，并引入刚刚生成的头文件和导入<code>jni</code>相关头文件（在<code>JDK</code>文件夹中）</p><h2 id="4-修改-CMake-文件"><a href="#4-修改-CMake-文件" class="headerlink" title="4. 修改 CMake 文件"></a>4. 修改 CMake 文件</h2><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.21</span>)</span><br><span class="line"><span class="keyword">project</span>(JNITest)</span><br><span class="line"></span><br><span class="line"><span class="keyword">include_directories</span>(/Library/Java/JavaVirtualMachines/zulu-<span class="number">8</span>.jdk/Contents/Home/<span class="keyword">include</span>)</span><br><span class="line"><span class="keyword">include_directories</span>(/Library/Java/JavaVirtualMachines/zulu-<span class="number">8</span>.jdk/Contents/Home/<span class="keyword">include</span>/darwin)</span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_STANDARD <span class="number">14</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span>(JNITest com_test_Main.cpp com_test_Main.h)</span><br></pre></td></tr></table></figure><h2 id="5-编写本地方法实现"><a href="#5-编写本地方法实现" class="headerlink" title="5. 编写本地方法实现"></a>5. 编写本地方法实现</h2><p>引用类型对照表</p><p><img src="/../images/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/12%20JavaJVM%20%E8%99%9A%E6%8B%9F%E6%9C%BA-2.jpg"></p><p>编写实现</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;com_test_Main.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">JNIEXPORT jint JNICALL <span class="title">Java_com_test_Main_sum</span></span></span><br><span class="line"><span class="function">        <span class="params">(JNIEnv * env, jclass clazz, jint a, jint b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b; <span class="comment">// 编写 C++ 实现</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-编译为动态链接库"><a href="#6-编译为动态链接库" class="headerlink" title="6. 编译为动态链接库"></a>6. 编译为动态链接库</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc com_test_Main.cpp -I /Library/Java/JavaVirtualMachines/zulu-8.jdk/Contents/Home/include -I /Library/Java/JavaVirtualMachines/zulu-8.jdk/Contents/Home/include/darwin -fPIC -shared -o test.dll -lstdc++</span><br></pre></td></tr></table></figure><p>在 MacOS 下会生成<code>.dylib</code>文件，Windows 下会生成<code>.dll</code>文件（这里就只以 Windows 为例）</p><p>编译完成后，得到<code>test.dll</code>文件</p><h2 id="7-加载动态链接库文件"><a href="#7-加载动态链接库文件" class="headerlink" title="7. 加载动态链接库文件"></a>7. 加载动态链接库文件</h2><p>最后就可以调用本地方法了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.load(<span class="string">&quot;.dll 文件路径&quot;</span>); <span class="comment">// 加载 .dll 文件</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(sum(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>; <span class="comment">// 本地方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="JVM-内存管理"><a href="#JVM-内存管理" class="headerlink" title="JVM 内存管理"></a>JVM 内存管理</h1><h2 id="内存区域划分"><a href="#内存区域划分" class="headerlink" title="内存区域划分"></a>内存区域划分</h2><p><img src="/../images/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/12%20JavaJVM%20%E8%99%9A%E6%8B%9F%E6%9C%BA-3.jpg"></p><table><thead><tr><th align="center">内存区域</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">方法区</td><td align="center">类信息、即时编译器的代码缓存、运行时常量池</td></tr><tr><td align="center">堆</td><td align="center">保存所有的对象和数组</td></tr><tr><td align="center">程序计数器（线程独有）</td><td align="center">保存当前程序的执行位置</td></tr><tr><td align="center">虚拟机栈（线程独有）</td><td align="center">通过栈帧来维持方法调用顺序，帮助控制程序有序运行</td></tr><tr><td align="center">本地方法栈（线程独有）</td><td align="center">同上，作用于本地方法</td></tr></tbody></table><h2 id="元空间"><a href="#元空间" class="headerlink" title="元空间"></a>元空间</h2><p>在 JDK8 之前，<code>Hotspot</code>虚拟机的方法区实际上是采用永久代实现的</p><p>在 JDK8 之后，<code>Hotspot</code>虚拟机不再使用永久代，而是采用了全新的<strong>元空间</strong></p><p>类的元信息被存储在元空间中。元空间没有使用堆内存，而是与堆不相连的本地内存区域</p><p>所以，理论上系统可以使用的内存有多大，元空间就有多大，所以不会出现永久代存在时的内存溢出问题</p><p><img src="/../images/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/12%20JavaJVM%20%E8%99%9A%E6%8B%9F%E6%9C%BA-4.jpg"></p><p><img src="/../images/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/12%20JavaJVM%20%E8%99%9A%E6%8B%9F%E6%9C%BA-48.jpg"></p><h2 id="申请堆外内存"><a href="#申请堆外内存" class="headerlink" title="申请堆外内存"></a>申请堆外内存</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IllegalAccessException &#123;</span><br><span class="line">    <span class="type">Field</span> <span class="variable">unsafeField</span> <span class="operator">=</span> Unsafe.class.getDeclaredFields()[<span class="number">0</span>];</span><br><span class="line">    unsafeField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">Unsafe</span> <span class="variable">unsafe</span> <span class="operator">=</span> (Unsafe) unsafeField.get(<span class="literal">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">long</span> <span class="variable">address</span> <span class="operator">=</span> unsafe.allocateMemory(<span class="number">4</span>); <span class="comment">// 申请 4 字节大小的内存空间，并得到对应位置的地址</span></span><br><span class="line">unsafe.putInt(address, <span class="number">6666666</span>); <span class="comment">// 在对应的地址上设定 int 的值</span></span><br><span class="line">System.out.println(unsafe.getInt(address)); <span class="comment">// 获取</span></span><br><span class="line">unsafe.freeMemory(address); <span class="comment">// 释放</span></span><br><span class="line"></span><br><span class="line">System.out.println(unsafe.getInt(address)); <span class="comment">// 再次获取已经获取不到了</span></span><br></pre></td></tr></table></figure><h1 id="垃圾回收机制"><a href="#垃圾回收机制" class="headerlink" title="垃圾回收机制"></a>垃圾回收机制</h1><h2 id="对象存活判定算法"><a href="#对象存活判定算法" class="headerlink" title="对象存活判定算法"></a>对象存活判定算法</h2><h3 id="引用计数算法"><a href="#引用计数算法" class="headerlink" title="引用计数算法"></a>引用计数算法</h3><blockquote><p>跟踪对象的引用数量，以确定对象是否可以被回收</p></blockquote><p><strong>基本概念</strong></p><ol><li><p><strong>引用计数</strong>：</p><p>每个对象都维护一个计数器，表示有多少个引用指向该对象</p><p>当一个对象被创建时，它的引用计数初始化为 1</p><p>当有新的引用指向该对象时，计数器 +1；当引用不再指向该对象时，计数器 -1</p></li><li><p><strong>存活判定</strong>：</p><p>如果一个对象的引用计数为 0，说明没有任何引用指向它，这时该对象就可以被回收</p></li></ol><p><strong>优缺点</strong></p><ol><li><p><strong>优点</strong>：</p><p>简单直观，易于实现</p><p>回收时可以立即释放内存，因为只要引用计数为 0，就可以立即进行回收</p></li><li><p><strong>缺点</strong>：</p><p>循环引用问题：如果两个对象互相引用，即使它们不再被外部引用，它们的引用计数仍然不为 0，导致无法被回收</p><p>需要频繁地更新计数器，性能开销相对较高</p></li></ol><p><strong>循环引用示例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    Node next;</span><br><span class="line">    Node(Node next) &#123;</span><br><span class="line">        <span class="built_in">this</span>.next = next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Node</span> <span class="variable">node1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="literal">null</span>);</span><br><span class="line"><span class="type">Node</span> <span class="variable">node2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(node1);</span><br><span class="line">node1.next = node2; <span class="comment">// node1 和 node2 互相引用</span></span><br></pre></td></tr></table></figure><p>在使用引用计数法时，它们的引用计数都不会降到 0，因此它们不会被垃圾回收</p><h3 id="可达性分析算法"><a href="#可达性分析算法" class="headerlink" title="可达性分析算法"></a>可达性分析算法</h3><blockquote><p>通过检查对象之间的引用关系，来确定哪些对象是<strong>可达的</strong></p><p>即哪些对象仍在使用中，哪些对象可以被回收</p></blockquote><p><strong>基本思想</strong></p><p>从一组称为<strong>根</strong>的对象（根集）开始，递归地检查所有可以访问到的对象</p><p>根对象通常包括以下几类：</p><ol><li><strong>栈上的引用</strong>：活动线程的栈中引用的对象</li><li><strong>静态字段</strong>：类的静态字段所引用的对象</li><li><strong>本地变量</strong>：方法中的局部变量所引用的对象</li><li><strong>常量</strong>：常量池中的对象（例如字符串常量）</li><li><strong>JNI 引用</strong>：通过 <strong>JNI</strong> 获得的引用</li></ol><p><strong>具体实现</strong></p><ol><li><strong>遍历阶段</strong>：通常使用深度优先搜索或广度优先搜索遍历对象图，标记可达对象</li><li><strong>标记阶段</strong>：对于每个可达对象，设置一个标志位，表示该对象是可达的</li><li><strong>清理阶段</strong>：遍历堆中所有对象，查找未被标记的对象并将其回收</li></ol><p><img src="/../images/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/12%20JavaJVM%20%E8%99%9A%E6%8B%9F%E6%9C%BA-5.jpg"></p><p><img src="/../images/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/12%20JavaJVM%20%E8%99%9A%E6%8B%9F%E6%9C%BA-6.jpg"></p><p><img src="/../images/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/12%20JavaJVM%20%E8%99%9A%E6%8B%9F%E6%9C%BA-7.jpg"></p><p><img src="/../images/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/12%20JavaJVM%20%E8%99%9A%E6%8B%9F%E6%9C%BA-8.jpg"></p><p><strong>优缺点</strong></p><ol><li><strong>优点</strong>：简单易懂，准确性高，动态性，无需预定义内存区域</li><li><strong>缺点</strong>：性能开销，不可预测的暂停时间，内存占用问题，复杂的实现</li></ol><h3 id="最终判定算法"><a href="#最终判定算法" class="headerlink" title="最终判定算法"></a>最终判定算法</h3><blockquote><p>每个对象都有一个<code>finalize</code>方法，当该对象即将被垃圾收集器回收时，这个方法会被调用</p><p>在<code>finalize</code>方法执行完成后，如果该对象在<code>finalize</code>方法中仍然被其他对象引用，它就不会被回收</p><p>否则，它将被标记为可回收</p></blockquote><p>虽然在经历了可达性分析算法之后基本可能判定哪些对象能够被回收，但是并不代表此对象一定会被回收</p><p>依然可以在最终判定阶段对其进行挽留</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 当垃圾收集器确定对象没有更多引用时，将调用该对象的此方法</span></span><br><span class="line"><span class="comment"> * 子类重写 &#123;<span class="doctag">@code</span> finalize&#125; 方法以释放系统资源或执行其他清理操作</span></span><br><span class="line"><span class="comment"> * ...</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">finalize</span><span class="params">()</span> <span class="keyword">throws</span> Throwable &#123;&#125;</span><br></pre></td></tr></table></figure><p>此方法正是最终判定方法</p><p>如果子类重写了此方法，那么子类对象在被判定为可回收时，会进行二次确认，也就是执行<code>finalize()</code>方法</p><p>而在此方法中，当前对象是完全有可能重新建立<code>GC Roots</code>的！</p><p>所以，如果在二次确认后对象不满足可回收的条件，那么此对象不会被回收</p><p><img src="/../images/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/12%20JavaJVM%20%E8%99%9A%E6%8B%9F%E6%9C%BA-9.jpg"></p><p><strong>示例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Test a;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        a = <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line">        a  = <span class="literal">null</span>; <span class="comment">// 取消引用</span></span><br><span class="line">        System.gc(); <span class="comment">// 手动申请执行垃圾回收操作</span></span><br><span class="line">        Thread.sleep(<span class="number">1000</span>); <span class="comment">// 等垃圾回收一下</span></span><br><span class="line">        System.out.println(a); <span class="comment">// 还可以获取到</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">finalize</span><span class="params">()</span> <span class="keyword">throws</span> Throwable &#123; <span class="comment">// 重写 finalize 方法</span></span><br><span class="line">            a = <span class="built_in">this</span>; <span class="comment">// 重新建立引用</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同一个对象的<code>finalize()</code>方法只会有一次调用机会</p><p>也就是说，如果连续两次这样操作，那么第二次，对象必定被回收</p><p><strong>示例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Test a;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        a = <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line">        a  = <span class="literal">null</span>; <span class="comment">// 取消引用</span></span><br><span class="line">        System.gc(); <span class="comment">// 手动申请执行垃圾回收操作</span></span><br><span class="line">        Thread.sleep(<span class="number">1000</span>); <span class="comment">// 等垃圾回收一下</span></span><br><span class="line">        System.out.println(a); <span class="comment">// 还可以获取到</span></span><br><span class="line">        </span><br><span class="line">        a  = <span class="literal">null</span>; <span class="comment">// 再次取消引用</span></span><br><span class="line">        System.gc(); <span class="comment">// 手动申请执行垃圾回收操作</span></span><br><span class="line">        Thread.sleep(<span class="number">1000</span>); <span class="comment">// 等垃圾回收一下</span></span><br><span class="line">        System.out.println(a); <span class="comment">// 不能再获取到</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">finalize</span><span class="params">()</span> <span class="keyword">throws</span> Throwable &#123; <span class="comment">// 重写 finalize 方法</span></span><br><span class="line">            a = <span class="built_in">this</span>; <span class="comment">// 重新建立引用</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="垃圾回收算法"><a href="#垃圾回收算法" class="headerlink" title="垃圾回收算法"></a>垃圾回收算法</h2><h3 id="分代收集机制"><a href="#分代收集机制" class="headerlink" title="分代收集机制"></a>分代收集机制</h3><p><code>Java</code>虚拟机将堆内存划分为<strong>新生代</strong>、<strong>老年代</strong>和<strong>永久代</strong></p><blockquote><p>在<code>JDK8</code>之前，方法区采用永久代作为实现</p><p>而在<code>JDK8</code>之后，方法区采用元空间作为实现，并且使用的是本地内存，容量大小取决于物理机实际大小</p></blockquote><p>在<code>HotSpot</code>虚拟机中，<strong>新生代</strong>被划分为三块，一块较大的<code>Eden</code>空间和两块较小的<code>Survivor</code>空间，默认比例为<code>8 : 1 : 1</code></p><p><strong>老年代</strong>的<code>GC</code>频率相对较低</p><p><strong>永久代</strong>一般存放类信息等</p><p><img src="/../images/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/12%20JavaJVM%20%E8%99%9A%E6%8B%9F%E6%9C%BA-10.jpg"></p><p><strong>具体实现</strong></p><ol><li><p>所有新创建的对象，在一开始都会进入到新生代的<code>Eden</code>区（如果是大对象会被直接丢进老年代）</p><p>初始会对所有新生代区域的对象进行一次扫描，并回收那些不再使用对象</p></li></ol><p><img src="/../images/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/12%20JavaJVM%20%E8%99%9A%E6%8B%9F%E6%9C%BA-11.jpg"></p><ol start="2"><li><p>一开始<code>From</code>和<code>To</code>都是空的</p><p>而<code>GC</code>之后，所有<code>Eden</code>区域存活的对象都会直接被放入到<code>From</code>区</p><p>最后<code>From</code>和<code>To</code>会发生一次交换</p></li></ol><p><img src="/../images/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/12%20JavaJVM%20%E8%99%9A%E6%8B%9F%E6%9C%BA-12.jpg"></p><ol start="3"><li><p>对于下一次垃圾回收，操作与上面是一样的</p><p>不过这时由于<code>From</code>区域中已经存在对象了</p><p>所以，在<code>Eden</code>区的存活对象复制到<code>From</code>区之后，所有<code>To</code>区域中的对象会进行<strong>年龄判定</strong></p><blockquote><p>每经历一轮<code>GC</code>年龄 +1</p><p>如果对象的年龄 &gt; 15（默认值），那么会直接进入到老年代</p><p>否则移动到<code>From</code>区</p></blockquote><p>最后<code>From</code>和<code>To</code>会发生一次交换</p></li></ol><p><img src="/../images/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/12%20JavaJVM%20%E8%99%9A%E6%8B%9F%E6%9C%BA-13.jpg"></p><ol start="4"><li>不断重复步骤 3</li></ol><p><strong>垃圾收集</strong></p><ul><li><strong>Minor GC</strong>：次要垃圾回收，主要进行新生代区域的垃圾收集<ul><li>触发条件：新生代的<code>Eden</code>区容量已满时</li></ul></li><li><strong>Major GC</strong>：主要垃圾回收，主要进行老年代的垃圾收集</li><li><strong>Full GC</strong>：完全垃圾回收，对整个<code>Java</code>堆内存和方法区进行垃圾回收<ul><li>触发条件 1：每次晋升到老年代的对象平均大小大于老年代剩余空间</li><li>触发条件 2：<code>Minor GC</code>后存活的对象超过了老年代剩余空间</li><li>触发条件 3：永久代内存不足（<code>JDK8</code>之前）</li><li>触发条件 4：手动调用<code>System.gc()</code>方法</li></ul></li></ul><h3 id="空间分配担保"><a href="#空间分配担保" class="headerlink" title="空间分配担保"></a>空间分配担保</h3><p>当新生代无法容纳更多的的对象时，可以把新生代中的对象移动到老年代中，这样新生代就腾出了空间来容纳更多的对象</p><p>首先会判断一下之前的每次垃圾回收进入老年代的平均大小是否小于当前老年代的剩余空间</p><p>如果小于，那么说明也许可以放得下</p><p>否则，会先来一次<code>Full GC</code>，进行一次大规模垃圾回收，来尝试腾出空间</p><p>再次判断老年代是否有空间存放，要是还是装不下，直接抛出<code>OutOfMemoryError</code>错误</p><p><strong>Minor GC 的整个过程</strong></p><p><img src="/../images/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/12%20JavaJVM%20%E8%99%9A%E6%8B%9F%E6%9C%BA-14.jpg"></p><h3 id="标记清除算法"><a href="#标记清除算法" class="headerlink" title="标记清除算法"></a>标记清除算法</h3><p>标记出所有需要回收的对象，然后再依次回收掉被标记的对象</p><p>（或是标记出所有不需要回收的对象，只回收未标记的对象）</p><p><img src="/../images/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/12%20JavaJVM%20%E8%99%9A%E6%8B%9F%E6%9C%BA-15.jpg"></p><p><strong>缺点</strong></p><p>连续的内存空间可能会出现许许多多的空隙，碎片化会导致连续内存空间利用率降低</p><h3 id="标记复制算法"><a href="#标记复制算法" class="headerlink" title="标记复制算法"></a>标记复制算法</h3><p>将内存区域划分为大小相同的两块区域，每次只使用其中的一块区域</p><p>每次垃圾回收结束后，将所有存活的对象全部复制到另一块区域中，并一次性清空当前区域</p><p><img src="/../images/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/12%20JavaJVM%20%E8%99%9A%E6%8B%9F%E6%9C%BA-16.jpg"></p><p>虽然浪费了一些时间进行复制操作，但是这样能够很好地解决对象大面积回收后空间碎片化严重的问题</p><p>这种算法就非常适用于新生代（因为新生代的回收效率极高，一般不会留下太多的对象）的垃圾回收</p><h3 id="标记整理算法"><a href="#标记整理算法" class="headerlink" title="标记整理算法"></a>标记整理算法</h3><p>在标记所有待回收对象之后，不急着去进行回收操作</p><p>而是将所有待回收的对象整齐排列在一段内存空间中，而需要回收的对象全部往后丢</p><p>这样，前半部分的所有对象都是无需进行回收的，而后半部分直接一次性清除即可</p><p><img src="/../images/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/12%20JavaJVM%20%E8%99%9A%E6%8B%9F%E6%9C%BA-17.jpg"></p><p><strong>缺点</strong></p><p>它的效率比前两者都低</p><p>甚至，由于需要修改对象在内存中的位置，此时程序必须要暂停才可以</p><p>而且，在极端情况下，可能会导致整个程序发生停顿</p><p>所以，可以将标记清除算法和标记整理算法混合使用</p><p>在内存空间还不是很凌乱的时候，采用标记清除算法；当内存空间凌乱到一定程度后，进行一次标记整理算法</p><p>这种算法就非常适用于老年代（因为老年代的回收效率较低，对象的生命周期较长）的垃圾回收</p><h2 id="垃圾收集器实现"><a href="#垃圾收集器实现" class="headerlink" title="垃圾收集器实现"></a>垃圾收集器实现</h2><h3 id="Serial-收集器"><a href="#Serial-收集器" class="headerlink" title="Serial 收集器"></a>Serial 收集器</h3><p>这是一款单线程的垃圾收集器</p><p>也就是说，当开始进行垃圾回收时，需要暂停所有的线程，直到垃圾收集工作结束</p><p>它的新生代收集算法采用的是标记复制算法，老年代采用的是标记整理算法</p><p><img src="/../images/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/12%20JavaJVM%20%E8%99%9A%E6%8B%9F%E6%9C%BA-18.jpg"></p><h3 id="ParNew-收集器"><a href="#ParNew-收集器" class="headerlink" title="ParNew 收集器"></a>ParNew 收集器</h3><p>相当于是 Serial 收集器的多线程版本，它能够支持多线程垃圾收集</p><p>除了多线程支持以外，其他内容基本与 Serial 收集器一致</p><p><img src="/../images/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/12%20JavaJVM%20%E8%99%9A%E6%8B%9F%E6%9C%BA-19.jpg"></p><h3 id="Parallel-Scavenge-Parallel-Old-收集器"><a href="#Parallel-Scavenge-Parallel-Old-收集器" class="headerlink" title="Parallel Scavenge &#x2F; Parallel Old 收集器"></a>Parallel Scavenge &#x2F; Parallel Old 收集器</h3><p>Parallel Scavenge 是一款面向新生代的垃圾收集器，采用标记复制算法实现</p><p>Parallel Old 是一款面向老年代的垃圾收集器，采用标记整理算法实现</p><p><img src="/../images/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/12%20JavaJVM%20%E8%99%9A%E6%8B%9F%E6%9C%BA-20.jpg"></p><p>与 ParNew 收集器不同的是，它会自动衡量一个吞吐量，并根据吞吐量来决定每次垃圾回收的时间</p><p>这种自适应机制，能够很好地权衡当前机器的性能，根据性能选择最优方案</p><p>目前 JDK8 采用的就是这种 Parallel Scavenge + Parallel Old 的垃圾回收方案</p><h3 id="CMS-收集器"><a href="#CMS-收集器" class="headerlink" title="CMS 收集器"></a>CMS 收集器</h3><p>它主要采用标记清除算法，第一次实现了让垃圾收集线程与用户线程同时工作</p><p><img src="/../images/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/12%20JavaJVM%20%E8%99%9A%E6%8B%9F%E6%9C%BA-21.jpg"></p><p>它的垃圾回收分为 4 个阶段：</p><ul><li><p><strong>初始标记</strong>：标记出<code>GC Roots</code>能够直接关联到的对象，速度比较快</p></li><li><p><strong>并发标记</strong>：从<code>GC Roots</code>的直接关联对象开始遍历整个对象图的过程</p><p>​                   这个过程耗时较长，但是不需要停顿用户线程</p></li><li><p><strong>重新标记</strong>：再次暂停所有线程进行并行标记，耗时会比初始标记的时间长一点</p></li><li><p><strong>并发清除</strong>：最后直接将所有标记好的无用对象进行删除，与用户线程并发运行</p></li></ul><h3 id="Garbage-First-G1-收集器"><a href="#Garbage-First-G1-收集器" class="headerlink" title="Garbage First (G1) 收集器"></a>Garbage First (G1) 收集器</h3><p>在 JDK9 时，取代了 JDK8 默认的 Parallel Scavenge + Parallel Old 的回收方案</p><p>它将整个 Java 堆划分成<code>2048</code>个大小相同的独立<code>Region</code>块，每个<code>Region</code>块的大小根据堆空间的实际大小而定</p><p>整体被控制在<code>1MB</code>到<code>32MB</code>之间，且都为<code>2</code>的<code>N</code>次幂</p><p>所有的<code>Region</code>块大小相同，且在 JVM 的整个生命周期内不会发生改变</p><p>每一个<code>Region</code>块都可以根据需要，自由决定扮演哪个角色（<code>Eden</code>、<code>Survivor</code>和老年代）</p><p>收集器会根据对应的角色采用不同的回收策略</p><p>此外，G1 收集器还存在一个<code>Humongous</code>区域，它专门用于存放大对象（一般认为大小超过了<code>Region</code>容量的一半的对象为大对象）</p><p>这样，新生代、老年代在物理上，不再是一个连续的内存区域，而是到处分布的</p><p><img src="/../images/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/12%20JavaJVM%20%E8%99%9A%E6%8B%9F%E6%9C%BA-22.jpg"></p><p>它的回收过程与 CMS 大体类似：</p><p><img src="/../images/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/12%20JavaJVM%20%E8%99%9A%E6%8B%9F%E6%9C%BA-23.jpg"></p><p>它的垃圾回收分为 4 个阶段：</p><ul><li><p><strong>初始标记</strong>：标记出<code>GC Roots</code>能够直接关联到的对象，并且修改<code>TAMS</code>指针的值</p><p>​                   让下一阶段用户线程并发运行时，能正确地在可用的<code>Region</code>中分配新对象</p><p>​                   这个阶段耗时很短，而且是借用进行<code>Minor GC</code>的时候同步完成的，所以 G1 收集器在这个阶段实际并没有额外的停顿</p></li><li><p><strong>并发标记</strong>：从<code>GC Roots</code>的直接关联对象开始遍历整个对象图的过程</p><p>​                   这个过程耗时较长，但是不需要停顿用户线程</p></li><li><p><strong>最终标记</strong>：对用户线程做一个短暂的暂停，用于处理并发标记阶段漏标的那一部分对象</p></li><li><p><strong>筛选回收</strong>：负责更新<code>Region</code>的统计数据，对各个<code>Region</code>的回收价值和成本进行排序</p><p>​   根据用户所期望的停顿时间来制定回收计划，可以自由选择任意多个<code>Region</code>构成回收集</p><p>​       然后把决定回收的那一部分<code>Region</code>的存活对象复制到空的<code>Region</code>中，再清理掉整个旧的<code>Region</code>的全部空间</p><p>​   这里的操作涉及存活对象的移动，是必须暂停用户线程，由多个收集器线程并行完成的</p></li></ul><h1 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h1><h2 id="强引用"><a href="#强引用" class="headerlink" title="强引用"></a>强引用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br></pre></td></tr></table></figure><p>只要强引用存在，JVM 就不会回收被引用的对象</p><p>即使系统内存不足，强引用对象也不会被回收</p><h2 id="软引用"><a href="#软引用" class="headerlink" title="软引用"></a>软引用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SoftReference&lt;Object&gt; softRef = <span class="keyword">new</span> <span class="title class_">SoftReference</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">Object</span>());</span><br></pre></td></tr></table></figure><p>JVM 会在内存不足时回收软引用指向的对象</p><p>但如果内存充足，软引用对象会一直存在</p><h2 id="弱引用"><a href="#弱引用" class="headerlink" title="弱引用"></a>弱引用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WeakReference&lt;Object&gt; weakRef = <span class="keyword">new</span> <span class="title class_">WeakReference</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">Object</span>());</span><br></pre></td></tr></table></figure><p>当 JVM 进行垃圾回收时，如果发现一个对象只被弱引用指向</p><p>则无论内存是否充足，该对象都会被回收</p><h2 id="虚引用"><a href="#虚引用" class="headerlink" title="虚引用"></a>虚引用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PhantomReference&lt;Object&gt; phantomRef = <span class="keyword">new</span> <span class="title class_">PhantomReference</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">Object</span>(), <span class="keyword">new</span> <span class="title class_">ReferenceQueue</span>&lt;&gt;());</span><br></pre></td></tr></table></figure><p>虚引用的存在不会影响对象的生命周期，只有在对象被回收后，虚引用才会被加入到一个引用队列中</p><h1 id="类与类加载"><a href="#类与类加载" class="headerlink" title="类与类加载"></a>类与类加载</h1><h2 id="类文件结构"><a href="#类文件结构" class="headerlink" title="类文件结构"></a>类文件结构</h2><h3 id="类文件信息"><a href="#类文件信息" class="headerlink" title="类文件信息"></a>类文件信息</h3><p>可以使用<code>WinHex</code>软件来以十六进制查看字节码文件</p><p>之后的演示以下面的代码为例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> i++;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> ++i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将在 IDEA 中编译出来的<code>class</code>文件拖动进<code>WinHex</code></p><p><img src="/../images/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/12%20JavaJVM%20%E8%99%9A%E6%8B%9F%E6%9C%BA-24.jpg"></p><h4 id="1-模数"><a href="#1-模数" class="headerlink" title="1. 模数"></a>1. 模数</h4><p><img src="/../images/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/12%20JavaJVM%20%E8%99%9A%E6%8B%9F%E6%9C%BA-25.jpg"></p><p>前<code>4</code>个字节组成了魔数，字节码文件的魔数为：<code>CAFEBABE</code></p><p>它在字节码文件中的作用是帮助 JVM 确认文件的格式是否正确</p><p>当 JVM 读取一个<code>.class</code>文件时，会首先检查这个标识符，以确保它是一个合法的 Java 类文件</p><h4 id="2-版本号"><a href="#2-版本号" class="headerlink" title="2. 版本号"></a>2. 版本号</h4><p>紧接着<code>4</code>个字节存储的是字节码文件的版本号</p><p>前<code>2</code>个字节是次要版本号，后<code>2</code>个字节是主要版本号</p><p>像上面的主要版本号为<code>34</code>，转为十进制后为<code>52</code>，它代表的是 JDK8 的字节码文件</p><table><thead><tr><th align="center">主要版本号</th><th align="center">JDK 版本</th></tr></thead><tbody><tr><td align="center">49</td><td align="center">JDK 5</td></tr><tr><td align="center">50</td><td align="center">JDK 6</td></tr><tr><td align="center">51</td><td align="center">JDK 7</td></tr><tr><td align="center">52</td><td align="center">JDK 8</td></tr><tr><td align="center">53</td><td align="center">JDK 9</td></tr><tr><td align="center">…</td><td align="center">…</td></tr><tr><td align="center">64</td><td align="center">JDK 20</td></tr></tbody></table><p>JVM 会根据版本号决定是否能够运行，Java 版本是向下兼容的</p><h4 id="3-常量池大小"><a href="#3-常量池大小" class="headerlink" title="3. 常量池大小"></a>3. 常量池大小</h4><p>紧接着<code>2</code>个字节存放了类中常量池大小</p><p>（这里的常量并不是指手动创建的<code>final</code>类型常量，而是程序运行一些需要用到的常量数据，比如字面量和符号引用等）</p><p>由于常量的数量不是确定的，所以在最开始的位置会存放常量池中常量的数量</p><p>（比如这里是<code>18</code>，翻译为十进制就是<code>24</code>，从<code>1</code>开始算，所以实际上有<code>23</code>个常量）</p><h4 id="4-常量池数据"><a href="#4-常量池数据" class="headerlink" title="4. 常量池数据"></a>4. 常量池数据</h4><p>每一项常量池里面的数据都是一个表，它们都是以<code>_info</code>结尾的</p><p><img src="/../images/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/12%20JavaJVM%20%E8%99%9A%E6%8B%9F%E6%9C%BA-26.jpg"></p><h4 id="5-常量池数据表"><a href="#5-常量池数据表" class="headerlink" title="5. 常量池数据表"></a>5. 常量池数据表</h4><p><code>1</code>号常量：</p><p><img src="/../images/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/12%20JavaJVM%20%E8%99%9A%E6%8B%9F%E6%9C%BA-27.jpg"></p><p>第一行是一个<code>1</code>个字节的无符号数，用于表示当前常量类型</p><table><thead><tr><th align="center">常量类型</th><th align="center">标志</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>CONSTANT_Utf8_info</code></td><td align="center">1</td><td align="center"><code>UTF-8</code>编码格式的字符串</td></tr><tr><td align="center"><code>CONSTANT_Integer_info</code></td><td align="center">3</td><td align="center">整形字面量</td></tr><tr><td align="center"><code>CONSTANT_Class_info</code></td><td align="center">7</td><td align="center">类或接口的符号引用</td></tr><tr><td align="center"><code>CONSTANT_String_info</code></td><td align="center">8</td><td align="center">字符串类型的字面量</td></tr><tr><td align="center"><code>CONSTANT_Fieldref_info</code></td><td align="center">9</td><td align="center">字段的符号引用</td></tr><tr><td align="center"><code>CONSTANT_Methodref_info</code></td><td align="center">10</td><td align="center">方法的符号引用</td></tr><tr><td align="center"><code>CONSTANT_MethodType_info</code></td><td align="center">16</td><td align="center">方法类型</td></tr><tr><td align="center"><code>CONSTANT_NameAndType_info</code></td><td align="center">12</td><td align="center">字段或方法的部分符号引用</td></tr></tbody></table><p>第二三行：</p><table><thead><tr><th align="center">项目</th><th align="center">类型</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">index</td><td align="center">u2</td><td align="center">指向声明方法的类描述父<code>CONSTANT_Class_info</code>索引项</td></tr><tr><td align="center">index</td><td align="center">u2</td><td align="center">指向名称及类型描述符<code>CONSTANT_NameAndType_info</code>索引项</td></tr></tbody></table><p><img src="/../images/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/12%20JavaJVM%20%E8%99%9A%E6%8B%9F%E6%9C%BA-28.jpg"></p><p>第一个索引项指向了第<code>3</code>号常量</p><p><code>3</code>号常量：</p><p><img src="/../images/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/12%20JavaJVM%20%E8%99%9A%E6%8B%9F%E6%9C%BA-29.jpg"></p><p><code>23</code>号常量：</p><p><img src="/../images/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/12%20JavaJVM%20%E8%99%9A%E6%8B%9F%E6%9C%BA-30.jpg"></p><p>指向的<code>UTF-8</code>字符串值为<code>java/lang/Object</code>，说明这个方法是由<code>Object</code>类定义的</p><p>第二项<code>name_and_type_index</code>，指向了<code>21</code>号常量，也就是字段或方法的部分符号引用</p><p><img src="/../images/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/12%20JavaJVM%20%E8%99%9A%E6%8B%9F%E6%9C%BA-31.jpg"></p><p><code>4</code>号和<code>5</code>号常量：</p><p><img src="/../images/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/12%20JavaJVM%20%E8%99%9A%E6%8B%9F%E6%9C%BA-32.jpg"></p><p>方法名称为<code>&lt;init&gt;</code>，说明这是一个构造方法的名称；普通方法名称是什么就是什么</p><p>方法描述符为<code>()V</code>，表示此方法没有任何参数，并且返回值类型为<code>void</code></p><p>描述符对照表：</p><p><img src="/../images/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/12%20JavaJVM%20%E8%99%9A%E6%8B%9F%E6%9C%BA-33.jpg"></p><table><thead><tr><th align="center">方法名称</th><th align="center">描述符</th></tr></thead><tbody><tr><td align="center"><code>public int test(double a, char c)&#123;&#125;</code></td><td align="center"><code>(DC)I</code></td></tr><tr><td align="center"><code>public String test(Object obj)&#123;&#125;</code></td><td align="center"><code>(Ljava/lang/Object;)Ljava/lang/String</code></td></tr><tr><td align="center"><code>public void test(int[][] arr)</code></td><td align="center"><code>([[I)V</code></td></tr></tbody></table><p>所以，这里表示的实际上就是此方法是一个无参构造方法，并且是属于<code>Object</code>类的</p><h4 id="6-访问标志"><a href="#6-访问标志" class="headerlink" title="6. 访问标志"></a>6. 访问标志</h4><p>访问标志就是类的种类以及类上添加的一些关键字等内容</p><p><img src="/../images/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/12%20JavaJVM%20%E8%99%9A%E6%8B%9F%E6%9C%BA-34.jpg"></p><p><img src="/../images/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/12%20JavaJVM%20%E8%99%9A%E6%8B%9F%E6%9C%BA-35.jpg"></p><p>访问标志值按类的属性按位异或进行运算</p><h4 id="7-类索引、父类索引、接口索引"><a href="#7-类索引、父类索引、接口索引" class="headerlink" title="7. 类索引、父类索引、接口索引"></a>7. 类索引、父类索引、接口索引</h4><p><img src="/../images/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/12%20JavaJVM%20%E8%99%9A%E6%8B%9F%E6%9C%BA-36.jpg"></p><p>它们的值也是指向常量池中的值</p><p>其中<code>2</code>号常量正是存储的当前类信息，<code>3</code>号常量存储的是父类信息</p><h4 id="8-字段表"><a href="#8-字段表" class="headerlink" title="8. 字段表"></a>8. 字段表</h4><p>之后的演示以下面的代码为例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> i++;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> ++i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/../images/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/12%20JavaJVM%20%E8%99%9A%E6%8B%9F%E6%9C%BA-37.jpg"></p><p>一共有四个<code>2</code>字节的数据</p><p>第一个数据<code>access_flags</code>是字段的访问标志</p><p><img src="/../images/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/12%20JavaJVM%20%E8%99%9A%E6%8B%9F%E6%9C%BA-38.jpg"></p><p>第二个数据<code>name_index</code>是字段的名称常量，这里指向的是<code>5</code>号常量</p><p><img src="/../images/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/12%20JavaJVM%20%E8%99%9A%E6%8B%9F%E6%9C%BA-39.jpg"></p><p>第三个数据<code>descirptor_index</code>是描述符</p><p>第四个数据<code>attrbutes_count</code>是属性计数器，用于描述一些额外信息</p><h4 id="9-方法表"><a href="#9-方法表" class="headerlink" title="9. 方法表"></a>9. 方法表</h4><p><img src="/../images/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/12%20JavaJVM%20%E8%99%9A%E6%8B%9F%E6%9C%BA-40.jpg"></p><p>一共有三个方法</p><p>其中第一个方法的方法名称为<code>&lt;init&gt;</code>，表示它是一个构造方法</p><p>第二个方法看名称，很显然就是<code>main</code>方法</p><p>最后一个方法名称为<code>&lt;clinit&gt;</code>，这个是类在初始化时会调用的方法（是隐式的，自动生成的）</p><p>它主要是用于静态变量初始化语句和静态块的执行</p><h4 id="10-属性表"><a href="#10-属性表" class="headerlink" title="10.  属性表"></a>10.  属性表</h4><p>实际上在类中、字段中、方法中都可以携带自己的属性表</p><p>属性表存放的正是代码、本地变量等数据</p><p>比如<code>main</code>方法就存在<code>4</code>个本地变量：</p><p><img src="/../images/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/12%20JavaJVM%20%E8%99%9A%E6%8B%9F%E6%9C%BA-41.jpg"></p><p>属性信息呈现套娃状态</p><p>在此方法中的属性包括了一个<code>Code</code>属性，存放代码编译之后的字节码指令，而且又嵌套了本地变量表和源码行号表</p><p><code>Code</code>中存放的就是所有的字节码指令：</p><p><img src="/../images/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/12%20JavaJVM%20%E8%99%9A%E6%8B%9F%E6%9C%BA-42.jpg"></p><h4 id="11-本地变量表"><a href="#11-本地变量表" class="headerlink" title="11. 本地变量表"></a>11. 本地变量表</h4><p>存放了方法中要用到的局部变量：</p><p><img src="/../images/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/12%20JavaJVM%20%E8%99%9A%E6%8B%9F%E6%9C%BA-43.jpg"></p><p>一共有四个本地变量（<code>args, i, a, b</code>）</p><p>并且表中存放了本地变量的长度、名称、描述符等内容</p><h4 id="12-类属性"><a href="#12-类属性" class="headerlink" title="12. 类属性"></a>12. 类属性</h4><p>此属性记录的是源文件名称</p><p><img src="/../images/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/12%20JavaJVM%20%E8%99%9A%E6%8B%9F%E6%9C%BA-44.jpg"></p><h3 id="字节码指令"><a href="#字节码指令" class="headerlink" title="字节码指令"></a>字节码指令</h3><p>虚拟机的指令是由一个字节长度的、代表某种特定操作含义的数字（操作码，类似于机器语言）</p><p>操作码后面也可以携带<code>0</code>个或多个参数一起执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> i++;</span><br><span class="line">    <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> ++i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译为字节码文件：</p><p><img src="/../images/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/12%20JavaJVM%20%E8%99%9A%E6%8B%9F%E6%9C%BA-45.jpg"></p><ul><li><code>bipush</code>：将<code>10</code>送至操作数栈顶</li><li><code>istore_1</code>：将操作数栈顶的值存进<code>1</code>号本地变量，也就是变量<code>i</code>中</li><li><code>iload_1</code>：将<code>1</code>号本地变量中的值推向操作数栈顶</li><li><code>iinc 1 by 1</code>：将<code>1</code>号本地变量的值增加<code>1</code></li><li><code>istore_2</code>：将操作数栈顶的值<code>10</code>存入<code>2</code>号本地变量</li><li><code>iinc 1 by 1</code>：将<code>1</code>号本地变量的值增加<code>1</code></li><li><code>iload_1</code>：将<code>1</code>号本地变量中的值推向操作数栈顶</li><li><code>istore_3</code>：将操作数栈顶的值<code>12</code>存入<code>2</code>号本地变量</li><li><code>return</code>：结束</li></ul><p><img src="/../images/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/12%20JavaJVM%20%E8%99%9A%E6%8B%9F%E6%9C%BA-46.jpg"></p><h3 id="ASM-字节码编程"><a href="#ASM-字节码编程" class="headerlink" title="ASM 字节码编程"></a>ASM 字节码编程</h3><p><strong>演示</strong>：使用 <strong>ASM 字节码编程</strong>创建下面的<code>Main</code>类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Main</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        System.out.println(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-获取-ClassWriter-对象"><a href="#1-获取-ClassWriter-对象" class="headerlink" title="1. 获取 ClassWriter 对象"></a>1. 获取 ClassWriter 对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ClassWriter</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassWriter</span>(ClassWriter.COMPUTE_MAXS);</span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><ul><li><code> </code>：不会自动计算操作数栈和局部临时变量表大小，需要自己手动来指定</li><li><code>ClassWriter.COMPUTE_MAXS</code>：会自动计算上述操作数栈和局部临时变量表大小，但需要手动触发</li><li><code>ClassWriter.COMPUTE_FRAMES</code>：不仅会计算上述操作数栈和局部临时变量表大小，而且会自动计算<code>StackMapFrames</code></li></ul><h4 id="2-指定类的一些基本信息"><a href="#2-指定类的一些基本信息" class="headerlink" title="2. 指定类的一些基本信息"></a>2. 指定类的一些基本信息</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">writer.visit(V1_8, ACC_PUBLIC, <span class="string">&quot;com/test/Main&quot;</span>, <span class="literal">null</span>, <span class="string">&quot;java/lang/Object&quot;</span>, <span class="literal">null</span>);</span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><ul><li><code>V1_8</code>：字节码文件的版本</li><li><code>ACC_PUBLIC</code>：访问权限</li><li><code>&quot;com/test/Main&quot;</code>：类名称</li><li><code>null</code>：标签</li><li><code>&quot;java/lang/Object&quot;</code>：父类</li><li><code>null</code>：接口</li></ul><h4 id="3-添加无参构造方法"><a href="#3-添加无参构造方法" class="headerlink" title="3. 添加无参构造方法"></a>3. 添加无参构造方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">writer.visitMethod(ACC_PUBLIC, <span class="string">&quot;&lt;init&gt;&quot;</span>, <span class="string">&quot;()V&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>); <span class="comment">// 添加一个新方法</span></span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><ul><li><code>ACC_PUBLIC</code>：访问权限</li><li><code>&quot;&lt;init&gt;&quot;</code>：方法名称</li><li><code>&quot;()V&quot;</code>：方法修饰符</li><li><code>null</code>：描述符</li><li><code>null</code>：异常</li></ul><h4 id="4-调用父类构造方法"><a href="#4-调用父类构造方法" class="headerlink" title="4. 调用父类构造方法"></a>4. 调用父类构造方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">MethodVisitor</span> <span class="variable">visitor</span> <span class="operator">=</span> writer.visitMethod(ACC_PUBLIC, <span class="string">&quot;&lt;init&gt;&quot;</span>, <span class="string">&quot;()V&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>); <span class="comment">// 创建一个公共构造方法</span></span><br><span class="line">visitor.visitCode(); <span class="comment">// 开始生成方法的字节码</span></span><br><span class="line"></span><br><span class="line"><span class="type">Label</span> <span class="variable">l1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Label</span>(); <span class="comment">// 创建一个标签用于标记代码位置</span></span><br><span class="line">visitor.visitLabel(l1); <span class="comment">// 将标签 l1 添加到当前代码流</span></span><br><span class="line">visitor.visitLineNumber(<span class="number">11</span>, l1); <span class="comment">// 指定源代码行号与标签 l1 关联</span></span><br><span class="line"></span><br><span class="line">visitor.visitVarInsn(ALOAD, <span class="number">0</span>); <span class="comment">// 将当前对象引用（this）推入操作数栈</span></span><br><span class="line">visitor.visitMethodInsn(INVOKESPECIAL, <span class="string">&quot;java/lang/Object&quot;</span>, <span class="string">&quot;&lt;init&gt;&quot;</span>, <span class="string">&quot;()V&quot;</span>, <span class="literal">false</span>); <span class="comment">// 调用父类的构造函数 java/lang/Object 的 &lt;init&gt; 方法</span></span><br><span class="line">visitor.visitInsn(RETURN); <span class="comment">// 返回方法，无返回值</span></span><br><span class="line"></span><br><span class="line"><span class="type">Label</span> <span class="variable">l2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Label</span>(); <span class="comment">// 创建另一个标签用于结束位置</span></span><br><span class="line">visitor.visitLabel(l2); <span class="comment">// 将标签 l2 添加到当前代码流</span></span><br><span class="line">visitor.visitLocalVariable(<span class="string">&quot;this&quot;</span>, <span class="string">&quot;Lcom/test/Main;&quot;</span>, <span class="literal">null</span>, l1, l2, <span class="number">0</span>); <span class="comment">// 在本地变量表中添加 this 变量</span></span><br><span class="line"></span><br><span class="line">visitor.visitMaxs(<span class="number">1</span>, <span class="number">1</span>); <span class="comment">// 设置方法的最大栈深度和本地变量数量</span></span><br><span class="line">visitor.visitEnd(); <span class="comment">// 结束方法的字节码生成</span></span><br></pre></td></tr></table></figure><h4 id="5-编写-main-方法"><a href="#5-编写-main-方法" class="headerlink" title="5. 编写 main 方法"></a>5. 编写 main 方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">MethodVisitor</span> <span class="variable">v2</span> <span class="operator">=</span> writer.visitMethod(ACC_PUBLIC | ACC_STATIC, <span class="string">&quot;main&quot;</span>, <span class="string">&quot;([Ljava/lang/String;)V&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>); <span class="comment">// 创建一个 main 方法</span></span><br><span class="line">v2.visitCode(); <span class="comment">// 开始生成方法的字节码</span></span><br><span class="line"></span><br><span class="line"><span class="type">Label</span> <span class="variable">l3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Label</span>(); <span class="comment">// 记录起始行信息</span></span><br><span class="line">v2.visitLabel(l3); <span class="comment">// 将标签 l3 添加到当前代码流</span></span><br><span class="line">v2.visitLineNumber(<span class="number">13</span>, l3); <span class="comment">// 指定源代码行号与标签 l3 关联</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 首先是 int a = 10 的操作，执行指令依次为：</span></span><br><span class="line"><span class="comment">// bipush 10     将 10 推向操作数栈顶</span></span><br><span class="line"><span class="comment">// istore_1      将操作数栈顶元素保存到 1 号本地变量 a 中</span></span><br><span class="line">v2.visitIntInsn(BIPUSH, <span class="number">10</span>); <span class="comment">// 将 10 推入操作数栈</span></span><br><span class="line">v2.visitVarInsn(ISTORE, <span class="number">1</span>); <span class="comment">// 将栈顶元素存入本地变量 a</span></span><br><span class="line"></span><br><span class="line"><span class="type">Label</span> <span class="variable">l4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Label</span>();</span><br><span class="line">v2.visitLabel(l4); <span class="comment">// 创建并添加标签 l4</span></span><br><span class="line">v2.visitLineNumber(<span class="number">14</span>, l4); <span class="comment">// 指定源代码行号与标签 l4 关联</span></span><br><span class="line"></span><br><span class="line">v2.visitFieldInsn(GETSTATIC, <span class="string">&quot;java/lang/System&quot;</span>, <span class="string">&quot;out&quot;</span>, <span class="string">&quot;Ljava/io/PrintStream;&quot;</span>); <span class="comment">// 获取 System.out</span></span><br><span class="line">v2.visitVarInsn(ILOAD, <span class="number">1</span>); <span class="comment">// 加载本地变量 a 的值</span></span><br><span class="line">v2.visitMethodInsn(INVOKEVIRTUAL, <span class="string">&quot;java/io/PrintStream&quot;</span>, <span class="string">&quot;println&quot;</span>, <span class="string">&quot;(I)V&quot;</span>, <span class="literal">false</span>); <span class="comment">// 调用 println 方法</span></span><br><span class="line"></span><br><span class="line"><span class="type">Label</span> <span class="variable">l6</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Label</span>();</span><br><span class="line">v2.visitLabel(l6); <span class="comment">// 创建并添加标签 l6</span></span><br><span class="line">v2.visitLineNumber(<span class="number">15</span>, l6); <span class="comment">// 指定源代码行号与标签 l6 关联</span></span><br><span class="line"></span><br><span class="line">v2.visitInsn(RETURN); <span class="comment">// 返回方法，无返回值</span></span><br><span class="line"><span class="type">Label</span> <span class="variable">l7</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Label</span>();</span><br><span class="line">v2.visitLabel(l7); <span class="comment">// 创建并添加标签 l7</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 最后是本地变量表中的各个变量</span></span><br><span class="line">v2.visitLocalVariable(<span class="string">&quot;args&quot;</span>, <span class="string">&quot;[Ljava/lang/String;&quot;</span>, <span class="literal">null</span>, l3, l7, <span class="number">0</span>); <span class="comment">// args 变量</span></span><br><span class="line">v2.visitLocalVariable(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;I&quot;</span>, <span class="literal">null</span>, l4, l7, <span class="number">1</span>); <span class="comment">// a 变量</span></span><br><span class="line">v2.visitMaxs(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">// 设置方法的最大栈深度和本地变量数量</span></span><br><span class="line">v2.visitEnd(); <span class="comment">// 结束方法的字节码生成</span></span><br></pre></td></tr></table></figure><h4 id="6-保存字节码文件"><a href="#6-保存字节码文件" class="headerlink" title="6. 保存字节码文件"></a>6. 保存字节码文件</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ClassWriter</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassWriter</span>(ClassWriter.COMPUTE_MAXS);</span><br><span class="line">        writer.visit(V1_8, ACC_PUBLIC,<span class="string">&quot;com/test/Main&quot;</span>, <span class="literal">null</span>, <span class="string">&quot;java/lang/Object&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">        writer.visitMethod(ACC_PUBLIC, <span class="string">&quot;&lt;init&gt;&quot;</span>, <span class="string">&quot;()V&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="type">MethodVisitor</span> <span class="variable">visitor</span> <span class="operator">=</span> writer.visitMethod(ACC_PUBLIC, <span class="string">&quot;&lt;init&gt;&quot;</span>, <span class="string">&quot;()V&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>); <span class="comment">// 无参构造</span></span><br><span class="line">        visitor.visitCode();</span><br><span class="line">        <span class="type">Label</span> <span class="variable">l1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Label</span>();</span><br><span class="line">        visitor.visitLabel(l1);</span><br><span class="line">        visitor.visitLineNumber(<span class="number">11</span>, l1);</span><br><span class="line">        visitor.visitVarInsn(ALOAD, <span class="number">0</span>); <span class="comment">// 将当前对象引用（this）推入操作数栈</span></span><br><span class="line">        visitor.visitMethodInsn(INVOKESPECIAL, <span class="string">&quot;java/lang/Object&quot;</span>, <span class="string">&quot;&lt;init&gt;&quot;</span>, <span class="string">&quot;()V&quot;</span>, <span class="literal">false</span>); <span class="comment">// 调用父类构造函数</span></span><br><span class="line">        visitor.visitInsn(RETURN);</span><br><span class="line">        <span class="type">Label</span> <span class="variable">l2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Label</span>();</span><br><span class="line">        visitor.visitLabel(l2);</span><br><span class="line">        visitor.visitLocalVariable(<span class="string">&quot;this&quot;</span>, <span class="string">&quot;Lcom/test/Main;&quot;</span>, <span class="literal">null</span>, l1, l2, <span class="number">0</span>); <span class="comment">// 在本地变量表中添加 this 变量</span></span><br><span class="line">        visitor.visitMaxs(<span class="number">1</span>, <span class="number">1</span>); <span class="comment">// 设置方法的最大栈深度和本地变量数量</span></span><br><span class="line">        visitor.visitEnd();</span><br><span class="line">        </span><br><span class="line">        <span class="type">MethodVisitor</span> <span class="variable">v2</span> <span class="operator">=</span> writer.visitMethod(ACC_PUBLIC | ACC_STATIC, <span class="string">&quot;main&quot;</span>, <span class="string">&quot;([Ljava/lang/String;)V&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>); <span class="comment">// 创建一个 main 方法</span></span><br><span class="line">        v2.visitCode();</span><br><span class="line">        <span class="type">Label</span> <span class="variable">l3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Label</span>();</span><br><span class="line">        v2.visitLabel(l3);</span><br><span class="line">        v2.visitLineNumber(<span class="number">13</span>, l3);</span><br><span class="line">        v2.visitIntInsn(BIPUSH, <span class="number">10</span>); <span class="comment">// 将 10 推入操作数栈</span></span><br><span class="line">        v2.visitVarInsn(ISTORE, <span class="number">1</span>); <span class="comment">// 将栈顶元素存入本地变量 a</span></span><br><span class="line">        <span class="type">Label</span> <span class="variable">l4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Label</span>();</span><br><span class="line">        v2.visitLabel(l4);</span><br><span class="line">        v2.visitLineNumber(<span class="number">14</span>, l4);</span><br><span class="line">        v2.visitFieldInsn(GETSTATIC, <span class="string">&quot;java/lang/System&quot;</span>, <span class="string">&quot;out&quot;</span>, <span class="string">&quot;Ljava/io/PrintStream;&quot;</span>); <span class="comment">// 获取 System.out</span></span><br><span class="line">        v2.visitVarInsn(ILOAD, <span class="number">1</span>); <span class="comment">// 加载本地变量 a 的值</span></span><br><span class="line">        v2.visitMethodInsn(INVOKEVIRTUAL, <span class="string">&quot;java/io/PrintStream&quot;</span>, <span class="string">&quot;println&quot;</span>, <span class="string">&quot;(I)V&quot;</span>, <span class="literal">false</span>); <span class="comment">// 调用 println 方法</span></span><br><span class="line">        <span class="type">Label</span> <span class="variable">l6</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Label</span>();</span><br><span class="line">        v2.visitLabel(l6);</span><br><span class="line">        v2.visitLineNumber(<span class="number">15</span>, l6);</span><br><span class="line">        v2.visitInsn(RETURN);</span><br><span class="line">        <span class="type">Label</span> <span class="variable">l7</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Label</span>();</span><br><span class="line">        v2.visitLabel(l7);</span><br><span class="line">        v2.visitLocalVariable(<span class="string">&quot;args&quot;</span>, <span class="string">&quot;[Ljava/lang/String;&quot;</span>, <span class="literal">null</span>, l3, l7, <span class="number">0</span>); <span class="comment">// args 变量</span></span><br><span class="line">        v2.visitLocalVariable(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;I&quot;</span>, <span class="literal">null</span>, l4, l7, <span class="number">1</span>); <span class="comment">// a 变量</span></span><br><span class="line">        v2.visitMaxs(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">// 设置方法的最大栈深度和本地变量数量</span></span><br><span class="line">        v2.visitEnd();</span><br><span class="line">        </span><br><span class="line">        writer.visitEnd(); <span class="comment">// 结束编辑</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>(<span class="type">FileOutputStream</span> <span class="variable">stream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;./Main.class&quot;</span>)) &#123;</span><br><span class="line">            stream.write(writer.toByteArray()); <span class="comment">// 将字节码文件转换为 byte 数组，并保存到根目录下</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-IDEA-反编译"><a href="#7-IDEA-反编译" class="headerlink" title="7. IDEA 反编译"></a>7. IDEA 反编译</h4><p>结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Main</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        System.out.println(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="类加载机制"><a href="#类加载机制" class="headerlink" title="类加载机制"></a>类加载机制</h2><h3 id="类加载触发条件"><a href="#类加载触发条件" class="headerlink" title="类加载触发条件"></a>类加载触发条件</h3><p>一般在这些情况下，如果类没有被加载，那么会被自动加载：</p><ul><li>使用<code>new</code>关键字创建对象</li><li>使用类的非<code>final</code>类型的静态字段或静态方法</li><li>使用反射对类信息进行获取的时候</li><li>加载一个类的子类</li><li>加载接口的实现类，且接口带有<code>default</code>的方法默认实现</li></ul><h3 id="类加载过程"><a href="#类加载过程" class="headerlink" title="类加载过程"></a>类加载过程</h3><p><img src="/../images/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/12%20JavaJVM%20%E8%99%9A%E6%8B%9F%E6%9C%BA-47.jpg"></p><h4 id="1-加载"><a href="#1-加载" class="headerlink" title="1. 加载"></a>1. 加载</h4><p>JVM 将类的二进制字节流读入内存，并创建一个<code>Class</code>对象来表示这个类</p><h4 id="2-校验"><a href="#2-校验" class="headerlink" title="2. 校验"></a>2. 校验</h4><p>校验阶段主要是为了确保加载的类符合 Java 语言规范，保证安全性</p><p>校验主要包括以下几个方面：</p><ul><li><strong>文件格式验证</strong>：检查字节码文件是否符合 <code>.class</code> 文件的格式（魔数，主次版号…）</li><li><strong>元数据验证</strong>：检查类的结构是否符合 Java 语言规范，包括字段、方法等的访问修饰符等</li><li><strong>字节码验证</strong>：检查字节码指令是否合法，确保没有使用不安全的操作，如非法的类型转换</li></ul><h4 id="3-准备"><a href="#3-准备" class="headerlink" title="3. 准备"></a>3. 准备</h4><p>JVM 会为类中的静态变量分配内存，并将它们初始化为默认值（如<code>0</code>、<code>null</code>等）</p><h4 id="4-解析"><a href="#4-解析" class="headerlink" title="4. 解析"></a>4. 解析</h4><p>将常量池中的符号引用转换为直接引用（符号引用是一种更高层次的抽象，直接引用则是内存地址）</p><p>JVM 会将类、字段和方法的符号引用转换为具体的内存地址</p><h4 id="5-初始化"><a href="#5-初始化" class="headerlink" title="5. 初始化"></a>5. 初始化</h4><p>执行类的静态初始化块和静态变量赋值，这是类生命周期中的最后一个阶段</p><p>JVM 会执行<code>&lt;clinit&gt;</code>方法，确保所有静态变量和静态代码块都被正确初始化</p><h4 id="6-使用"><a href="#6-使用" class="headerlink" title="6. 使用"></a>6. 使用</h4><p>类的信息已经完全加载到内存中，并且可以直接使用</p><h4 id="7-卸载"><a href="#7-卸载" class="headerlink" title="7. 卸载"></a>7. 卸载</h4><p>当类不再被使用时，JVM 可以将其从内存中卸载</p><p>类的卸载并不频繁发生，通常在以下情况下进行：</p><ul><li>类加载器被卸载（如应用程序关闭）</li><li>类没有被任何对象引用</li></ul><h3 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h3><p>对于任意一个类，都必须由加载它的类加载器和这个类本身一起共同确立其在 Java 虚拟机中的唯一性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>使用两个不同的类加载器加载<code>Test</code>类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ReflectiveOperationException &#123;</span><br><span class="line">        Class&lt;?&gt; testClass1 = Main.class.getClassLoader().loadClass(<span class="string">&quot;com.test.Test&quot;</span>); <span class="comment">// 使用系统类加载器加载类</span></span><br><span class="line">        <span class="type">CustomClassLoader</span> <span class="variable">customClassLoader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CustomClassLoader</span>(); <span class="comment">// 自定义类加载器实例</span></span><br><span class="line">        Class&lt;?&gt; testClass2 = customClassLoader.loadClass(<span class="string">&quot;com.test.Test&quot;</span>); <span class="comment">// 使用自定义类加载器加载类</span></span><br><span class="line"></span><br><span class="line">        System.out.println(testClass1.getClassLoader()); <span class="comment">// 获取类加载器</span></span><br><span class="line">        System.out.println(testClass2.getClassLoader());</span><br><span class="line"></span><br><span class="line">        System.out.println(testClass1); <span class="comment">// 获取类的 Class 对象</span></span><br><span class="line">        System.out.println(testClass2);</span><br><span class="line"></span><br><span class="line">        System.out.println(testClass1 == testClass2); <span class="comment">// false</span></span><br><span class="line">        </span><br><span class="line">        <span class="type">Test</span> <span class="variable">test</span> <span class="operator">=</span> (Test) testClass2.newInstance(); <span class="comment">// 强制类型转换 -&gt; ClassCastException</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">CustomClassLoader</span> <span class="keyword">extends</span> <span class="title class_">ClassLoader</span> &#123; <span class="comment">// 自定义类加载器</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Class&lt;?&gt; loadClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">            <span class="keyword">try</span> (<span class="type">FileInputStream</span> <span class="variable">stream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;./target/classes/&quot;</span>+name.replace(<span class="string">&quot;.&quot;</span>, <span class="string">&quot;/&quot;</span>)+<span class="string">&quot;.class&quot;</span>)) &#123; <span class="comment">// 读取类文件的字节流</span></span><br><span class="line">                <span class="type">byte</span>[] data = <span class="keyword">new</span> <span class="title class_">byte</span>[stream.available()];</span><br><span class="line">                stream.read(data);</span><br><span class="line">                <span class="keyword">if</span>(data.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="built_in">super</span>.loadClass(name); <span class="comment">// 如果数据为空，则调用父类的加载方法</span></span><br><span class="line">                <span class="keyword">return</span> defineClass(name, data, <span class="number">0</span>, data.length); <span class="comment">// 定义类并返回</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">super</span>.loadClass(name); <span class="comment">// 处理 IO 异常，调用父类的加载方法</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>结论</strong>：</p><blockquote><p>即使两个类是同一个 Class 文件加载的，只要类加载器不同，那么这两个类就是不同的两个类</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JVM </tag>
            
            <tag> JNI </tag>
            
            <tag> JRE </tag>
            
            <tag> 垃圾回收机制 </tag>
            
            <tag> 引用类型 </tag>
            
            <tag> 类与类加载 </tag>
            
            <tag> 内存管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot 框架</title>
      <link href="/2024/09/13/11%20SpringBoot%20%E6%A1%86%E6%9E%B6/"/>
      <url>/2024/09/13/11%20SpringBoot%20%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="创建一个-SpringBoot-项目"><a href="#创建一个-SpringBoot-项目" class="headerlink" title="创建一个 SpringBoot 项目"></a>创建一个 SpringBoot 项目</h1><p><img src="/../images/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/11%20JavaSpringBoot%20%E6%A1%86%E6%9E%B6-1.jpg"></p><p><img src="/../images/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/11%20JavaSpringBoot%20%E6%A1%86%E6%9E%B6-2.jpg"></p><p>可能需要用到的配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p><code>application.properties</code>：整个<code>SpringBoot</code>的配置文件，可以将它的后缀改为<code>.yaml</code>格式或<code>.yml</code>格式</p><p><code>yaml / yml</code>格式</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">一级目录:</span></span><br><span class="line">    <span class="string">二级目录:</span></span><br><span class="line">      <span class="string">三级目录1:</span> <span class="string">值</span></span><br><span class="line">      <span class="string">三级目录2:</span> <span class="string">值</span></span><br><span class="line">      <span class="string">三级目录</span> <span class="attr">List:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">元素1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">元素2</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">元素3</span></span><br></pre></td></tr></table></figure><p>配置数据源</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/my_database</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure><p>配置<code>Security</code>和<code>Mvc</code>配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mvc:</span></span><br><span class="line">    <span class="attr">static-path-pattern:</span> <span class="string">/static/**</span> <span class="comment"># 静态资源解析地址</span></span><br><span class="line">  <span class="attr">security:</span></span><br><span class="line">    <span class="attr">filter:</span></span><br><span class="line">      <span class="attr">order:</span> <span class="number">-100</span> <span class="comment"># 过滤器优先级</span></span><br><span class="line">    <span class="attr">user:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">&#x27;admin&#x27;</span> <span class="comment"># 默认登录用户名</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">&#x27;123456&#x27;</span> <span class="comment"># 默认登录密码</span></span><br><span class="line">      <span class="attr">roles:</span> <span class="comment"># 默认用户的角色</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">admin</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">user</span></span><br></pre></td></tr></table></figure><h2 id="多环境配置"><a href="#多环境配置" class="headerlink" title="多环境配置"></a>多环境配置</h2><ul><li><strong>开发环境</strong>：研发过程中疯狂敲代码修 BUG 的阶段</li><li><strong>生产环境</strong>：部署在服务器上跑的阶段</li></ul><p>创建两个环境的配置文件，分别表示开发环境和生产环境的配置文件</p><p><code>application-dev.yml</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br></pre></td></tr></table></figure><p><code>application-prod.yml</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><p>通过配置文件指定环境配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br></pre></td></tr></table></figure><h2 id="自定义运行器"><a href="#自定义运行器" class="headerlink" title="自定义运行器"></a>自定义运行器</h2><p>在项目启动完成之后，紧接着执行此方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestRunner</span> <span class="keyword">implements</span> <span class="title class_">ApplicationRunner</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="打包运行"><a href="#打包运行" class="headerlink" title="打包运行"></a>打包运行</h2><p><img src="/../images/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/11%20JavaSpringBoot%20%E6%A1%86%E6%9E%B6-3.jpg"></p><p>命令行窗口执行<code>java -jar demo-0.0.1-SNAPSHOT.jar</code>即可</p><h1 id="日志系统"><a href="#日志系统" class="headerlink" title="日志系统"></a>日志系统</h1><p>日志级别从低到高分为<code>TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL</code></p><p><code>SpringBoot</code>默认只会打印<code>INFO</code>及以上级别的信息</p><h2 id="打印日志"><a href="#打印日志" class="headerlink" title="打印日志"></a>打印日志</h2><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>打印日志到控制台</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(<span class="built_in">this</span>.getClass());</span><br><span class="line">logger.info(<span class="string">&quot;日志内容&quot;</span>);</span><br></pre></td></tr></table></figure><p>或者使用<code>@Slf4j</code>注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainController</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/test&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;日志内容&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自定义日志"><a href="#自定义日志" class="headerlink" title="自定义日志"></a>自定义日志</h2><h3 id="配置-Logback"><a href="#配置-Logback" class="headerlink" title="配置 Logback"></a>配置 Logback</h3><p>在类路径下创建<code>logback-spring.xml</code>，以替换原有的日志输出方式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  导入其他配置文件，作为预设  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">resource</span>=<span class="string">&quot;org/springframework/boot/logging/logback/defaults.xml&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--  Appender 作为日志打印器配置，这里命名随意  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;CONSOLE&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;CONSOLE_LOG_PATTERN&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>$&#123;CONSOLE_LOG_CHARSET&#125;<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--  指定日志输出级别，以及启用的 Appender  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;CONSOLE&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>SpringBoot</code>预设的日志格式为</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">included</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">conversionRule</span> <span class="attr">conversionWord</span>=<span class="string">&quot;clr&quot;</span> <span class="attr">converterClass</span>=<span class="string">&quot;org.springframework.boot.logging.logback.ColorConverter&quot;</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">conversionRule</span> <span class="attr">conversionWord</span>=<span class="string">&quot;wex&quot;</span> <span class="attr">converterClass</span>=<span class="string">&quot;org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter&quot;</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">conversionRule</span> <span class="attr">conversionWord</span>=<span class="string">&quot;wEx&quot;</span> <span class="attr">converterClass</span>=<span class="string">&quot;org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;CONSOLE_LOG_PATTERN&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;CONSOLE_LOG_PATTERN:-%clr(%d&#123;$&#123;LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd HH:mm:ss.SSS&#125;&#125;)&#123;faint&#125; %clr($&#123;LOG_LEVEL_PATTERN:-%5p&#125;) %clr($&#123;PID:- &#125;)&#123;magenta&#125; %clr(---)&#123;faint&#125; %clr([%15.15t])&#123;faint&#125; %clr(%-40.40logger&#123;39&#125;)&#123;cyan&#125; %clr(:)&#123;faint&#125; %m%n$&#123;LOG_EXCEPTION_CONVERSION_WORD:-%wEx&#125;&#125;&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;CONSOLE_LOG_CHARSET&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;CONSOLE_LOG_CHARSET:-$&#123;file.encoding:-UTF-8&#125;&#125;&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;FILE_LOG_PATTERN&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;FILE_LOG_PATTERN:-%d&#123;$&#123;LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd HH:mm:ss.SSS&#125;&#125; $&#123;LOG_LEVEL_PATTERN:-%5p&#125; $&#123;PID:- &#125; --- [%t] %-40.40logger&#123;39&#125; : %m%n$&#123;LOG_EXCEPTION_CONVERSION_WORD:-%wEx&#125;&#125;&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;FILE_LOG_CHARSET&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;FILE_LOG_CHARSET:-$&#123;file.encoding:-UTF-8&#125;&#125;&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;org.apache.catalina.startup.DigesterFactory&quot;</span> <span class="attr">level</span>=<span class="string">&quot;ERROR&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;org.apache.catalina.util.LifecycleBase&quot;</span> <span class="attr">level</span>=<span class="string">&quot;ERROR&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;org.apache.coyote.http11.Http11NioProtocol&quot;</span> <span class="attr">level</span>=<span class="string">&quot;WARN&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;org.apache.sshd.common.util.SecurityUtils&quot;</span> <span class="attr">level</span>=<span class="string">&quot;WARN&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;org.apache.tomcat.util.net.NioSelectorPool&quot;</span> <span class="attr">level</span>=<span class="string">&quot;WARN&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;org.eclipse.jetty.util.component.AbstractLifeCycle&quot;</span> <span class="attr">level</span>=<span class="string">&quot;ERROR&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;org.hibernate.validator.internal.util.Version&quot;</span> <span class="attr">level</span>=<span class="string">&quot;WARN&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;org.springframework.boot.actuate.endpoint.jmx&quot;</span> <span class="attr">level</span>=<span class="string">&quot;WARN&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">included</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="打印日志到文件"><a href="#打印日志到文件" class="headerlink" title="打印日志到文件"></a>打印日志到文件</h3><p>配置一个对应的<code>Appender</code>即可</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;FILE&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;FILE_LOG_PATTERN&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">charset</span>&gt;</span>$&#123;FILE_LOG_CHARSET&#125;<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  自定义滚动策略，防止日志文件无限变大，也就是日志文件写到什么时候为止，重新创建一个新的日志文件开始写  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--  文件保存位置以及文件命名规则  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">FileNamePattern</span>&gt;</span>log/%d&#123;yyyy-MM-dd&#125;-spring-%i.log<span class="tag">&lt;/<span class="name">FileNamePattern</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--  到期自动清理日志文件  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">cleanHistoryOnStart</span>&gt;</span>true<span class="tag">&lt;/<span class="name">cleanHistoryOnStart</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--  最大日志保留时间  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>7<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--  最大单个日志文件大小  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>10MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--  指定日志输出级别，以及启用的 Appender  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;FILE&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>%d&#123;yyyy-MM-dd&#125;</code>：当前日期</li><li><code>%i</code>：当天的第 N 个日志</li></ul><h3 id="MDC-上下文"><a href="#MDC-上下文" class="headerlink" title="MDC 上下文"></a>MDC 上下文</h3><p>将需要写入到日志的参数加入到<code>MDC</code>上下文</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">   MDC.put(<span class="string">&quot;reqId&quot;</span>, request.getSession().getId()); <span class="comment">// 加入 MDC 上下文</span></span><br><span class="line">   log.info(<span class="string">&quot;用户访问了一次测试数据&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>向日志中传入自定义参数</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%clr([%X&#123;reqId&#125;])&#123;faint&#125; </span><br></pre></td></tr></table></figure><h3 id="多环境配置-1"><a href="#多环境配置-1" class="headerlink" title="多环境配置"></a>多环境配置</h3><p><code>SpringBoot</code>自带的<code>Logback</code>日志系统也是支持多环境配置的</p><p>演示：开发环境下输出日志到控制台，而生产环境下只需要输出到文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">&quot;dev&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;CONSOLE&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;FILE&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">&quot;prod&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;FILE&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="自定义-Banner"><a href="#自定义-Banner" class="headerlink" title="自定义 Banner"></a>自定义 Banner</h2><p>在类路径下创建<code>banner.txt</code></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">//                          _ooOoo_                               //</span><br><span class="line">//                         o8888888o                              //</span><br><span class="line">//                         88&quot; . &quot;88                              //</span><br><span class="line">//                         (| ^_^ |)                              //</span><br><span class="line">//                         O\  =  /O                              //</span><br><span class="line">//                      ____/`---&#x27;\____                           //</span><br><span class="line">//                    .&#x27;  \\|     |//  `.                         //</span><br><span class="line">//                   /  \\|||  :  |||//  \                        //</span><br><span class="line">//                  /  _||||| -:- |||||-  \                       //</span><br><span class="line">//                  |   | \\\  -  /// |   |                       //</span><br><span class="line">//                  | \_|  &#x27;&#x27;\---/&#x27;&#x27;  |   |                       //</span><br><span class="line">//                  \  .-\__  `-`  ___/-. /                       //</span><br><span class="line">//                ___`. .&#x27;  /--.--\  `. . ___                     //</span><br><span class="line">//              .&quot;&quot; &#x27;&lt;  `.___\_&lt;|&gt;_/___.&#x27;  &gt;&#x27;&quot;&quot;.                  //</span><br><span class="line">//            | | :  `- \`.;`\ _ /`;.`/ - ` : | |                 //</span><br><span class="line">//            \  \ `-.   \_ __\ /__ _/   .-` /  /                 //</span><br><span class="line">//      ========`-.____`-.___\_____/___.-`____.-&#x27;========         //</span><br><span class="line">//                           `=---=&#x27;                              //</span><br><span class="line">//      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^        //</span><br><span class="line">//             佛祖保佑          永无BUG         永不修改             //</span><br></pre></td></tr></table></figure><p>使用在线生成网站进行生成自己的个性Banner：<a href="https://www.bootschool.net/ascii">https://www.bootschool.net/ascii</a></p><p>还可以使用颜色代码来为文本切换颜色</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;AnsiColor.BRIGHT_GREEN&#125; // 绿色</span><br></pre></td></tr></table></figure><h1 id="常用框架介绍"><a href="#常用框架介绍" class="headerlink" title="常用框架介绍"></a>常用框架介绍</h1><h2 id="邮件发送模块"><a href="#邮件发送模块" class="headerlink" title="邮件发送模块"></a>邮件发送模块</h2><p><strong>邮件发送协议：</strong></p><ol><li><code>SMTP</code>协议，主要用于发送邮件</li><li><code>POP3</code>协议，主要用于接收邮件</li></ol><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>填写配置文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mail:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">smtp.163.com</span></span><br><span class="line">    <span class="attr">username:</span> <span class="number">17575010142</span><span class="string">@163.com</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">ENBIYUGNDTDLNWTR</span></span><br></pre></td></tr></table></figure><p>演示：发送邮件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">JavaMailSender sender; <span class="comment">// 专门用于发送邮件的对象</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">SimpleMailMessage</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleMailMessage</span>(); <span class="comment">// 比较简易的邮件封装</span></span><br><span class="line">    message.setSubject(<span class="string">&quot;邮件标题&quot;</span>); <span class="comment">// 邮件标题</span></span><br><span class="line">    message.setText(<span class="string">&quot;邮件内容&quot;</span>); <span class="comment">// 邮件内容</span></span><br><span class="line">    message.setTo(<span class="string">&quot;2178740980@qq.com&quot;</span>); <span class="comment">// 邮件接收者</span></span><br><span class="line">    message.setFrom(<span class="string">&quot;17575010142@163.com&quot;</span>); <span class="comment">// 邮件发送者</span></span><br><span class="line">    sender.send(message); <span class="comment">// 发送</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="接口规则校验"><a href="#接口规则校验" class="headerlink" title="接口规则校验"></a>接口规则校验</h2><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-validation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>演示：开启校验</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Validated</span> <span class="comment">// 开启接口校验</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/submit&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">submit</span><span class="params">([验证注解] String username,</span></span><br><span class="line"><span class="params">                         [验证注解] String password)</span> &#123;</span><br><span class="line">        System.out.println(username.substring(<span class="number">3</span>));</span><br><span class="line">        System.out.println(password.substring(<span class="number">2</span>, <span class="number">10</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;请求成功!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">验证注解</th><th align="center">验证的数据类型</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center"><code>@AssertFalse</code></td><td align="center">Boolean, boolean</td><td align="center">值必须是 false</td></tr><tr><td align="center"><code>@AssertTrue</code></td><td align="center">Boolean, boolean</td><td align="center">值必须是 true</td></tr><tr><td align="center"><code>@NotNull</code></td><td align="center">任意类型</td><td align="center">值不能是 null</td></tr><tr><td align="center"><code>@Null</code></td><td align="center">任意类型</td><td align="center">值必须是 null</td></tr><tr><td align="center"><code>@Min</code></td><td align="center">BigDecimal、BigInteger、byte、short、int、long、double 以及任何 Number 或 CharSequence 子类型</td><td align="center">大于等于 @Min 指定的值</td></tr><tr><td align="center"><code>@Max</code></td><td align="center">BigDecimal、BigInteger、byte、short、int、long、double 以及任何 Number 或 CharSequence 子类型</td><td align="center">小于等于 @Max 指定的值</td></tr><tr><td align="center"><code>@DecimalMin</code></td><td align="center">BigDecimal、BigInteger、byte、short、int、long、double 以及任何 Number 或 CharSequence 子类型</td><td align="center">大于等于 @DecimalMin 指定的值（超高精度）</td></tr><tr><td align="center"><code>@DecimalMax</code></td><td align="center">BigDecimal、BigInteger、byte、short、int、long、double 以及任何 Number 或 CharSequence 子类型</td><td align="center">小于等于 @DecimalMax 指定的值（超高精度）</td></tr><tr><td align="center"><code>@Digits</code></td><td align="center">BigDecimal、BigInteger、byte、short、int、long、double 以及任何 Number 或 CharSequence 子类型</td><td align="center">限制整数位数和小数位数上限</td></tr><tr><td align="center"><code>@Size</code></td><td align="center">字符串、Collection、Map、数组等</td><td align="center">长度在指定区间之内，如字符串长度、集合大小等</td></tr><tr><td align="center"><code>@Past</code></td><td align="center">如 java.util.Date, java.util.Calendar 等日期类型</td><td align="center">值必须比当前时间早</td></tr><tr><td align="center"><code>@Future</code></td><td align="center">如 java.util.Date, java.util.Calendar 等日期类型</td><td align="center">值必须比当前时间晚</td></tr><tr><td align="center"><code>@NotBlank</code></td><td align="center">CharSequence 及其子类</td><td align="center">值不为空，在比较时会去除字符串的首位空格</td></tr><tr><td align="center"><code>@Length</code></td><td align="center">CharSequence 及其子类</td><td align="center">字符串长度在指定区间内</td></tr><tr><td align="center"><code>@NotEmpty</code></td><td align="center">CharSequence 及其子类、Collection、Map、数组</td><td align="center">值不为 null 且长度不为空（字符串长度不为 0，集合大小不为 0）</td></tr><tr><td align="center"><code>@Range</code></td><td align="center">BigDecimal、BigInteger、CharSequence、byte、short、int、long 以及原子类型和包装类型</td><td align="center">值在指定区间内</td></tr><tr><td align="center"><code>@Email</code></td><td align="center">CharSequence 及其子类</td><td align="center">值必须是邮件格式</td></tr><tr><td align="center"><code>@Pattern</code></td><td align="center">CharSequence 及其子类</td><td align="center">值需要与指定的正则表达式匹配</td></tr><tr><td align="center"><code>@Valid</code></td><td align="center">任何非原子类型</td><td align="center">用于验证对象属性</td></tr></tbody></table><p>对于对象类型的参数，需要使用以下方式进行校验</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Account</span> &#123;</span><br><span class="line">    [验证注解] <span class="comment">// 只需要在对应的字段上添加校验的注解即可</span></span><br><span class="line">    String username;</span><br><span class="line">    [验证注解]</span><br><span class="line">    String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/submit&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">submit</span><span class="params">(<span class="meta">@Valid</span> Account account)</span> &#123; <span class="comment">// 添加 @Valid 注解表示需要验证</span></span><br><span class="line">    System.out.println(account.getUsername().substring(<span class="number">3</span>));</span><br><span class="line">    System.out.println(account.getPassword().substring(<span class="number">2</span>, <span class="number">10</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;请求成功!&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="数据交互"><a href="#数据交互" class="headerlink" title="数据交互"></a>数据交互</h1><h2 id="JDBC-框架"><a href="#JDBC-框架" class="headerlink" title="JDBC 框架"></a>JDBC 框架</h2><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置数据源</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/my_database</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure><p>自动注入<code>JDBC</code>模版类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line">JdbcTemplate template;</span><br></pre></td></tr></table></figure><p>查询一条数据，以键值对的形式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, Object&gt; map = template.queryForMap(<span class="string">&quot;select * from user where id = ?&quot;</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>查询一条数据，以对象的形式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    String name;</span><br><span class="line">    String email;</span><br><span class="line">    String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> template.queryForObject(<span class="string">&quot;select * from user where id = ?&quot;</span>,</span><br><span class="line">        (r, i) -&gt; <span class="keyword">new</span> <span class="title class_">User</span>(r.getInt(<span class="number">1</span>), r.getString(<span class="number">2</span>), r.getString(<span class="number">3</span>), r.getString(<span class="number">4</span>)), <span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>执行查询、更新、删除操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">update</span> <span class="operator">=</span> template.update(<span class="string">&quot;select * from user where id = 1&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">update</span> <span class="operator">=</span> template.update(<span class="string">&quot;insert into user values(2, &#x27;admin&#x27;, &#x27;654321@qq.com&#x27;, &#x27;123456&#x27;)&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">update</span> <span class="operator">=</span> template.update(<span class="string">&quot;update user set name = &#x27;test&#x27; where id = 1&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">update</span> <span class="operator">=</span> template.update(<span class="string">&quot;delete from user where id = 1&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="JPA-框架"><a href="#JPA-框架" class="headerlink" title="JPA 框架"></a>JPA 框架</h2><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>创建一个实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Entity</span> <span class="comment">// 实体类</span></span><br><span class="line"><span class="meta">@Table(name = &quot;account&quot;)</span> <span class="comment">// 对应数据库中表的名称</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Account</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span> <span class="comment">// 生成策略，这里配置为自增</span></span><br><span class="line">    <span class="meta">@Column(name = &quot;id&quot;)</span> <span class="comment">// 对应表中的名字</span></span><br><span class="line">    <span class="meta">@Id</span> <span class="comment">// 主键</span></span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;username&quot;)</span> <span class="comment">// 对应表中的名字</span></span><br><span class="line">    String username;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;password&quot;)</span> <span class="comment">// 对应表中的名字</span></span><br><span class="line">    String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建一个<code>Repository</code>实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AccountRepository</span> <span class="keyword">extends</span> <span class="title class_">JpaRepository</span>&lt;Account, Integer&gt; &#123;&#125;</span><br></pre></td></tr></table></figure><ul><li><p><code>Account</code>：实体类</p></li><li><p><code>Integer</code>：主键的类型</p></li></ul><p>自动注入<code>Repository</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line">AccountRepository repository;</span><br></pre></td></tr></table></figure><p>演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">repository.save(<span class="keyword">new</span> <span class="title class_">Account</span>()); <span class="comment">// 插入数据</span></span><br><span class="line">repository.findById(<span class="number">1</span>); <span class="comment">// 查询数据</span></span><br><span class="line">repository.findByIdAndUsername(<span class="number">1</span>, <span class="string">&quot;小明&quot;</span>); <span class="comment">// 联合查询</span></span><br><span class="line">repository.findAllByUsernameLike(<span class="string">&quot;%明%&quot;</span>); <span class="comment">// 模糊查询</span></span><br></pre></td></tr></table></figure><h3 id="方法名称拼接自定义-SQL"><a href="#方法名称拼接自定义-SQL" class="headerlink" title="方法名称拼接自定义 SQL"></a>方法名称拼接自定义 SQL</h3><table><thead><tr><th>属性</th><th>拼接方法名称示例</th><th>执行的语句</th></tr></thead><tbody><tr><td><code>Distinct</code></td><td>findDistinctByLastnameAndFirstname</td><td>select distinct … where x.lastname &#x3D; ?1 and x.firstname &#x3D; ?2</td></tr><tr><td><code>And</code></td><td>findByLastnameAndFirstname</td><td>… where x.lastname &#x3D; ?1 and x.firstname &#x3D; ?2</td></tr><tr><td><code>Or</code></td><td>findByLastnameOrFirstname</td><td>… where x.lastname &#x3D; ?1 or x.firstname &#x3D; ?2</td></tr><tr><td><code>Is</code>，<code>Equals</code></td><td>findByFirstname<code>,</code>findByFirstnameIs<code>,</code>findByFirstnameEquals</td><td>… where x.firstname &#x3D; ?1</td></tr><tr><td><code>Between</code></td><td>findByStartDateBetween</td><td>… where x.startDate between ?1 and ?2</td></tr><tr><td><code>LessThan</code></td><td>findByAgeLessThan</td><td>… where x.age &lt; ?1</td></tr><tr><td><code>LessThanEqual</code></td><td>findByAgeLessThanEqual</td><td>… where x.age &lt;&#x3D; ?1</td></tr><tr><td><code>GreaterThan</code></td><td>findByAgeGreaterThan</td><td>… where x.age &gt; ?1</td></tr><tr><td><code>GreaterThanEqual</code></td><td>findByAgeGreaterThanEqual</td><td>… where x.age &gt;&#x3D; ?1</td></tr><tr><td><code>After</code></td><td>findByStartDateAfter</td><td>… where x.startDate &gt; ?1</td></tr><tr><td><code>Before</code></td><td>findByStartDateBefore</td><td>… where x.startDate &lt; ?1</td></tr><tr><td><code>IsNull</code>，<code>Null</code></td><td>findByAge(Is)Null</td><td>… where x.age is null</td></tr><tr><td><code>IsNotNull</code>，<code>NotNull</code></td><td>findByAge(Is)NotNull</td><td>… where x.age not null</td></tr><tr><td><code>Like</code></td><td>findByFirstnameLike</td><td>… where x.firstname like ?1</td></tr><tr><td><code>NotLike</code></td><td>findByFirstnameNotLike</td><td>… where x.firstname not like ?1</td></tr><tr><td><code>StartingWith</code></td><td>findByFirstnameStartingWith</td><td>… where x.firstname like ?1（参数与附加<code>%</code>绑定）</td></tr><tr><td><code>EndingWith</code></td><td>findByFirstnameEndingWith</td><td>… where x.firstname like ?1（参数与前缀<code>%</code>绑定）</td></tr><tr><td><code>Containing</code></td><td>findByFirstnameContaining</td><td>… where x.firstname like ?1（参数绑定以<code>%</code>包装）</td></tr><tr><td><code>OrderBy</code></td><td>findByAgeOrderByLastnameDesc</td><td>… where x.age &#x3D; ?1 order by x.lastname desc</td></tr><tr><td><code>Not</code></td><td>findByLastnameNot</td><td>… where x.lastname &lt;&gt; ?1</td></tr><tr><td><code>In</code></td><td>findByAgeIn(Collection<Age> ages)</td><td>… where x.age in ?1</td></tr><tr><td><code>NotIn</code></td><td>findByAgeNotIn(Collection<Age> ages)</td><td>… where x.age not in ?1</td></tr><tr><td><code>True</code></td><td>findByActiveTrue</td><td>… where x.active &#x3D; true</td></tr><tr><td><code>False</code></td><td>findByActiveFalse</td><td>… where x.active &#x3D; false</td></tr><tr><td><code>IgnoreCase</code></td><td>findByFirstnameIgnoreCase</td><td>… where UPPER(x.firstname) &#x3D; UPPER(?1)</td></tr></tbody></table><h3 id="关联查询"><a href="#关联查询" class="headerlink" title="关联查询"></a>关联查询</h3><h4 id="一对一"><a href="#一对一" class="headerlink" title="一对一"></a>一对一</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name = &quot;users_detail&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountDetail</span> &#123; <span class="comment">// 用户详细信息</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line">    <span class="meta">@Column(name = &quot;id&quot;)</span></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;address&quot;)</span></span><br><span class="line">    String address;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;email&quot;)</span></span><br><span class="line">    String email;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;phone&quot;)</span></span><br><span class="line">    String phone;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;real_name&quot;)</span></span><br><span class="line">    String realName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name = &quot;users&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Account</span> &#123; <span class="comment">// 用户</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line">    <span class="meta">@Column(name = &quot;id&quot;)</span></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;username&quot;)</span></span><br><span class="line">    String username;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;password&quot;)</span></span><br><span class="line">    String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JoinColumn(name = &quot;detail_id&quot;)</span> <span class="comment">// 对应外键的字段名称</span></span><br><span class="line">    <span class="meta">@OneToOne</span> <span class="comment">// 一对一</span></span><br><span class="line">    AccountDetail detail;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a>一对多</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JoinColumn(name = &quot;uid&quot;)</span> <span class="comment">// 对应外键的字段名称，将 Score 表中的 uid 字段设置为主键</span></span><br><span class="line"><span class="meta">@OneToMany</span> <span class="comment">// 一对多</span></span><br><span class="line">List&lt;Score&gt; scoreList;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name = &quot;users_score&quot;)</span> <span class="comment">// 成绩表</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Score</span> &#123; <span class="comment">// 成绩</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line">    <span class="meta">@Column(name = &quot;id&quot;)</span></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OneToOne</span> <span class="comment">// 一对一对应到学科上</span></span><br><span class="line">    <span class="meta">@JoinColumn(name = &quot;cid&quot;)</span></span><br><span class="line">    Subject subject;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;socre&quot;)</span></span><br><span class="line">    <span class="type">double</span> score;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;uid&quot;)</span></span><br><span class="line">    <span class="type">int</span> uid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name = &quot;subjects&quot;)</span> <span class="comment">// 学科表</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Subject</span> &#123; <span class="comment">// 学科</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line">    <span class="meta">@Column(name = &quot;cid&quot;)</span></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="type">int</span> cid;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;name&quot;)</span></span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;teacher&quot;)</span></span><br><span class="line">    String teacher;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;time&quot;)</span></span><br><span class="line">    <span class="type">int</span> time;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="多对一"><a href="#多对一" class="headerlink" title="多对一"></a>多对一</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ManyToOne</span> <span class="comment">// 多对一</span></span><br><span class="line"><span class="meta">@JoinColumn(name = &quot;tid&quot;)</span> <span class="comment">// 对应外键的字段名称</span></span><br><span class="line">Teacher teacher;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name = &quot;teachers&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Teacher</span> &#123; <span class="comment">// 老师</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line">    <span class="meta">@Column(name = &quot;id&quot;)</span></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;name&quot;)</span></span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;sex&quot;)</span></span><br><span class="line">    String sex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ManyToMany</span> <span class="comment">// 多对多</span></span><br><span class="line"><span class="meta">@JoinTable(name = &quot;teach_relation&quot;, // 多对多中间关联表</span></span><br><span class="line"><span class="meta">        joinColumns = @JoinColumn(name = &quot;cid&quot;), // 当前实体主键在关联表中的字段名称（绑定左表主键名称）</span></span><br><span class="line"><span class="meta">        inverseJoinColumns = @JoinColumn(name = &quot;tid&quot;) // 教师实体主键在关联表中的字段名称（绑定右表主键名称）</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line">List&lt;Teacher&gt; teacher;</span><br></pre></td></tr></table></figure><h3 id="自定义-SQL-语句"><a href="#自定义-SQL-语句" class="headerlink" title="自定义 SQL 语句"></a>自定义 SQL 语句</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AccountRepository</span> <span class="keyword">extends</span> <span class="title class_">JpaRepository</span>&lt;Account, Integer&gt; &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Transactional</span> <span class="comment">// 事务环境</span></span><br><span class="line">    <span class="meta">@Modifying</span> <span class="comment">// DML 操作</span></span><br><span class="line">    <span class="meta">@Query(&quot;update Account set password = ?2 where id = ?1&quot;)</span> <span class="comment">// 这里操作的是一个实体类对应的表，参数使用 ? 代表，后面接第 n 个参数</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">updatePasswordById</span><span class="params">(<span class="type">int</span> id, String newPassword)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="meta">@Modifying</span></span><br><span class="line">    <span class="meta">@Query(value = &quot;update users set password = :pwd where username = :name&quot;, nativeQuery = true)</span> <span class="comment">// 使用原生SQL，和 Mybatis 一样，这里使用[:名称]表示参数</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">updatePasswordByUsername</span><span class="params">(<span class="meta">@Param(&quot;name&quot;)</span> String username, // 使用 <span class="meta">@Param</span> 指定名称</span></span><br><span class="line"><span class="params">                                 <span class="meta">@Param(&quot;pwd&quot;)</span> String newPassword)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="MybatisPlus-框架"><a href="#MybatisPlus-框架" class="headerlink" title="MybatisPlus 框架"></a>MybatisPlus 框架</h2><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置数据源</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/my_database</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure><p>配置实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName(&quot;user&quot;)</span> <span class="comment">// 对应的表名</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@TableId(type = IdType.AUTO)</span> <span class="comment">// 对应的主键</span></span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    <span class="meta">@TableField(&quot;name&quot;)</span> <span class="comment">// 对应的字段</span></span><br><span class="line">    String name;</span><br><span class="line">    <span class="meta">@TableField(&quot;email&quot;)</span></span><br><span class="line">    String email;</span><br><span class="line">    <span class="meta">@TableField(&quot;password&quot;)</span></span><br><span class="line">    String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写<code>Mapper</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123;&#125;</span><br></pre></td></tr></table></figure><ul><li><code>User</code>：实体类</li></ul><p>自动注入<code>UserMapper</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line">UserMapper mapper;</span><br></pre></td></tr></table></figure><p>演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mapper.deleteBatchIds(List.of(<span class="number">1</span>, <span class="number">3</span>)); <span class="comment">// 批处理操作</span></span><br></pre></td></tr></table></figure><h3 id="条件构造器"><a href="#条件构造器" class="headerlink" title="条件构造器"></a>条件构造器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;(); <span class="comment">// 条件构造器</span></span><br><span class="line">wrapper.select(<span class="string">&quot;id&quot;</span>, <span class="string">&quot;name&quot;</span>, <span class="string">&quot;email&quot;</span>, <span class="string">&quot;password&quot;</span>) <span class="comment">// 自定义选择哪些字段</span></span><br><span class="line">       .ge(<span class="string">&quot;id&quot;</span>, <span class="number">2</span>) <span class="comment">// 选择判断 id &gt;= 2 的所有数据</span></span><br><span class="line">       .orderByDesc(<span class="string">&quot;id&quot;</span>); <span class="comment">// 根据 id 字段进行降序排序</span></span><br></pre></td></tr></table></figure><p>使用条件构造器进行查询</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mapper.selectList(wrapper);</span><br></pre></td></tr></table></figure><p>分页查询操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisConfiguration</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">paginationInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>(DbType.MYSQL));</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Page&lt;User&gt; page = mapper.selectPage(Page.of(<span class="number">1</span>, <span class="number">2</span>), Wrappers.emptyWrapper());</span><br><span class="line">page.getRecords();</span><br></pre></td></tr></table></figure><p>数据更新</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">UpdateWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">UpdateWrapper</span>&lt;&gt;();</span><br><span class="line">wrapper.set(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;lbw&quot;</span>)</span><br><span class="line">       .eq(<span class="string">&quot;id&quot;</span>, <span class="number">1</span>);</span><br><span class="line">mapper.update(<span class="literal">null</span>, wrapper);</span><br></pre></td></tr></table></figure><h3 id="接口基本操作"><a href="#接口基本操作" class="headerlink" title="接口基本操作"></a>接口基本操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;User&gt; &#123;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;UserMapper, User&gt; <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;User&gt; users = List.of(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;xxx&quot;</span>), <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;yyy&quot;</span>));</span><br><span class="line">service.saveBatch(users); <span class="comment">// 批量保存</span></span><br></pre></td></tr></table></figure><h3 id="新版代码生成器"><a href="#新版代码生成器" class="headerlink" title="新版代码生成器"></a>新版代码生成器</h3><blockquote><p>能够一键生成好从 Mapper 到 Controller 的全套业务逻辑</p></blockquote><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.velocity<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>velocity-engine-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置数据源</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/my_database</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure><p>一键生成代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">    FastAutoGenerator</span><br><span class="line">            .create(<span class="keyword">new</span> <span class="title class_">DataSourceConfig</span>.Builder(dataSource))</span><br><span class="line">            .globalConfig(builder -&gt; &#123;</span><br><span class="line">                builder.author(<span class="string">&quot;lbw&quot;</span>); <span class="comment">// 作者信息</span></span><br><span class="line">                builder.commentDate(<span class="string">&quot;2024-01-01&quot;</span>); <span class="comment">// 日期信息</span></span><br><span class="line">                builder.outputDir(<span class="string">&quot;src/main/java&quot;</span>); <span class="comment">// 输出目录</span></span><br><span class="line">            &#125;)</span><br><span class="line">            .packageConfig(builder -&gt; builder.parent(<span class="string">&quot;com.example&quot;</span>))</span><br><span class="line">      .strategyConfig(builder -&gt; &#123;</span><br><span class="line">                builder.mapperBuilder()</span><br><span class="line">                       .mapperAnnotation(Mapper.class)</span><br><span class="line">                       .build();</span><br><span class="line">            &#125;)</span><br><span class="line">            .execute();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="前后端分离"><a href="#前后端分离" class="headerlink" title="前后端分离"></a>前后端分离</h1><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p><strong>前端部分：</strong></p><p><img src="/../images/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/11%20JavaSpringBoot%20%E6%A1%86%E6%9E%B6-4.jpg"></p><p>将所有的前端模版文件全部丢进对应的目录中，创建一个<code>web</code>目录到<code>resource</code>目录下，然后放入我们前端模版的全部文件</p><p><img src="/../images/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/11%20JavaSpringBoot%20%E6%A1%86%E6%9E%B6-5.jpg"></p><p>配置配置文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="attr">static-locations:</span> <span class="string">classpath:/web</span></span><br></pre></td></tr></table></figure><p><strong>后端部分：</strong></p><p><img src="/../images/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/11%20JavaSpringBoot%20%E6%A1%86%E6%9E%B6-6.jpg"></p><p>配置配置文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br></pre></td></tr></table></figure><h2 id="基于-Session-的分离（有状态）"><a href="#基于-Session-的分离（有状态）" class="headerlink" title="基于 Session 的分离（有状态）"></a>基于 Session 的分离（有状态）</h2><h3 id="实现登录授权和跨域处理"><a href="#实现登录授权和跨域处理" class="headerlink" title="实现登录授权和跨域处理"></a>实现登录授权和跨域处理</h3><p>后端部分配置<code>Security</code>配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SecurityFilterChain <span class="title function_">filterChain</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> http</span><br><span class="line">                .authorizeHttpRequests(conf -&gt; &#123; <span class="comment">// 配置请求的授权规则</span></span><br><span class="line">                    conf.anyRequest().authenticated(); <span class="comment">// 所有请求都需要经过身份验证</span></span><br><span class="line">                &#125;)</span><br><span class="line">                .formLogin(conf -&gt; &#123; <span class="comment">// 配置表单登录</span></span><br><span class="line">                    conf.loginProcessingUrl(<span class="string">&quot;/api/auth/login&quot;</span>); <span class="comment">// 指定登录请求的 URL</span></span><br><span class="line">                    conf.failureHandler(<span class="built_in">this</span>::onAuthenticationFailure); <span class="comment">// 设置认证失败处理器</span></span><br><span class="line">                    conf.successHandler(<span class="built_in">this</span>::onAuthenticationSuccess); <span class="comment">// 设置认证成功处理器</span></span><br><span class="line">                    conf.permitAll(); <span class="comment">// 允许所有用户访问登录页面</span></span><br><span class="line">                &#125;)</span><br><span class="line">                .cors(conf -&gt; &#123; <span class="comment">// 配置跨域资源共享</span></span><br><span class="line">                    <span class="type">CorsConfiguration</span> <span class="variable">cors</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CorsConfiguration</span>(); <span class="comment">// 创建 CORS 配置对象</span></span><br><span class="line">                    cors.addAllowedOrigin(<span class="string">&quot;http://localhost:8080&quot;</span>); <span class="comment">// 允许来自 localhost:8080 的请求</span></span><br><span class="line">                    cors.setAllowCredentials(<span class="literal">true</span>); <span class="comment">// 允许发送 Cookies</span></span><br><span class="line">                    cors.addAllowedHeader(<span class="string">&quot;*&quot;</span>); <span class="comment">// 允许所有 HTTP header 信息</span></span><br><span class="line">                    cors.addAllowedMethod(<span class="string">&quot;*&quot;</span>); <span class="comment">// 允许所有 HTTP 方法 (GET, POST...)</span></span><br><span class="line">                    cors.addExposedHeader(<span class="string">&quot;*&quot;</span>); <span class="comment">// 允许暴露的 header 信息</span></span><br><span class="line">                    <span class="type">UrlBasedCorsConfigurationSource</span> <span class="variable">source</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UrlBasedCorsConfigurationSource</span>(); <span class="comment">// 创建 URL 基础的 CORS 配置源</span></span><br><span class="line">                    source.registerCorsConfiguration(<span class="string">&quot;/**&quot;</span>, cors); <span class="comment">// 注册对所有路径的 CORS 配置</span></span><br><span class="line">                    conf.configurationSource(source); <span class="comment">// 将配置源应用到 HttpSecurity</span></span><br><span class="line">                &#125;)</span><br><span class="line">                .csrf(AbstractHttpConfigurer::disable) <span class="comment">// 禁用 CSRF 保护</span></span><br><span class="line">                .build(); <span class="comment">// 构建并返回 SecurityFilterChain 对象</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 认证失败时的处理方法</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">onAuthenticationFailure</span><span class="params">(HttpServletRequest request,</span></span><br><span class="line"><span class="params">                                 HttpServletResponse response,</span></span><br><span class="line"><span class="params">                                 Object exceptionOrAuthentication)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/json;charset=utf-8&quot;</span>); <span class="comment">// 设置响应内容类型为 JSON</span></span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> response.getWriter(); <span class="comment">// 获取响应输出流</span></span><br><span class="line">        <span class="keyword">if</span> (exceptionOrAuthentication <span class="keyword">instanceof</span> AccessDeniedException exception) &#123;</span><br><span class="line">            writer.write(RestBean.failure(<span class="number">403</span>, exception.getMessage()).asJsonString()); <span class="comment">// 发送失败信息，包括状态码和错误消息，格式化为 JSON 字符串</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (exceptionOrAuthentication <span class="keyword">instanceof</span> Exception exception) &#123;</span><br><span class="line">            writer.write(RestBean.failure(<span class="number">401</span>, exception.getMessage()).asJsonString());</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (exceptionOrAuthentication <span class="keyword">instanceof</span> Authentication authentication) &#123;</span><br><span class="line">            writer.write(RestBean.success(authentication.getName()).asJsonString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 认证成功时的处理方法</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">onAuthenticationSuccess</span><span class="params">(HttpServletRequest request,</span></span><br><span class="line"><span class="params">                                 HttpServletResponse response,</span></span><br><span class="line"><span class="params">                                 Authentication authentication)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/json;charset=utf-8&quot;</span>); <span class="comment">// 设置响应内容类型为 JSON</span></span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> response.getWriter(); <span class="comment">// 获取响应输出流</span></span><br><span class="line">        writer.write(RestBean.success(authentication.getName()).asJsonString()); <span class="comment">// 发送成功信息，包括认证用户名，格式化为 JSON 字符串</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以使用记录类型来装载响应数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">record</span> <span class="title class_">RestBean</span>&lt;T&gt; (<span class="type">int</span> code, T data, String message) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>&lt;T&gt; RestBean&lt;T&gt; <span class="title function_">success</span><span class="params">(T data)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestBean</span>&lt;&gt;(<span class="number">200</span>, data, <span class="string">&quot;请求成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>&lt;T&gt; RestBean&lt;T&gt; <span class="title function_">failure</span><span class="params">(<span class="type">int</span> code, String message)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestBean</span>&lt;&gt;(code, <span class="literal">null</span>, message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>&lt;T&gt; RestBean&lt;T&gt; <span class="title function_">failure</span><span class="params">(<span class="type">int</span> code)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> failure(code, <span class="string">&quot;请求失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">asJsonString</span><span class="params">()</span> &#123; <span class="comment">// 将当前对象转换为 JSON 格式的字符串</span></span><br><span class="line">        <span class="keyword">return</span> JSONObject.toJSONString(<span class="built_in">this</span>, JSONWriter.Feature.WriteNulls);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="REST-接口规范"><a href="#REST-接口规范" class="headerlink" title="REST 接口规范"></a>REST 接口规范</h4><ul><li><strong>使用HTTP方法</strong>：GET（检索资源）、POST（创建资源）、PUT（更新资源）、DELETE（删除资源）</li><li><strong>无状态</strong>：REST 接口要求实现无状态从而使其独立于之前的请求</li><li><strong>使用正确的HTTP状态码</strong>：在 HTTP 响应中反馈操作的结果（例如，200 表示成功，404 表示资源不存在等）</li><li><strong>URI 应该清晰易懂</strong>：URI 应能清晰地指示出所引用资源的类型和编号，并能易于理解和使用</li></ul><h4 id="响应数据格式"><a href="#响应数据格式" class="headerlink" title="响应数据格式"></a>响应数据格式</h4><p>响应数据格式示例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;code&quot;</span>: <span class="number">200</span>,</span><br><span class="line">  <span class="string">&quot;data&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Tom&quot;</span>,</span><br><span class="line">    <span class="string">&quot;age&quot;</span>: <span class="number">18</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;message&quot;</span>: <span class="string">&quot;查询成功&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><strong>code</strong>：HTTP 状态码，表示请求的结果。常见的有 200（成功）、400（客户端错误）、500（服务器错误）等</p></li><li><p><strong>data</strong>：响应的真实数据。在上例中，是一个包含用户信息的对象</p></li><li><p><strong>message</strong>：请求响应信息，常用于描述请求处理结果</p></li></ul><h3 id="实现一般的业务接口"><a href="#实现一般的业务接口" class="headerlink" title="实现一般的业务接口"></a>实现一般的业务接口</h3><p>演示：编写一个用于获取用户名的接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/name&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> RestBean&lt;String&gt; <span class="title function_">username</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User) SecurityContextHolder.getContext().getAuthentication().getPrincipal();</span><br><span class="line">        <span class="keyword">return</span> RestBean.success(user.getUsername());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后前端就可以通过发起 GET 请求访问到了</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    axios.<span class="title function_">get</span>(<span class="string">&#x27;http://localhost:8081/api/user/name&#x27;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">withCredentials</span>: <span class="literal">true</span> <span class="comment">// 需要携带 Cookie 访问</span></span></span><br><span class="line"><span class="language-javascript">    &#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">&#123;data&#125;</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;username&#x27;</span>).<span class="property">innerText</span> = data.<span class="property">data</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="自定义处理异常页面"><a href="#自定义处理异常页面" class="headerlink" title="自定义处理异常页面"></a>自定义处理异常页面</h3><p>配置配置类</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mvc:</span></span><br><span class="line">    <span class="attr">throw-exception-if-no-handler-found:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="attr">add-mappings:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> SecurityFilterChain <span class="title function_">filterChain</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="keyword">return</span> http</span><br><span class="line">            ...</span><br><span class="line">            .exceptionHandling(conf -&gt; &#123;</span><br><span class="line">                conf.accessDeniedHandler(<span class="built_in">this</span>::onAccessDeny); <span class="comment">// 配置授权相关异常处理器</span></span><br><span class="line">                conf.authenticationEntryPoint(<span class="built_in">this</span>::onAuthenticationFailure); <span class="comment">// 配置验证相关异常的处理器</span></span><br><span class="line">            &#125;)</span><br><span class="line">            .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写异常处理器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExceptionController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> RestBean&lt;String&gt; <span class="title function_">error</span><span class="params">(Exception e)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(e <span class="keyword">instanceof</span> NoHandlerFoundException exception)</span><br><span class="line">            <span class="keyword">return</span> RestBean.failure(<span class="number">404</span>, e.getMessage());  </span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> ServletException exception)</span><br><span class="line">            <span class="keyword">return</span> RestBean.failure(<span class="number">400</span>, e.getMessage());</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> RestBean.failure(<span class="number">500</span>, e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="基于-Token-的分离（无状态）"><a href="#基于-Token-的分离（无状态）" class="headerlink" title="基于 Token 的分离（无状态）"></a>基于 Token 的分离（无状态）</h2><h3 id="JWT-令牌"><a href="#JWT-令牌" class="headerlink" title="JWT 令牌"></a>JWT 令牌</h3><blockquote><p>JWT 是一种基于 JSON 的可编码的令牌形式，常用于用户身份验证及信息交换中。它可以被签名，从而确保信息的完整性和真实性</p></blockquote><p><code>JWT</code>由三部分组成，采用<code>.</code>分隔</p><ol><li><p><strong>Header（头部）</strong>：</p><p><code>Header</code>通常包含两个部分：令牌的类型（通常是<code>JWT</code>）和所使用的签名算法（如 HMAC SHA256 或 RSA）</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;alg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;HS256&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;typ&quot;</span><span class="punctuation">:</span> <span class="string">&quot;JWT&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>Payload（有效载荷）</strong>：</p><p><code>Payload</code>部分包含了要传递的信息，称为声明（Claims）。声明有三种类型：</p><ul><li><strong>注册声明</strong>：一组预定义的声明，例如 <code>iss</code>（发行者）、<code>exp</code>（过期时间）、<code>sub</code>（主题）等</li><li><strong>公开声明</strong>：可以自由定义的声明，但需要避免与其他人冲突</li><li><strong>私有声明</strong>：在发送方和接收方之间自定义的声明，以满足特定需求</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;sub&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1234567890&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;John Doe&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;iat&quot;</span><span class="punctuation">:</span> <span class="number">1516239022</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>Signature（签名）</strong>：</p><p>为了防止数据篡改，<code>JWT</code>会对<code>Header</code>和<code>Payload</code>进行签名。发送方用自己的秘钥对这两部分进行编码，并生成签名，格式如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">HMACSHA256(</span><br><span class="line">    base64UrlEncode(header) + <span class="string">&quot;.&quot;</span> +</span><br><span class="line">    base64UrlEncode(payload)<span class="punctuation">,</span></span><br><span class="line">    secret</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li></ol><p><code>JWT</code>令牌的格式如下</p><p><img src="/../images/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/11%20JavaSpringBoot%20%E6%A1%86%E6%9E%B6-7.jpg"></p><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.auth0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>java-jwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>生成一个<code>JWT</code>令牌</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">jwtKey</span> <span class="operator">=</span> <span class="string">&quot;abcdefghijklmn&quot;</span>; <span class="comment">// 自己的 JWT 秘钥</span></span><br><span class="line"><span class="type">Algorithm</span> <span class="variable">algorithm</span> <span class="operator">=</span> Algorithm.HMAC256(jwtKey); <span class="comment">// 创建 HMAC256 加密算法对象</span></span><br><span class="line"><span class="type">String</span> <span class="variable">jwtToken</span> <span class="operator">=</span> JWT.create() <span class="comment">// 创建 JWT 令牌</span></span><br><span class="line">        .withClaim(<span class="string">&quot;id&quot;</span>, <span class="number">1</span>) <span class="comment">// 向令牌中塞入自定义的数据</span></span><br><span class="line">        .withClaim(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;lbw&quot;</span>)</span><br><span class="line">        .withClaim(<span class="string">&quot;role&quot;</span>, <span class="string">&quot;nb&quot;</span>)</span><br><span class="line">        .withExpiresAt(<span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">2024</span>, Calendar.FEBRUARY, <span class="number">1</span>)) <span class="comment">// JWT 令牌的失效时间</span></span><br><span class="line">        .withIssuedAt(<span class="keyword">new</span> <span class="title class_">Date</span>()) <span class="comment">// JWT 令牌的签发时间</span></span><br><span class="line">        .sign(algorithm); <span class="comment">// 使用上面的加密算法进行加密，完成签名</span></span><br></pre></td></tr></table></figure><p>使用<code>Base64</code>将其解码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String[] decode(String jwtToken) &#123; <span class="comment">// 解码</span></span><br><span class="line">    String[] split = jwtToken.split(<span class="string">&quot;\\.&quot;</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> split.length;</span><br><span class="line">    String[] ans = <span class="keyword">new</span> <span class="title class_">String</span>[n - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="type">byte</span>[] decode = Base64.getDecoder().decode(split[i]);</span><br><span class="line">        ans[i] = <span class="keyword">new</span> <span class="title class_">String</span>(decode);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现-JWT-校验"><a href="#实现-JWT-校验" class="headerlink" title="实现 JWT 校验"></a>实现 JWT 校验</h3><p>创建<code>JWT</code>工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;abcdefghijklmn&quot;</span>; <span class="comment">// JWT 秘钥</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">createJwt</span><span class="params">(UserDetails user)</span> &#123; <span class="comment">// 创建 JWT 令牌</span></span><br><span class="line">        <span class="type">Algorithm</span> <span class="variable">algorithm</span> <span class="operator">=</span> Algorithm.HMAC256(key); <span class="comment">// 使用 HMAC256 算法和指定的密钥初始化算法对象</span></span><br><span class="line">        <span class="type">Calendar</span> <span class="variable">calendar</span> <span class="operator">=</span> Calendar.getInstance(); <span class="comment">// 获取日历实例</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">now</span> <span class="operator">=</span> calendar.getTime(); <span class="comment">// 当前时间</span></span><br><span class="line">        calendar.add(Calendar.SECOND, <span class="number">3600</span> * <span class="number">24</span> * <span class="number">7</span>); <span class="comment">// 将日历时间增加 7 天，设置 JWT 的过期时间</span></span><br><span class="line">        <span class="keyword">return</span> JWT.create() <span class="comment">// 开始创建 JWT</span></span><br><span class="line">                .withClaim(<span class="string">&quot;name&quot;</span>, user.getUsername()) <span class="comment">// 添加用户名到 JWT 中</span></span><br><span class="line">                .withClaim(<span class="string">&quot;authorities&quot;</span>, user.getAuthorities().stream() <span class="comment">// 添加用户权限到 JWT 中</span></span><br><span class="line">                        .map(GrantedAuthority::getAuthority) <span class="comment">// 获取 GrantedAuthority 的字符串形式</span></span><br><span class="line">                        .toList()) <span class="comment">// 将流转换为列表</span></span><br><span class="line">                .withExpiresAt(calendar.getTime()) <span class="comment">// 设置 JWT 的过期时间</span></span><br><span class="line">                .withIssuedAt(now) <span class="comment">// 设置 JWT 的签发时间</span></span><br><span class="line">                .sign(algorithm); <span class="comment">// 用算法对 JWT 进行签名，生成最终的 JWT 字符串</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> UserDetails <span class="title function_">resolveJwt</span><span class="params">(String token)</span> &#123; <span class="comment">// 解码</span></span><br><span class="line">        <span class="type">Algorithm</span> <span class="variable">algorithm</span> <span class="operator">=</span> Algorithm.HMAC256(key); <span class="comment">// 使用 HMAC256 算法和指定的密钥初始化算法对象</span></span><br><span class="line">        <span class="type">JWTVerifier</span> <span class="variable">jwtVerifier</span> <span class="operator">=</span> JWT.require(algorithm).build(); <span class="comment">// 创建 JWT 验证器</span></span><br><span class="line">        <span class="keyword">try</span> &#123; <span class="comment">// 验证 JWT，成功则返回解码后的 JWT 对象</span></span><br><span class="line">            <span class="type">DecodedJWT</span> <span class="variable">verify</span> <span class="operator">=</span> jwtVerifier.verify(token);</span><br><span class="line">            Map&lt;String, Claim&gt; claims = verify.getClaims(); <span class="comment">// 获取 JWT 中的声明</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">new</span> <span class="title class_">Date</span>().after(claims.get(<span class="string">&quot;exp&quot;</span>).asDate())) <span class="keyword">return</span> <span class="literal">null</span>; <span class="comment">// 若已过期则返回 null</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> User</span><br><span class="line">                        .withUsername(claims.get(<span class="string">&quot;name&quot;</span>).asString()) <span class="comment">// 从 JWT 中获取用户名</span></span><br><span class="line">                        .password(<span class="string">&quot;&quot;</span>) <span class="comment">// 设置密码为空，因为不是从 JWT 中解密出来的</span></span><br><span class="line">                        .authorities(claims.get(<span class="string">&quot;authorities&quot;</span>).asArray(String.class)) <span class="comment">// 从 JWT 中获取权限</span></span><br><span class="line">                        .build(); <span class="comment">// 构建并返回 UserDetails 对象</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (JWTVerificationException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>; <span class="comment">// 如果验证失败，返回 null</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自行实现一个<code>JwtAuthenticationFilter</code>加入到<code>SpringSecurity</code>默认提供的过滤器链中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtAuthenticationFilter</span> <span class="keyword">extends</span> <span class="title class_">OncePerRequestFilter</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doFilterInternal</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">authorization</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;Authorization&quot;</span>); <span class="comment">// 取出 Authorization</span></span><br><span class="line">        <span class="keyword">if</span> (authorization != <span class="literal">null</span> &amp;&amp; authorization.startsWith(<span class="string">&quot;Bearer &quot;</span>)) &#123; <span class="comment">// 判断是否包含 JWT 且格式正确</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> authorization.substring(<span class="number">7</span>); <span class="comment">// 获取到 JWT 令牌</span></span><br><span class="line">            <span class="type">UserDetails</span> <span class="variable">user</span> <span class="operator">=</span> JwtUtils.resolveJwt(token);</span><br><span class="line">            <span class="keyword">if</span>(user != <span class="literal">null</span>) &#123; <span class="comment">// 验证通过</span></span><br><span class="line">                <span class="type">UsernamePasswordAuthenticationToken</span> <span class="variable">authentication</span> <span class="operator">=</span></span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">UsernamePasswordAuthenticationToken</span>(user, <span class="literal">null</span>, user.getAuthorities());</span><br><span class="line">                authentication.setDetails(<span class="keyword">new</span> <span class="title class_">WebAuthenticationDetailsSource</span>().buildDetails(request));</span><br><span class="line">                SecurityContextHolder.getContext().setAuthentication(authentication); <span class="comment">// 表示已经完成验证</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        filterChain.doFilter(request, response); <span class="comment">// 放行</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置<code>Security</code>配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SecurityFilterChain <span class="title function_">filterChain</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> http</span><br><span class="line">                ...</span><br><span class="line">                .sessionManagement(conf -&gt; &#123;</span><br><span class="line">                    conf.sessionCreationPolicy(SessionCreationPolicy.STATELESS); <span class="comment">// 将 Session 管理创建策略改成无状态</span></span><br><span class="line">                &#125;)</span><br><span class="line">                .addFilterBefore(<span class="keyword">new</span> <span class="title class_">JwtAuthenticationFilter</span>(), UsernamePasswordAuthenticationFilter.class) <span class="comment">// 添加过滤器</span></span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 认证失败时的处理方法</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">onAuthenticationFailure</span><span class="params">(HttpServletRequest request,</span></span><br><span class="line"><span class="params">                                 HttpServletResponse response,</span></span><br><span class="line"><span class="params">                                 Object exceptionOrAuthentication)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/json;charset=utf-8&quot;</span>); <span class="comment">// 设置响应内容类型为 JSON</span></span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> response.getWriter(); <span class="comment">// 获取响应输出流</span></span><br><span class="line">        <span class="keyword">if</span> (exceptionOrAuthentication <span class="keyword">instanceof</span> AccessDeniedException exception) &#123;</span><br><span class="line">            writer.write(RestBean.failure(<span class="number">403</span>, exception.getMessage()).asJsonString()); <span class="comment">// 发送失败信息，包括状态码和错误消息，格式化为 JSON 字符串</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (exceptionOrAuthentication <span class="keyword">instanceof</span> Exception exception) &#123;</span><br><span class="line">            writer.write(RestBean.failure(<span class="number">401</span>, exception.getMessage()).asJsonString());</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (exceptionOrAuthentication <span class="keyword">instanceof</span> Authentication authentication) &#123;</span><br><span class="line">            writer.write(RestBean.success(JwtUtils.createJwt((User) authentication.getPrincipal())).asJsonString()); <span class="comment">// 登录成功则返回 JWT 令牌</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="退出登录"><a href="#退出登录" class="headerlink" title="退出登录"></a>退出登录</h3><p>配置<code>JWT</code>工具类，给<code>JWT</code>添加上黑名单机制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;abcdefghijklmn&quot;</span>; <span class="comment">// JWT 秘钥</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> HashSet&lt;String&gt; blackList = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;(); <span class="comment">// 黑名单</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">invalidate</span><span class="params">(String token)</span> &#123; <span class="comment">// 添加 JWT 令牌至黑名单中</span></span><br><span class="line">        <span class="type">Algorithm</span> <span class="variable">algorithm</span> <span class="operator">=</span> Algorithm.HMAC256(key);</span><br><span class="line">        <span class="type">JWTVerifier</span> <span class="variable">jwtVerifier</span> <span class="operator">=</span> JWT.require(algorithm).build();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">DecodedJWT</span> <span class="variable">verify</span> <span class="operator">=</span> jwtVerifier.verify(token);</span><br><span class="line">            <span class="keyword">return</span> blackList.add(verify.getId()); <span class="comment">// 添加黑名单</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (JWTVerificationException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">createJwt</span><span class="params">(UserDetails user)</span> &#123; <span class="comment">// 创建 JWT 令牌</span></span><br><span class="line">        <span class="type">Algorithm</span> <span class="variable">algorithm</span> <span class="operator">=</span> Algorithm.HMAC256(key); <span class="comment">// 使用 HMAC256 算法和指定的密钥初始化算法对象</span></span><br><span class="line">        <span class="type">Calendar</span> <span class="variable">calendar</span> <span class="operator">=</span> Calendar.getInstance(); <span class="comment">// 获取日历实例</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">now</span> <span class="operator">=</span> calendar.getTime(); <span class="comment">// 当前时间</span></span><br><span class="line">        calendar.add(Calendar.SECOND, <span class="number">3600</span> * <span class="number">24</span> * <span class="number">7</span>); <span class="comment">// 将日历时间增加 7 天，设置 JWT 的过期时间</span></span><br><span class="line">        <span class="keyword">return</span> JWT.create() <span class="comment">// 开始创建 JWT</span></span><br><span class="line">                .withJWTId(UUID.randomUUID().toString()) <span class="comment">// 给 JWT 添加 UID</span></span><br><span class="line">                .withClaim(<span class="string">&quot;name&quot;</span>, user.getUsername()) <span class="comment">// 添加用户名到 JWT 中</span></span><br><span class="line">                .withClaim(<span class="string">&quot;authorities&quot;</span>, user.getAuthorities().stream() <span class="comment">// 添加用户权限到 JWT 中</span></span><br><span class="line">                        .map(GrantedAuthority::getAuthority) <span class="comment">// 获取 GrantedAuthority 的字符串形式</span></span><br><span class="line">                        .toList()) <span class="comment">// 将流转换为列表</span></span><br><span class="line">                .withExpiresAt(calendar.getTime()) <span class="comment">// 设置 JWT 的过期时间</span></span><br><span class="line">                .withIssuedAt(now) <span class="comment">// 设置 JWT 的签发时间</span></span><br><span class="line">                .sign(algorithm); <span class="comment">// 用算法对 JWT 进行签名，生成最终的 JWT 字符串</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> UserDetails <span class="title function_">resolveJwt</span><span class="params">(String token)</span> &#123; <span class="comment">// 解码</span></span><br><span class="line">        <span class="type">Algorithm</span> <span class="variable">algorithm</span> <span class="operator">=</span> Algorithm.HMAC256(key); <span class="comment">// 使用 HMAC256 算法和指定的密钥初始化算法对象</span></span><br><span class="line">        <span class="type">JWTVerifier</span> <span class="variable">jwtVerifier</span> <span class="operator">=</span> JWT.require(algorithm).build(); <span class="comment">// 创建 JWT 验证器</span></span><br><span class="line">        <span class="keyword">try</span> &#123; <span class="comment">// 验证 JWT，成功则返回解码后的 JWT 对象</span></span><br><span class="line">            <span class="type">DecodedJWT</span> <span class="variable">verify</span> <span class="operator">=</span> jwtVerifier.verify(token);</span><br><span class="line">            <span class="keyword">if</span>(blackList.contains(verify.getId())) <span class="keyword">return</span> <span class="literal">null</span>; <span class="comment">// 判断是否存在于黑名单中</span></span><br><span class="line">            Map&lt;String, Claim&gt; claims = verify.getClaims(); <span class="comment">// 获取 JWT 中的声明</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">new</span> <span class="title class_">Date</span>().after(claims.get(<span class="string">&quot;exp&quot;</span>).asDate())) <span class="keyword">return</span> <span class="literal">null</span>; <span class="comment">// 若已过期则返回 null</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> User</span><br><span class="line">                    .withUsername(claims.get(<span class="string">&quot;name&quot;</span>).asString()) <span class="comment">// 从 JWT 中获取用户名</span></span><br><span class="line">                    .password(<span class="string">&quot;&quot;</span>) <span class="comment">// 设置密码为空，因为不是从 JWT 中解密出来的</span></span><br><span class="line">                    .authorities(claims.get(<span class="string">&quot;authorities&quot;</span>).asArray(String.class)) <span class="comment">// 从 JWT 中获取权限</span></span><br><span class="line">                    .build(); <span class="comment">// 构建并返回 UserDetails 对象</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (JWTVerificationException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>; <span class="comment">// 如果验证失败，返回 null</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置<code>Security</code>配置类，添加退出登录操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SecurityFilterChain <span class="title function_">filterChain</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> http</span><br><span class="line">                ...</span><br><span class="line">                .logout(conf -&gt; &#123;</span><br><span class="line">                    conf.logoutUrl(<span class="string">&quot;/api/auth/logout&quot;</span>);</span><br><span class="line">                    conf.logoutSuccessHandler(<span class="built_in">this</span>::onLogoutSuccess);</span><br><span class="line">                &#125;)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">onLogoutSuccess</span><span class="params">(HttpServletRequest request,</span></span><br><span class="line"><span class="params">                                 HttpServletResponse response,</span></span><br><span class="line"><span class="params">                                 Authentication authentication)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/json;charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">        <span class="type">String</span> <span class="variable">authorization</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;Authorization&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(authorization != <span class="literal">null</span> &amp;&amp; authorization.startsWith(<span class="string">&quot;Bearer &quot;</span>)) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> authorization.substring(<span class="number">7</span>);</span><br><span class="line">            <span class="keyword">if</span>(JwtUtils.invalidate(token)) &#123; <span class="comment">// 添加黑名单</span></span><br><span class="line">                writer.write(RestBean.success(<span class="string">&quot;退出登录成功&quot;</span>).asJsonString());</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        writer.write(RestBean.failure(<span class="number">400</span>, <span class="string">&quot;退出登录失败&quot;</span>).asJsonString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自动续签-JWT-令牌"><a href="#自动续签-JWT-令牌" class="headerlink" title="自动续签 JWT 令牌"></a>自动续签 JWT 令牌</h3><blockquote><p>在发起请求时如果令牌即将到期，那么就向后端发起续签请求，以此得到一个新的 JWT 令牌</p></blockquote><p>编写一个接口专门用于令牌刷新</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api/auth&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthorizeController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/refresh&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> RestBean&lt;String&gt; <span class="title function_">refreshToken</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User) SecurityContextHolder.getContext().getAuthentication().getPrincipal();</span><br><span class="line">        <span class="type">String</span> <span class="variable">jwt</span> <span class="operator">=</span> JwtUtils.createJwt(user);</span><br><span class="line">        <span class="keyword">return</span> RestBean.success(jwt);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，前端就可以在发现令牌可用时间不足时，先发起一个请求自动完成续期，从而得到一个新的<code>Token</code></p><h1 id="前后端数据交互"><a href="#前后端数据交互" class="headerlink" title="前后端数据交互"></a>前后端数据交互</h1><p>前端封装<code>get</code>和<code>post</code>方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">get</span>(<span class="params">url</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> res = <span class="keyword">await</span> axios.<span class="title function_">get</span>(url, &#123;</span><br><span class="line">            <span class="attr">withCredentials</span>: <span class="literal">true</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span> res.<span class="property">data</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;发送数据时出错：&#x27;</span>, e)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">post</span>(<span class="params">url, data</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> res = <span class="keyword">await</span> axios.<span class="title function_">post</span>(url, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data), &#123;</span><br><span class="line">            <span class="attr">headers</span>: &#123;</span><br><span class="line">                <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">withCredentials</span>: <span class="literal">true</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span> res.<span class="property">data</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;发送数据时出错：&#x27;</span>, e)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h3 id="前端-后端"><a href="#前端-后端" class="headerlink" title="前端 -&gt; 后端"></a>前端 -&gt; 后端</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=&quot;text&quot; v-model=&quot;msg&quot;&gt;</span><br><span class="line">&lt;el-button @click=&quot;test&quot; type=&quot;info&quot; plain&gt;测试&lt;/el-button&gt;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> msg = <span class="title function_">ref</span>(<span class="string">&quot;来自前端的数据&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">test</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">post</span>(<span class="string">&quot;/index&quot;</span>, msg.<span class="property">value</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/index&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">index</span><span class="params">(<span class="meta">@RequestBody</span> String msg)</span> &#123;</span><br><span class="line">    System.out.println(msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="后端-前端"><a href="#后端-前端" class="headerlink" title="后端 -&gt; 前端"></a>后端 -&gt; 前端</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-button @click=&quot;test&quot; type=&quot;info&quot; plain&gt;测试&lt;/el-button&gt;</span><br><span class="line">&lt;div&gt;&#123;&#123; msg &#125;&#125;&lt;/div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> msg = <span class="title function_">ref</span>()</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">test</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    msg.<span class="property">value</span> = <span class="keyword">await</span> <span class="title function_">get</span>(<span class="string">&quot;/index&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/index&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">index</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;来自后端的数据&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="前端-后端-1"><a href="#前端-后端-1" class="headerlink" title="前端 &lt;-&gt; 后端"></a>前端 &lt;-&gt; 后端</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=&quot;text&quot; v-model=&quot;msg&quot;&gt;</span><br><span class="line">&lt;el-button @click=&quot;test&quot; type=&quot;info&quot; plain&gt;测试&lt;/el-button&gt;</span><br><span class="line">&lt;div&gt;&#123;&#123; msg &#125;&#125;&lt;/div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> msg = <span class="title function_">ref</span>(<span class="string">&quot;来自前端的数据&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">test</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    msg.<span class="property">value</span> = <span class="keyword">await</span> <span class="title function_">post</span>(<span class="string">&quot;/index&quot;</span>, msg.<span class="property">value</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/index&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">index</span><span class="params">(<span class="meta">@RequestBody</span> String msg)</span> &#123;</span><br><span class="line">    System.out.println(msg);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;来自后端的数据&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><p>以<code>User</code>对象为例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line">    String sex;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="前端-后端-2"><a href="#前端-后端-2" class="headerlink" title="前端 -&gt; 后端"></a>前端 -&gt; 后端</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-button @click=&quot;test&quot; type=&quot;info&quot; plain&gt;测试&lt;/el-button&gt;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = <span class="title function_">ref</span>(&#123;<span class="attr">name</span>: <span class="string">&#x27;小星&#x27;</span>, <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span>&#125;)</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">test</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">post</span>(<span class="string">&quot;/index&quot;</span>, user.<span class="property">value</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/index&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">index</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span> &#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="后端-前端-1"><a href="#后端-前端-1" class="headerlink" title="后端 -&gt; 前端"></a>后端 -&gt; 前端</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-button @click=&quot;test&quot; type=&quot;info&quot; plain&gt;测试&lt;/el-button&gt;</span><br><span class="line">&lt;p v-if=&quot;user&quot;&gt;&#123;&#123; user.name &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p v-if=&quot;user&quot;&gt;&#123;&#123; user.sex &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p v-if=&quot;user&quot;&gt;&#123;&#123; user.age &#125;&#125;&lt;/p&gt;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = <span class="title function_">ref</span>()</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">test</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    user.<span class="property">value</span> = <span class="keyword">await</span> <span class="title function_">get</span>(<span class="string">&quot;/index&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/index&quot;)</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">index</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;小星&quot;</span>, <span class="string">&quot;男&quot;</span>, <span class="number">20</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="前端-后端-3"><a href="#前端-后端-3" class="headerlink" title="前端 &lt;-&gt; 后端"></a>前端 &lt;-&gt; 后端</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-button @click=&quot;test&quot; type=&quot;info&quot; plain&gt;测试&lt;/el-button&gt;</span><br><span class="line">&lt;p v-if=&quot;user&quot;&gt;&#123;&#123; user.name &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p v-if=&quot;user&quot;&gt;&#123;&#123; user.sex &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p v-if=&quot;user&quot;&gt;&#123;&#123; user.age &#125;&#125;&lt;/p&gt;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = <span class="title function_">ref</span>(&#123;<span class="attr">name</span>: <span class="string">&#x27;小星&#x27;</span>, <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span>&#125;)</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">test</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    user.<span class="property">value</span> = <span class="keyword">await</span> <span class="title function_">post</span>(<span class="string">&quot;/index&quot;</span>, user.<span class="property">value</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/index&quot;)</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">index</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span> &#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;小星星&quot;</span>, <span class="string">&quot;男&quot;</span>, <span class="number">8</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><h3 id="前端-后端-4"><a href="#前端-后端-4" class="headerlink" title="前端 -&gt; 后端"></a>前端 -&gt; 后端</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-button @click=&quot;test&quot; type=&quot;info&quot; plain&gt;测试&lt;/el-button&gt;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> users = <span class="title function_">ref</span>([</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">&#x27;AAA&#x27;</span>, <span class="attr">sex</span>: <span class="string">&#x27;女&#x27;</span>, <span class="attr">age</span>: <span class="number">16</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">&#x27;BBB&#x27;</span>, <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">&#x27;CCC&#x27;</span>, <span class="attr">sex</span>: <span class="string">&#x27;女&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span>&#125;</span><br><span class="line">])</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">test</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">post</span>(<span class="string">&quot;/index&quot;</span>, users.<span class="property">value</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/index&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">index</span><span class="params">(<span class="meta">@RequestBody</span> List&lt;User&gt; users)</span> &#123;</span><br><span class="line">    System.out.println(users);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="后端-前端-2"><a href="#后端-前端-2" class="headerlink" title="后端 -&gt; 前端"></a>后端 -&gt; 前端</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-button @click=&quot;test&quot; type=&quot;info&quot; plain&gt;测试&lt;/el-button&gt;</span><br><span class="line">&lt;ul v-if=&quot;users&quot;&gt;</span><br><span class="line">    &lt;li v-for=&quot;user in users&quot;&gt;</span><br><span class="line">        &lt;p&gt;&#123;&#123; user.name &#125;&#125;&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;&#123;&#123; user.sex &#125;&#125;&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;&#123;&#123; user.age &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> users = <span class="title function_">ref</span>()</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">test</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    users.<span class="property">value</span> = <span class="keyword">await</span> <span class="title function_">get</span>(<span class="string">&quot;/index&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/index&quot;)</span></span><br><span class="line"><span class="keyword">public</span> List&lt;User&gt; <span class="title function_">index</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;User&gt; users = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    users.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;AAA&quot;</span>, <span class="string">&quot;女&quot;</span>, <span class="number">16</span>));</span><br><span class="line">    users.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;BBB&quot;</span>, <span class="string">&quot;男&quot;</span>, <span class="number">20</span>));</span><br><span class="line">    users.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;CCC&quot;</span>, <span class="string">&quot;女&quot;</span>, <span class="number">18</span>));</span><br><span class="line">    <span class="keyword">return</span> users;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="前端-后端-5"><a href="#前端-后端-5" class="headerlink" title="前端 &lt;-&gt; 后端"></a>前端 &lt;-&gt; 后端</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-button @click=&quot;test&quot; type=&quot;info&quot; plain&gt;测试&lt;/el-button&gt;</span><br><span class="line">&lt;ul v-if=&quot;users&quot;&gt;</span><br><span class="line">    &lt;li v-for=&quot;user in users&quot;&gt;</span><br><span class="line">        &lt;p&gt;&#123;&#123; user.name &#125;&#125;&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;&#123;&#123; user.sex &#125;&#125;&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;&#123;&#123; user.age &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> users = <span class="title function_">ref</span>([</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">&#x27;AAA&#x27;</span>, <span class="attr">sex</span>: <span class="string">&#x27;女&#x27;</span>, <span class="attr">age</span>: <span class="number">16</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">&#x27;BBB&#x27;</span>, <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">&#x27;CCC&#x27;</span>, <span class="attr">sex</span>: <span class="string">&#x27;女&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span>&#125;</span><br><span class="line">])</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">test</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    users.<span class="property">value</span> = <span class="keyword">await</span> <span class="title function_">post</span>(<span class="string">&quot;/index&quot;</span>, users.<span class="property">value</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/index&quot;)</span></span><br><span class="line"><span class="keyword">public</span> List&lt;User&gt; <span class="title function_">index</span><span class="params">(<span class="meta">@RequestBody</span> List&lt;User&gt; users)</span> &#123;</span><br><span class="line">    System.out.println(users);</span><br><span class="line">    users.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;DDD&quot;</span>, <span class="string">&quot;女&quot;</span>, <span class="number">8</span>));</span><br><span class="line">    <span class="keyword">return</span> users;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 交互 </tag>
            
            <tag> Session </tag>
            
            <tag> Spring </tag>
            
            <tag> 配置 </tag>
            
            <tag> Boot </tag>
            
            <tag> Slf4j </tag>
            
            <tag> JPA </tag>
            
            <tag> MybatisPlus </tag>
            
            <tag> Token </tag>
            
            <tag> XML </tag>
            
            <tag> Banner </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringSecurity 安全管理框架</title>
      <link href="/2024/08/20/10%20SpringSecurity%20%E5%AE%89%E5%85%A8%E7%AE%A1%E7%90%86%E6%A1%86%E6%9E%B6/"/>
      <url>/2024/08/20/10%20SpringSecurity%20%E5%AE%89%E5%85%A8%E7%AE%A1%E7%90%86%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="配置-SpringSecurity-项目"><a href="#配置-SpringSecurity-项目" class="headerlink" title="配置 SpringSecurity 项目"></a>配置 SpringSecurity 项目</h1><p>添加<code>SpringSecurity</code>依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置初始化器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainInitializer</span> <span class="keyword">extends</span> <span class="title class_">AbstractAnnotationConfigDispatcherServletInitializer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;WebConfiguration.class, SecurityConfiguration.class&#125;; <span class="comment">// 基本的 Spring 配置类</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/&quot;</span>&#125;; <span class="comment">// 匹配路径</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityInitializer</span> <span class="keyword">extends</span> <span class="title class_">AbstractSecurityWebApplicationInitializer</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>配置<code>Security</code>配置类，用于配置<code>Service</code>和其他<code>Bean</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfiguration</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>配置<code>Mvc</code>配置类，用于配置<code>Controller</code>控制器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="meta">@ComponentScans(&#123;</span></span><br><span class="line"><span class="meta">        @ComponentScan(&quot;com.example.controller&quot;),</span></span><br><span class="line"><span class="meta">        @ComponentScan(&quot;com.example.service&quot;)</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.example.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfiguration</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span> <span class="comment">// 配置视图解析器</span></span><br><span class="line">    <span class="keyword">public</span> ThymeleafViewResolver <span class="title function_">thymeleafViewResolver</span><span class="params">(SpringTemplateEngine springTemplateEngine)</span> &#123;</span><br><span class="line">        <span class="type">ThymeleafViewResolver</span> <span class="variable">resolver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThymeleafViewResolver</span>();</span><br><span class="line">        resolver.setOrder(<span class="number">1</span>); <span class="comment">// 设定解析顺序</span></span><br><span class="line">        resolver.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>); <span class="comment">// 设定编码格式</span></span><br><span class="line">        resolver.setTemplateEngine(springTemplateEngine); <span class="comment">// 设定模板引擎</span></span><br><span class="line">        <span class="keyword">return</span> resolver;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span> <span class="comment">// 配置模板解析器</span></span><br><span class="line">    <span class="keyword">public</span> SpringResourceTemplateResolver <span class="title function_">templateResolver</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">SpringResourceTemplateResolver</span> <span class="variable">resolver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpringResourceTemplateResolver</span>();</span><br><span class="line">        resolver.setSuffix(<span class="string">&quot;.html&quot;</span>); <span class="comment">// 需要解析的后缀名称</span></span><br><span class="line">        resolver.setPrefix(<span class="string">&quot;classpath:&quot;</span>); <span class="comment">// 需要解析的 HTML 页面文件存放的位置，默认是 webapp。如果是类路径下需要添加 classpath: 前缀</span></span><br><span class="line">        resolver.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>); <span class="comment">// 设定编码格式</span></span><br><span class="line">        resolver.setCacheable(<span class="literal">false</span>);</span><br><span class="line">        resolver.setTemplateMode(<span class="string">&quot;HTML5&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> resolver;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span> <span class="comment">// 配置模板引擎</span></span><br><span class="line">    <span class="keyword">public</span> SpringTemplateEngine <span class="title function_">springTemplateEngine</span><span class="params">(ITemplateResolver resolver)</span> &#123;</span><br><span class="line">        <span class="type">SpringTemplateEngine</span> <span class="variable">engine</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpringTemplateEngine</span>();</span><br><span class="line">        engine.setTemplateResolver(resolver); <span class="comment">// 默认模板解析器</span></span><br><span class="line">        <span class="keyword">return</span> engine;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configureDefaultServletHandling</span><span class="params">(DefaultServletHandlerConfigurer configurer)</span> &#123;</span><br><span class="line">        configurer.enable(); <span class="comment">// 开启默认的 Servlet</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/static/**&quot;</span>).addResourceLocations(<span class="string">&quot;classpath:/static/&quot;</span>); <span class="comment">// 配置静态资源的访问路径</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configureMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> &#123;</span><br><span class="line">        converters.add(<span class="keyword">new</span> <span class="title class_">FastJsonHttpMessageConverter</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="认证"><a href="#认证" class="headerlink" title="认证"></a>认证</h1><h2 id="基于内存验证"><a href="#基于内存验证" class="headerlink" title="基于内存验证"></a>基于内存验证</h2><p>配置<code>Security</code>配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfiguration</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span> &#123; <span class="comment">// 解码工具</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> UserDetailsService <span class="title function_">userDetailsService</span><span class="params">(PasswordEncoder encoder)</span> &#123;</span><br><span class="line">        <span class="type">UserDetails</span> <span class="variable">user</span> <span class="operator">=</span> User <span class="comment">// 账户 1</span></span><br><span class="line">                .withUsername(<span class="string">&quot;user&quot;</span>)</span><br><span class="line">                .password(encoder.encode(<span class="string">&quot;password&quot;</span>)) <span class="comment">// 存储加密后的密码</span></span><br><span class="line">                .roles(<span class="string">&quot;USER&quot;</span>) <span class="comment">// 角色</span></span><br><span class="line">                .build();</span><br><span class="line">        <span class="type">UserDetails</span> <span class="variable">admin</span> <span class="operator">=</span> User <span class="comment">// 账户 2</span></span><br><span class="line">                .withUsername(<span class="string">&quot;admin&quot;</span>)</span><br><span class="line">                .password(encoder.encode(<span class="string">&quot;password&quot;</span>))</span><br><span class="line">                .roles(<span class="string">&quot;ADMIN&quot;</span>, <span class="string">&quot;USER&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">InMemoryUserDetailsManager</span>(user, admin);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="基于数据库验证"><a href="#基于数据库验证" class="headerlink" title="基于数据库验证"></a>基于数据库验证</h2><p>在<code>Navicat</code>中执行以下查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> users(username <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">primary</span> key,password <span class="type">varchar</span>(<span class="number">500</span>) <span class="keyword">not</span> <span class="keyword">null</span>,enabled <span class="type">boolean</span> <span class="keyword">not</span> <span class="keyword">null</span>);</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> authorities (username <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">not</span> <span class="keyword">null</span>,authority <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">not</span> <span class="keyword">null</span>,<span class="keyword">constraint</span> fk_authorities_users <span class="keyword">foreign</span> key(username) <span class="keyword">references</span> users(username));</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">unique</span> index ix_auth_username <span class="keyword">on</span> authorities (username,authority);</span><br></pre></td></tr></table></figure><p>配置<code>Security</code>配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span> </span><br><span class="line">    PasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span> &#123; <span class="comment">// 数据源</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PooledDataSource</span>(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>, <span class="string">&quot;jdbc:mysql://localhost:3306/my_database&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SqlSessionFactoryBean <span class="title function_">sqlSessionFactoryBean</span><span class="params">(DataSource dataSource)</span> &#123;</span><br><span class="line">        <span class="type">SqlSessionFactoryBean</span> <span class="variable">bean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBean</span>();</span><br><span class="line">        bean.setDataSource(dataSource); <span class="comment">// 设置数据源</span></span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AuthenticationManager <span class="title function_">authenticationManager</span><span class="params">(UserDetailsManager manager, PasswordEncoder encoder)</span> &#123;</span><br><span class="line">        <span class="type">DaoAuthenticationProvider</span> <span class="variable">provider</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DaoAuthenticationProvider</span>();</span><br><span class="line">        provider.setUserDetailsService(manager);</span><br><span class="line">        provider.setPasswordEncoder(encoder);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ProviderManager</span>(provider);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> UserDetailsManager <span class="title function_">userDetailsService</span><span class="params">(DataSource dataSource, PasswordEncoder encoder)</span> &#123;</span><br><span class="line">        <span class="type">JdbcUserDetailsManager</span> <span class="variable">manager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JdbcUserDetailsManager</span>(dataSource);</span><br><span class="line">        manager.setAuthenticationManager(authenticationManager(manager, encoder)); <span class="comment">// 开启密码校验</span></span><br><span class="line">        <span class="keyword">return</span> manager;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写用于修改密码的接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    UserDetailsManager manager; <span class="comment">// 用户管理器</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    PasswordEncoder encoder; <span class="comment">// 解码工具</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/change-password&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> JSONObject <span class="title function_">changePassword</span><span class="params">(<span class="meta">@RequestParam</span> String oldPassword, <span class="meta">@RequestParam</span> String newPassword)</span> &#123;</span><br><span class="line">        manager.changePassword(oldPassword, encoder.encode(newPassword));</span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">object</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">        object.put(<span class="string">&quot;success&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span> object;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前端添加相关操作</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">        修改密码：</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;oldPassword&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;旧密码&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;newPassword&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;新密码&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;change()&quot;</span>&gt;</span>修改密码<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">change</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> oldPassword = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;oldPassword&quot;</span>).<span class="property">value</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> newPassword = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;newPassword&quot;</span>).<span class="property">value</span></span></span><br><span class="line"><span class="language-javascript">        axios.<span class="title function_">post</span>(<span class="string">&#x27;/mvc/change-password&#x27;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">oldPassword</span>: oldPassword,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">newPassword</span>: newPassword,</span></span><br><span class="line"><span class="language-javascript">        &#125;, &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">headers</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">&#123;data&#125;</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(data.<span class="property">success</span> ? <span class="string">&quot;密码修改成功&quot;</span> : <span class="string">&quot;密码修改失败，请检查原密码是否正确&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="自定义验证"><a href="#自定义验证" class="headerlink" title="自定义验证"></a>自定义验证</h2><p>创建表格<code>user</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `username` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `password` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">2</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><p>创建<code>User</code>实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Account</span> &#123;</span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    String username;</span><br><span class="line">    String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建<code>Mapper</code>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    <span class="meta">@Select(&quot;select * from user where username = #&#123;username&#125;&quot;)</span></span><br><span class="line">    Account <span class="title function_">findUserByName</span><span class="params">(String username)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现<code>UserDetailsService</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthorizeService</span> <span class="keyword">implements</span> <span class="title class_">UserDetailsService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    UserMapper mapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> UserDetails <span class="title function_">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException &#123;</span><br><span class="line">        <span class="type">Account</span> <span class="variable">account</span> <span class="operator">=</span> mapper.findUserByName(username);</span><br><span class="line">        <span class="keyword">if</span>(account == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UsernameNotFoundException</span>(<span class="string">&quot;用户名或密码错误&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> User</span><br><span class="line">                .withUsername(username)</span><br><span class="line">                .password(account.getPassword())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="自定义登录界面"><a href="#自定义登录界面" class="headerlink" title="自定义登录界面"></a>自定义登录界面</h1><p>先将前端模板复制到类路径下</p><p><img src="/../images/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/10%20JavaSpringSecurity%20%E5%AE%89%E5%85%A8%E7%AE%A1%E7%90%86%E6%A1%86%E6%9E%B6-1.jpg"></p><h2 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h2><p>配置对应页面的<code>Controller</code>控制器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">index</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">login</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置<code>Security</code>配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SecurityFilterChain <span class="title function_">filterChain</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> http.authorizeHttpRequests(auth -&gt; &#123;</span><br><span class="line">                    auth.requestMatchers(<span class="string">&quot;/static/**&quot;</span>).permitAll(); <span class="comment">// 将所有静态资源放行，在全部请求拦截之前</span></span><br><span class="line">                    auth.anyRequest().authenticated(); <span class="comment">// 将所有请求全部拦截</span></span><br><span class="line">                &#125;)</span><br><span class="line">                .formLogin(conf -&gt; &#123; <span class="comment">// 登录相关配置</span></span><br><span class="line">                    conf.loginPage(<span class="string">&quot;/login&quot;</span>); <span class="comment">// 登录地址</span></span><br><span class="line">                    conf.loginProcessingUrl(<span class="string">&quot;/doLogin&quot;</span>); <span class="comment">// 登录表单提交的地址</span></span><br><span class="line">                    conf.defaultSuccessUrl(<span class="string">&quot;/&quot;</span>); <span class="comment">// 登录成功后跳转的页面</span></span><br><span class="line">                    conf.permitAll(); <span class="comment">// 将登录相关的地址放行</span></span><br><span class="line">                    conf.usernameParameter(<span class="string">&quot;username&quot;</span>); <span class="comment">// 表单字段名称</span></span><br><span class="line">                    conf.passwordParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">                &#125;)</span><br><span class="line">                .csrf(AbstractHttpConfigurer::disable) <span class="comment">// 关闭 csrf 验证</span></span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改模板<code>login.html</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;doLogin&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Email Address&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ad-input&quot;</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Password&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ad-input&quot;</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ad-auth-btn&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ad-btn ad-login-member&quot;</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="退出登录"><a href="#退出登录" class="headerlink" title="退出登录"></a>退出登录</h2><p>配置<code>Security</code>配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SecurityFilterChain <span class="title function_">filterChain</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> http.authorizeHttpRequests(auth -&gt; &#123;</span><br><span class="line">                    auth.requestMatchers(<span class="string">&quot;/static/**&quot;</span>).permitAll();</span><br><span class="line">                    auth.anyRequest().authenticated();</span><br><span class="line">                &#125;)</span><br><span class="line">                .formLogin(conf -&gt; &#123;</span><br><span class="line">                    conf.loginPage(<span class="string">&quot;/login&quot;</span>);</span><br><span class="line">                    conf.loginProcessingUrl(<span class="string">&quot;/doLogin&quot;</span>);</span><br><span class="line">                    conf.defaultSuccessUrl(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">                    conf.permitAll();</span><br><span class="line">                    conf.usernameParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">                    conf.passwordParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">                &#125;)</span><br><span class="line">                .logout(conf -&gt; &#123; <span class="comment">// 退出登录相关配置</span></span><br><span class="line">                    conf.logoutUrl(<span class="string">&quot;/doLogout&quot;</span>); <span class="comment">// 退出登录表单提交的地址</span></span><br><span class="line">                    conf.logoutSuccessUrl(<span class="string">&quot;/login&quot;</span>); <span class="comment">// 退出登录成功后跳转的地址</span></span><br><span class="line">                    conf.permitAll();</span><br><span class="line">                &#125;)</span><br><span class="line">                .csrf(AbstractHttpConfigurer::disable)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改模板<code>index.html</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;doLogout&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-sign-out-alt&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> logout</span><br><span class="line">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="记住我功能"><a href="#记住我功能" class="headerlink" title="记住我功能"></a>记住我功能</h1><p>配置<code>Security</code>类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PooledDataSource</span>(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>, <span class="string">&quot;jdbc:mysql://localhost:3306/my_database&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SqlSessionFactoryBean <span class="title function_">sqlSessionFactoryBean</span><span class="params">(DataSource dataSource)</span> &#123;</span><br><span class="line">        <span class="type">SqlSessionFactoryBean</span> <span class="variable">bean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBean</span>();</span><br><span class="line">        bean.setDataSource(dataSource);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PersistentTokenRepository <span class="title function_">tokenRepository</span><span class="params">(DataSource dataSource)</span> &#123;</span><br><span class="line">        <span class="type">JdbcTokenRepositoryImpl</span> <span class="variable">repository</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JdbcTokenRepositoryImpl</span>();</span><br><span class="line">        repository.setCreateTableOnStartup(<span class="literal">true</span>); <span class="comment">// 仅第一次需要</span></span><br><span class="line">        repository.setDataSource(dataSource);</span><br><span class="line">        <span class="keyword">return</span> repository;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SecurityFilterChain <span class="title function_">filterChain</span><span class="params">(HttpSecurity http, PersistentTokenRepository repository)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> http.authorizeHttpRequests(auth -&gt; &#123;</span><br><span class="line">                    auth.requestMatchers(<span class="string">&quot;/static/**&quot;</span>).permitAll();</span><br><span class="line">                    auth.anyRequest().authenticated();</span><br><span class="line">                &#125;)</span><br><span class="line">                .formLogin(conf -&gt; &#123;</span><br><span class="line">                    conf.loginPage(<span class="string">&quot;/login&quot;</span>);</span><br><span class="line">                    conf.loginProcessingUrl(<span class="string">&quot;/doLogin&quot;</span>);</span><br><span class="line">                    conf.defaultSuccessUrl(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">                    conf.permitAll();</span><br><span class="line">                    conf.usernameParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">                    conf.passwordParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">                &#125;)</span><br><span class="line">                .logout(conf -&gt; &#123;</span><br><span class="line">                    conf.logoutUrl(<span class="string">&quot;/doLogout&quot;</span>);</span><br><span class="line">                    conf.logoutSuccessUrl(<span class="string">&quot;/login&quot;</span>);</span><br><span class="line">                    conf.permitAll();</span><br><span class="line">                &#125;)</span><br><span class="line">                .rememberMe(conf -&gt; &#123;</span><br><span class="line">                    conf.alwaysRemember(<span class="literal">false</span>); <span class="comment">// 是否开启始终记住</span></span><br><span class="line">                    conf.rememberMeParameter(<span class="string">&quot;remember-me&quot;</span>); <span class="comment">// 记住我表单字段</span></span><br><span class="line">                    conf.rememberMeCookieName(<span class="string">&quot;xxxx&quot;</span>); <span class="comment">// 记住我 Cookie 名称</span></span><br><span class="line">                    conf.tokenRepository(repository); <span class="comment">// 设置持久化存储库</span></span><br><span class="line">                    conf.tokenValiditySeconds(<span class="number">3600</span> * <span class="number">24</span>); <span class="comment">// 设置记住我有效时间</span></span><br><span class="line">                &#125;)</span><br><span class="line">                .csrf(AbstractHttpConfigurer::disable)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改模板<code>login.html</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ad-checkbox&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;remember-me&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ad-checkbox&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>Remember Me<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h1><h2 id="基于角色授权"><a href="#基于角色授权" class="headerlink" title="基于角色授权"></a>基于角色授权</h2><p>配置<code>Security</code>配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SecurityFilterChain <span class="title function_">filterChain</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> http.authorizeHttpRequests(auth -&gt; &#123;</span><br><span class="line">                    auth.requestMatchers(<span class="string">&quot;/static/**&quot;</span>).permitAll(); <span class="comment">// 将所有静态资源放行，在全部请求拦截之前</span></span><br><span class="line">                    auth.requestMatchers(<span class="string">&quot;/&quot;</span>).hasAnyRole(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;admin&quot;</span>); <span class="comment">// 只允许指定的角色访问</span></span><br><span class="line">                    auth.anyRequest().hasRole(<span class="string">&quot;admin&quot;</span>); <span class="comment">// 其他所有路径必须角色为 admin 才能访问</span></span><br><span class="line">                &#125;)</span><br><span class="line">                .formLogin(conf -&gt; &#123;</span><br><span class="line">                    conf.loginPage(<span class="string">&quot;/login&quot;</span>);</span><br><span class="line">                    conf.loginProcessingUrl(<span class="string">&quot;/doLogin&quot;</span>);</span><br><span class="line">                    conf.defaultSuccessUrl(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">                    conf.permitAll();</span><br><span class="line">                    conf.usernameParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">                    conf.passwordParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">                &#125;)</span><br><span class="line">                .logout(conf -&gt; &#123;</span><br><span class="line">                    conf.logoutUrl(<span class="string">&quot;/doLogout&quot;</span>);</span><br><span class="line">                    conf.logoutSuccessUrl(<span class="string">&quot;/login&quot;</span>);</span><br><span class="line">                    conf.permitAll();</span><br><span class="line">                &#125;)</span><br><span class="line">                .csrf(AbstractHttpConfigurer::disable)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用注解权限判断"><a href="#使用注解权限判断" class="headerlink" title="使用注解权限判断"></a>使用注解权限判断</h2><h3 id="EnableMethodSecurity"><a href="#EnableMethodSecurity" class="headerlink" title="@EnableMethodSecurity"></a>@EnableMethodSecurity</h3><blockquote><p>用于开启方法安全校验</p></blockquote><p>添加<code>@EnableMethodSecurity</code>注解到<code>Security</code>配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="meta">@EnableMethodSecurity</span> <span class="comment">// 开启方法安全校验</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfiguration</span> &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="PreAuthorize"><a href="#PreAuthorize" class="headerlink" title="@PreAuthorize"></a>@PreAuthorize</h3><blockquote><p>对角色验证未通过的进行拦截，在方法执行之前</p></blockquote><p>添加<code>@PreAuthorize</code>到指定的控制器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@PreAuthorize(&quot;hasRole(&#x27;user&#x27;)&quot;)</span> <span class="comment">// 对角色验证未通过的进行拦截，在方法执行之前</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">index</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="PostAuthorize"><a href="#PostAuthorize" class="headerlink" title="@PostAuthorize"></a>@PostAuthorize</h3><blockquote><p>对角色验证未通过的进行拦截，在方法执行之后</p></blockquote><p>添加<code>@PostAuthorize</code>到指定的控制器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@PostAuthorize(&quot;hasRole(&#x27;user&#x27;)&quot;)</span> <span class="comment">// 对角色验证未通过的进行拦截，在方法执行之后</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">index</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除了<code>Controller</code>以外，只要是由<code>Spring</code>管理的<code>Bean</code>都可以使用注解形式来控制权限</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PreAuthorize(&quot;hasAnyRole(&#x27;user&#x27;)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@PostAuthorize(&quot;hasAnyRole(&#x27;user&#x27;)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> a)</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="PreFilter"><a href="#PreFilter" class="headerlink" title="@PreFilter"></a>@PreFilter</h3><blockquote><p>对方法的参数进行过滤</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PreFilter(&quot;filterObject.equals(&#x27;lbwnb&#x27;)&quot;)</span> <span class="comment">// filterObject 代表集合中每个元素，只有满足条件的元素才会留下</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(List&lt;String&gt; list)</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>当有多个集合时，需要使用<code>filterTarget</code>进行指定</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PreFilter(value = &quot;filterObject.equals(&#x27;lbwnb&#x27;)&quot;, filterTarget = &quot;list2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(List&lt;String&gt; list, List&lt;String&gt; list2)</span> &#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="PostFilter"><a href="#PostFilter" class="headerlink" title="@PostFilter"></a>@PostFilter</h3><blockquote><p>对方法的返回值进行过滤</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@PostFilter(&quot;filterObject.equals(&#x27;lbwnb&#x27;)&quot;)</span><br><span class="line">public List&lt;String&gt; list test() &#123;&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> Security </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMvc 原始Web框架</title>
      <link href="/2024/07/15/09%20SpringMvc%20%E5%8E%9F%E5%A7%8BWeb%E6%A1%86%E6%9E%B6/"/>
      <url>/2024/07/15/09%20SpringMvc%20%E5%8E%9F%E5%A7%8BWeb%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="配置-SpringMvc-项目"><a href="#配置-SpringMvc-项目" class="headerlink" title="配置 SpringMvc 项目"></a>配置 SpringMvc 项目</h1><h2 id="使用-XML-配置"><a href="#使用-XML-配置" class="headerlink" title="使用 XML 配置"></a>使用 XML 配置</h2><p><code>Mvc</code>依赖坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>Thymeleaf</code>依赖坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-spring6<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>resources</code>文件夹下配置一下<code>spring.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.example&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置一下<code>web.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;https://jakarta.ee/xml/ns/jakartaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;https://jakarta.ee/xml/ns/jakartaee https://jakarta.ee/xml/ns/jakartaee/web-app_5_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;5.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>mvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>mvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="使用注解配置"><a href="#使用注解配置" class="headerlink" title="使用注解配置"></a>使用注解配置</h2><p>配置初始化器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainInitializer</span> <span class="keyword">extends</span> <span class="title class_">AbstractAnnotationConfigDispatcherServletInitializer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;WebConfiguration.class&#125;; <span class="comment">// 基本的 Spring 配置类</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/&quot;</span>&#125;; <span class="comment">// 匹配路径</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Spring-配置类"><a href="#Spring-配置类" class="headerlink" title="Spring 配置类"></a>Spring 配置类</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.example.controller&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfiguration</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span> <span class="comment">// 配置视图解析器</span></span><br><span class="line">    <span class="keyword">public</span> ThymeleafViewResolver <span class="title function_">thymeleafViewResolver</span><span class="params">(SpringTemplateEngine springTemplateEngine)</span> &#123;</span><br><span class="line">        <span class="type">ThymeleafViewResolver</span> <span class="variable">resolver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThymeleafViewResolver</span>();</span><br><span class="line">        resolver.setOrder(<span class="number">1</span>); <span class="comment">// 设定解析顺序</span></span><br><span class="line">        resolver.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>); <span class="comment">// 设定编码格式</span></span><br><span class="line">        resolver.setTemplateEngine(springTemplateEngine); <span class="comment">// 设定模板引擎</span></span><br><span class="line">        <span class="keyword">return</span> resolver;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span> <span class="comment">// 配置模板解析器</span></span><br><span class="line">    <span class="keyword">public</span> SpringResourceTemplateResolver <span class="title function_">templateResolver</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">SpringResourceTemplateResolver</span> <span class="variable">resolver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpringResourceTemplateResolver</span>();</span><br><span class="line">        resolver.setSuffix(<span class="string">&quot;.html&quot;</span>); <span class="comment">// 需要解析的后缀名称</span></span><br><span class="line">        resolver.setPrefix(<span class="string">&quot;classpath:&quot;</span>); <span class="comment">// 需要解析的 HTML 页面文件存放的位置，默认是 webapp。如果是类路径下需要添加 classpath: 前缀</span></span><br><span class="line">        resolver.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>); <span class="comment">// 设定编码格式</span></span><br><span class="line">        resolver.setCacheable(<span class="literal">false</span>);</span><br><span class="line">        resolver.setTemplateMode(<span class="string">&quot;HTML5&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> resolver;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span> <span class="comment">// 配置模板引擎</span></span><br><span class="line">    <span class="keyword">public</span> SpringTemplateEngine <span class="title function_">springTemplateEngine</span><span class="params">(ITemplateResolver resolver)</span> &#123;</span><br><span class="line">        <span class="type">SpringTemplateEngine</span> <span class="variable">engine</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpringTemplateEngine</span>();</span><br><span class="line">        engine.setTemplateResolver(resolver); <span class="comment">// 默认模板解析器</span></span><br><span class="line">        <span class="keyword">return</span> engine;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configureDefaultServletHandling</span><span class="params">(DefaultServletHandlerConfigurer configurer)</span> &#123;</span><br><span class="line">        configurer.enable(); <span class="comment">// 开启默认的 Servlet</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/static/**&quot;</span>).addResourceLocations(<span class="string">&quot;classpath:/static/&quot;</span>); <span class="comment">// 配置静态资源的访问路径</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Controller-控制器"><a href="#Controller-控制器" class="headerlink" title="Controller 控制器"></a>Controller 控制器</h1><h2 id="创建一个控制器"><a href="#创建一个控制器" class="headerlink" title="创建一个控制器"></a>创建一个控制器</h2><p>创建一个控制器只需添加<code>@Controller</code>注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span> <span class="comment">// 声明为 Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/index&quot;)</span> <span class="comment">// 访问路径</span></span><br><span class="line">    <span class="keyword">public</span> ModelAndView <span class="title function_">index</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>(<span class="string">&quot;index&quot;</span>); <span class="comment">// 填入视图名称</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可直接返回视图名称</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/index&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">index</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>; <span class="comment">// 视图名称</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>向<code>Thymeleaf</code>传递数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/index&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ModelAndView <span class="title function_">index</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ModelAndView</span> <span class="variable">modelAndView</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>(<span class="string">&quot;index&quot;</span>);</span><br><span class="line">        modelAndView.getModel().put(<span class="string">&quot;Key&quot;</span>, <span class="string">&quot;Value&quot;</span>); <span class="comment">// 将键值对传给 Model</span></span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/index&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">index</span><span class="params">(Model model)</span> &#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;Key&quot;</span>, <span class="string">&quot;Value&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Thymeleaf</code>接收数据</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;Key&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> 【接受键值对】</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/static/test.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> 【访问静态资源】</span><br></pre></td></tr></table></figure><h2 id="RequestMapping"><a href="#RequestMapping" class="headerlink" title="@RequestMapping"></a>@RequestMapping</h2><p><strong>path &#x2F; value</strong>：当前方法处理的请求路径</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/b&quot;)</span></span><br><span class="line"><span class="meta">@RequestMapping(&#123;&quot;/a&quot;, &quot;/b&quot;&#125;)</span></span><br></pre></td></tr></table></figure><p>路径还支持使用通配符进行匹配：</p><ul><li><code>?</code>：表示任意一个字符</li><li><code>*</code>：表示任意 0 - n 个字符</li><li><code>**</code>：表示当前目录或基于当前目录的多级目录</li></ul><p><strong>method</strong>：请求的方法类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/index&quot;, method = RequestMethod.GET)</span></span><br><span class="line"><span class="meta">@GetMapping(value = &quot;/index&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/index&quot;, method = RequestMethod.POST)</span></span><br><span class="line"><span class="meta">@PostMapping(value = &quot;/index&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/index&quot;, method = RequestMethod.PUT)</span></span><br><span class="line"><span class="meta">@PutMapping(value = &quot;/index&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/index&quot;, method = RequestMethod.DELETE)</span></span><br><span class="line"><span class="meta">@DeleteMapping(value = &quot;/index&quot;)</span></span><br></pre></td></tr></table></figure><p><strong>params</strong>：指定请求必须携带哪些请求参数（支持表达式）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/index&quot;, params = &#123;&quot;!username&quot;, &quot;password&quot;&#125;)</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/index&quot;, params = &#123;&quot;username!=test&quot;, &quot;password=123&quot;&#125;)</span></span><br></pre></td></tr></table></figure><p><strong>header</strong>：指定请求头必须携带哪些请求参数（支持表达式）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/index&quot;, headers = &quot;!Connection&quot;)</span></span><br></pre></td></tr></table></figure><h2 id="RequestBody"><a href="#RequestBody" class="headerlink" title="@RequestBody"></a>@RequestBody</h2><p><code>@RequestBody(&quot;Key&quot;)</code>自动注入请求参数，以<code>JSON</code>的形式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/index&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ModelAndView <span class="title function_">index</span><span class="params">(<span class="meta">@RequestBody(&quot;username&quot;)</span> String username)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;接受到请求参数：&quot;</span> + username);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>(<span class="string">&quot;index&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>设置<code>required = false</code>，将属性设定为非必须</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/index&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ModelAndView <span class="title function_">index</span><span class="params">(<span class="meta">@RequestBody(value = &quot;username&quot;, required = false)</span> String username)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;接受到请求参数：&quot;</span> + username);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>(<span class="string">&quot;index&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>设置<code>defaultValue</code>，表示没有该属性时的一个默认值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/index&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ModelAndView <span class="title function_">index</span><span class="params">(<span class="meta">@RequestBody(value = &quot;username&quot;, required = false, defaultValue = &quot;伞兵一号&quot;)</span> String username)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;接受到请求参数：&quot;</span> + username);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>(<span class="string">&quot;index&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="RequestParam"><a href="#RequestParam" class="headerlink" title="@RequestParam"></a>@RequestParam</h2><p>同上，不过是以<code>from</code>表单的形式</p><h2 id="RequestHeader"><a href="#RequestHeader" class="headerlink" title="@RequestHeader"></a>@RequestHeader</h2><p>同上，不过是用于获取请求头参数的</p><h2 id="CookieValue"><a href="#CookieValue" class="headerlink" title="@CookieValue"></a>@CookieValue</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/index&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ModelAndView <span class="title function_">index</span><span class="params">(<span class="meta">@CookieValue(value = &quot;key&quot;, required = false)</span> String key)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;获取到 cookie 的值为：&quot;</span> + key);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>(<span class="string">&quot;index&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="SessionAttrbutie"><a href="#SessionAttrbutie" class="headerlink" title="@SessionAttrbutie"></a>@SessionAttrbutie</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/index&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ModelAndView <span class="title function_">index</span><span class="params">(<span class="meta">@SessionAttribute(value = &quot;key&quot;, required = false)</span> String key)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;获取到 SessionAttribute 的值为：&quot;</span> + key);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>(<span class="string">&quot;index&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h2><p>添加<code>redirect:</code>前缀即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/index&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">index</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:home&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/home&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">home</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;home&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="请求转发"><a href="#请求转发" class="headerlink" title="请求转发"></a>请求转发</h2><p>添加<code>forward:</code>前缀即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/index&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">index</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;forward:home&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/home&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">home</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;home&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Bean-的-Web-作用域"><a href="#Bean-的-Web-作用域" class="headerlink" title="Bean 的 Web 作用域"></a>Bean 的 Web 作用域</h2><h3 id="request"><a href="#request" class="headerlink" title="request"></a>request</h3><blockquote><p>对于每次 HTTP 请求，使用 request 作用域定义的 Bean 都将产生一个新实例，请求结束后 Bean 也消失</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@RequestScope</span></span><br><span class="line"><span class="keyword">public</span> TestBean <span class="title function_">testBean</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TestBean</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="session"><a href="#session" class="headerlink" title="session"></a>session</h3><blockquote><p>对于每一个会话，使用 session 作用域定义的 Bean 都将产生一个新实例，会话过期后 Bean 也消失</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@SessionScope</span></span><br><span class="line"><span class="keyword">public</span> TestBean <span class="title function_">testBean</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TestBean</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="RestFul-风格"><a href="#RestFul-风格" class="headerlink" title="RestFul 风格"></a>RestFul 风格</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/index/&#123;id&#125;&quot;, method = RequestMethod.GET)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">get</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> String username)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;获取用户：&quot;</span> + username);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/index&quot;, method = RequestMethod.POST)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">post</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;添加用户：&quot;</span> + username);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/index&quot;, method = RequestMethod.PUT)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">put</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;修改用户：&quot;</span> + username);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/index/&#123;id&#125;&quot;, method = RequestMethod.DELETE)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">delete</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> String username)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;删除用户：&quot;</span> + username);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">请求方法</th><th align="center">作用</th><th align="center">RestFul风格网址</th></tr></thead><tbody><tr><td align="center">GET</td><td align="center">获取用户信息</td><td align="center"><a href="http://localhost:8080/mvc/index/123456">http://localhost:8080/mvc/index/123456</a></td></tr><tr><td align="center">POST</td><td align="center">添加用户信息</td><td align="center"><a href="http://localhost:8080/mvc/index/username=test">http://localhost:8080/mvc/index/username=test</a></td></tr><tr><td align="center">PUT</td><td align="center">修改用户信息</td><td align="center"><a href="http://localhost:8080/mvc/index/username=test">http://localhost:8080/mvc/index/username=test</a></td></tr><tr><td align="center">DELETE</td><td align="center">删除用户信息</td><td align="center"><a href="http://localhost:8080/mvc/index/123456">http://localhost:8080/mvc/index/123456</a></td></tr></tbody></table><h1 id="Interceptor-拦截器"><a href="#Interceptor-拦截器" class="headerlink" title="Interceptor 拦截器"></a>Interceptor 拦截器</h1><h2 id="创建一个拦截器"><a href="#创建一个拦截器" class="headerlink" title="创建一个拦截器"></a>创建一个拦截器</h2><p>创建一个拦截器只需要实现<code>HandlerInterceptor</code>接口即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123; <span class="comment">// 【处理之前】</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// 只有返回 true 才会继续，否则直接结束</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;&#125; <span class="comment">// 【处理之后】</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;&#125; <span class="comment">// 【完成之后】，在 DispatcherServlet 完全处理完请求后被调用</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要在配置类中进行注册</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">    registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">MainInterceptor</span>())</span><br><span class="line">      .addPathPatterns(<span class="string">&quot;/**&quot;</span>) <span class="comment">// 添加拦截器的匹配路径</span></span><br><span class="line">      .excludePathPatterns(<span class="string">&quot;/home&quot;</span>); <span class="comment">// 拦截器不进行拦截的路径</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/index&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">index</span><span class="params">()</span> &#123; <span class="comment">// 【处理中】</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>拦截器的执行顺序</p><blockquote><p>处理之前   -   处理中   -   处理之后   -   完成之后</p></blockquote><h2 id="创建多个拦截器"><a href="#创建多个拦截器" class="headerlink" title="创建多个拦截器"></a>创建多个拦截器</h2><p>在上一个的基础上，再创建第二个拦截器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SubInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123; <span class="comment">// 【处理之前】</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// 只有返回 true 才会继续，否则直接结束</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;&#125; <span class="comment">// 【处理之后】</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;&#125; <span class="comment">// 【完成之后】，在 DispatcherServlet 完全处理完请求后被调用</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注册拦截器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">    registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">MainInterceptor</span>()).addPathPatterns(<span class="string">&quot;/index&quot;</span>); <span class="comment">// 一号拦截器</span></span><br><span class="line">    registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">SubInterceptor</span>()).addPathPatterns(<span class="string">&quot;/**&quot;</span>); <span class="comment">// 二号拦截器</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>拦截器的执行顺序（拦截顺序就是注册的顺序）</p><blockquote><p>一号拦截器：处理之前<br>二号拦截器：处理之前<br>处理中<br>二号拦截器：处理之后<br>一号拦截器：处理之后<br>二号拦截器：完成之后<br>一号拦截器：完成之后</p></blockquote><h1 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h1><p>自定义一个异常处理控制器，一旦出现指定异常，就会转接到此控制器执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span> <span class="comment">// 用于全局控制器的增强，用于处理全局的异常、数据绑定和模型属性</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ErrorController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span> <span class="comment">// 捕获到指定异常</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">error</span><span class="params">(Exception e, Model model)</span> &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        model.addAttribute(<span class="string">&quot;e&quot;</span>, e);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ex&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写一个专门显示异常的页面<code>ex.html</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  500 - 服务器出现了一个内部错误 QAQ</span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;e&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/index&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">index</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="literal">true</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;您的氪金力度不足，无法访问！&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="JSON-数据格式"><a href="#JSON-数据格式" class="headerlink" title="JSON 数据格式"></a>JSON 数据格式</h1><h2 id="JSON-与-JavaScript"><a href="#JSON-与-JavaScript" class="headerlink" title="JSON 与 JavaScript"></a>JSON 与 JavaScript</h2><p>JSON字符串转为JS对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="string">&#x27;&#123;&quot;studentList&quot;: [&#123;&quot;name&quot;: &quot;杰哥&quot;, &quot;age&quot;: 18&#125;, &#123;&quot;name&quot;: &quot;阿伟&quot;, &quot;age&quot;: 18&#125;], &quot;count&quot;: 2&#125;&#x27;</span>)</span><br></pre></td></tr></table></figure><p>JS对象转为JSON字符串</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj)</span><br></pre></td></tr></table></figure><h2 id="JSON-与-Java"><a href="#JSON-与-Java" class="headerlink" title="JSON 与 Java"></a>JSON 与 Java</h2><p>添加<code>json</code>依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.fastjson2<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.34<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>JSONObject</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">JSONObject</span> <span class="variable">object</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">object.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;杰哥&quot;</span>);</span><br><span class="line">object.put(<span class="string">&quot;age&quot;</span>, <span class="number">18</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> object.toJSONString();</span><br></pre></td></tr></table></figure><p><strong>JSONArray</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">JSONArray</span> <span class="variable">array</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONArray</span>();</span><br><span class="line">array.add(<span class="keyword">new</span> <span class="title class_">Object</span>());</span><br><span class="line">array.add(<span class="number">1</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> array.toJSONString();</span><br></pre></td></tr></table></figure><p><code>SpringMvc</code>非常智能，可以直接返回一个对象类型，它会被自动转换为<code>JSON</code>字符串格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/data&quot;, produces = &quot;application/json&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> Student <span class="title function_">data</span><span class="params">()</span> &#123; <span class="comment">// 直接返回一个对象类型</span></span><br><span class="line">    <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">    student.setName(<span class="string">&quot;杰哥&quot;</span>);</span><br><span class="line">    student.setAge(<span class="number">18</span>);</span><br><span class="line">    <span class="keyword">return</span> student;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是需要添加以下依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.fastjson2<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson2-extension-spring6<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.34<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>以及编写以下配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configureMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> &#123;</span><br><span class="line">    converters.add(<span class="keyword">new</span> <span class="title class_">FastJsonHttpMessageConverter</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="文件的上传与下载"><a href="#文件的上传与下载" class="headerlink" title="文件的上传与下载"></a>文件的上传与下载</h1><h2 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h2><p>在<code>MainInitializer</code>中添加一个新的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">customizeRegistration</span><span class="params">(ServletRegistration.Dynamic registration)</span> &#123;</span><br><span class="line">    registration.setMultipartConfig(<span class="keyword">new</span> <span class="title class_">MultipartConfigElement</span>(<span class="string">&quot;上传文件的保存地址&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写<code>Controller</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/upload&quot;, method = RequestMethod.POST)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">upload</span><span class="params">(<span class="meta">@RequestParam</span> MultipartFile file)</span> <span class="keyword">throws</span> IOException &#123; <span class="comment">// 上传文件</span></span><br><span class="line">    file.transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;文件名称&quot;</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;文件上传成功！&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写前端<code>div</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;upload&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span>&gt;</span> 【选择需要上传的文件】</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="下载文件"><a href="#下载文件" class="headerlink" title="下载文件"></a>下载文件</h2><p>编写<code>Controller</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/download&quot;, method = RequestMethod.GET)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">download</span><span class="params">(HttpServletResponse response)</span> &#123; <span class="comment">// 下载文件</span></span><br><span class="line">    response.setContentType(<span class="string">&quot;multipart/form-data&quot;</span>);</span><br><span class="line">    <span class="keyword">try</span>(<span class="type">OutputStream</span> <span class="variable">stream</span> <span class="operator">=</span> response.getOutputStream();</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;下载的文件地址&quot;</span>)) &#123;</span><br><span class="line">        IOUtils.copy(inputStream, stream);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写前端<code>href</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;download&quot;</span> <span class="attr">download</span>=<span class="string">&quot;文件名称&quot;</span>&gt;</span>点击下载最新资源<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 注解 </tag>
            
            <tag> Web </tag>
            
            <tag> 交互 </tag>
            
            <tag> 文件传输 </tag>
            
            <tag> Spring </tag>
            
            <tag> Bean </tag>
            
            <tag> XML </tag>
            
            <tag> Mvc </tag>
            
            <tag> Controller </tag>
            
            <tag> RestFul </tag>
            
            <tag> Interceptor </tag>
            
            <tag> JSON </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring 框架</title>
      <link href="/2024/06/27/08%20Spring%20%E6%A1%86%E6%9E%B6/"/>
      <url>/2024/06/27/08%20Spring%20%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="配置-Spring-项目"><a href="#配置-Spring-项目" class="headerlink" title="配置 Spring 项目"></a>配置 Spring 项目</h1><p><code>Spring</code>核心框架的<code>Maven</code>依赖坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>Spring</code>的配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>演示：使用<code>Spring</code>来管理对象</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123; <span class="comment">// 演示的对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加至配置文件<code>test.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.test.bean.Student&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;test.xml&quot;</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> (Student) context.getBean(<span class="string">&quot;student&quot;</span>); <span class="comment">// 获取对象</span></span><br><span class="line">        student.hello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>ApplicationContext</code>：应用程序上下文的顶层接口</li><li><code>ClassPathXmlApplicationContext</code>：上面的<code>XML</code>配置文件的实现类</li></ul><h1 id="Bean"><a href="#Bean" class="headerlink" title="Bean"></a>Bean</h1><p>相互导入配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;test.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置<code>Bean</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;teacher&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.test.bean.Teacher&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span> <span class="attr">lazy-init</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.test.bean.Student&quot;</span> <span class="attr">id</span>=<span class="string">&quot;student2&quot;</span> <span class="attr">depends-on</span>=<span class="string">&quot;teacher&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">alias</span> <span class="attr">name</span>=<span class="string">&quot;student&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;test&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.test.bean.a&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;init&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;destroy&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.test.bean.b&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span> <span class="attr">autowire-candidate</span>=<span class="string">&quot;false&quot;</span> <span class="attr">primary</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>id</code>：<code>Bean</code>的唯一标识符</li><li><code>name</code>：作用同<code>id</code></li><li><code>class</code>：声明类的位置</li><li><code>scope</code>：类的创建模式<ul><li><code>singleton</code>：单例模式【默认】</li><li><code>prototype</code>：原型模式</li></ul></li><li><code>lazy-init</code>：是否开启懒加载<ul><li><code>false</code>：否【默认】</li><li><code>true</code>：是</li></ul></li><li><code>depends-on</code>：设定前置加载<code>Bean</code></li><li><code>alias</code>：别名</li><li><code>init-method</code>：声明初始化方法</li><li><code>destroy-method</code>：声明销毁方法</li><li><code>autowire</code>：开启自动装配<ul><li><code>byType</code>：根据类型</li><li><code>byName</code>：根据名称</li><li><code>constructor</code>：使用构造方法完成依赖注入</li></ul></li><li><code>autowire-candidate</code>：是否开启自动装配候选<ul><li><code>false</code>：否</li><li><code>true</code>：是【默认】</li></ul></li><li><code>primary</code>：是否优先选择该<code>Bean</code>进行自动装配<ul><li><code>false</code>：否【默认】</li><li><code>true</code>：是</li></ul></li></ul><h1 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h1><h2 id="Setter-依赖注入"><a href="#Setter-依赖注入" class="headerlink" title="Setter 依赖注入"></a>Setter 依赖注入</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Teacher teacher;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTeacher</span><span class="params">(Teacher teacher)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.teacher = teacher;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;teacher&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.test.bean.ArtTeacher&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.test.bean.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;18&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;teacher&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;teacher&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="构造方法依赖注入"><a href="#构造方法依赖注入" class="headerlink" title="构造方法依赖注入"></a>构造方法依赖注入</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Integer&gt; list;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;Integer&gt; set;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, String&gt; map;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(List&lt;Integer&gt; list, Set&lt;Integer&gt; set, Map&lt;String, String&gt; map)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.list = list;</span><br><span class="line">        <span class="built_in">this</span>.set = set;</span><br><span class="line">        <span class="built_in">this</span>.map = map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.test.bean.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;set&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;语文&quot;</span> <span class="attr">value</span>=<span class="string">&quot;100.0&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;数学&quot;</span> <span class="attr">value</span>=<span class="string">&quot;80.0&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;英语&quot;</span> <span class="attr">value</span>=<span class="string">&quot;92.5&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="工厂模式和工厂-Bean"><a href="#工厂模式和工厂-Bean" class="headerlink" title="工厂模式和工厂 Bean"></a>工厂模式和工厂 Bean</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;&#125; <span class="comment">// 产品类</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentFactory</span> &#123; <span class="comment">// 工厂类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Student <span class="title function_">getStudent</span><span class="params">()</span> &#123; <span class="comment">// 工厂方法</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;studentFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.test.bean.StudentFactory&quot;</span>/&gt;</span> 【将工厂类注册为 Bean】</span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">factory-bean</span>=<span class="string">&quot;studentFactory&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getStudent&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p><code>factory-bean</code>：声明工厂<code>Bean</code></p></li><li><p><code>factory-method</code>：声明工厂方法</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Student</span> <span class="variable">bean</span> <span class="operator">=</span> (Student) context.getBean(<span class="string">&quot;studentFactory&quot;</span>); <span class="comment">// 获取产品类</span></span><br><span class="line"><span class="type">StudentFactory</span> <span class="variable">bean</span> <span class="operator">=</span> (StudentFactory) context.getBean(<span class="string">&quot;&amp;studentFactory&quot;</span>); <span class="comment">// 获取工厂类</span></span><br></pre></td></tr></table></figure><h1 id="使用注解开发"><a href="#使用注解开发" class="headerlink" title="使用注解开发"></a>使用注解开发</h1><p>将一个类自动配置为<code>Bean</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span> <span class="comment">// 自动配置为 bean</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span> <span class="comment">// 【autowire】</span></span><br><span class="line">    <span class="keyword">private</span> Teacher teacher;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span> <span class="comment">// 也可以在 set 时注入</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;a&quot;)</span> <span class="comment">// 匹配名称为 a 的 Teacher 类型的 Bean</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTeacher</span><span class="params">(Teacher teacher)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.teacher = teacher;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建一个配置类，作用等同于<code>XML</code>配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Import(XXX.class)</span> <span class="comment">// 【import】</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.test.bean&quot;)</span> <span class="comment">// 自动扫描该包下的所有类，有 Component 注解的，将其注册为 Bean</span></span><br><span class="line"><span class="meta">@Configuration</span> <span class="comment">// 声明配置类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(&quot;teacher&quot;)</span> <span class="comment">// 【bean】 将 Teacher 注册为 Bean</span></span><br><span class="line">    <span class="keyword">public</span> Teacher <span class="title function_">teacher</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Teacher</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(name = &quot;student&quot;, initMethod = &quot;&quot;, destroyMethod = &quot;&quot;, autowireCandidate = false)</span></span><br><span class="line">    <span class="meta">@Lazy(true)</span> <span class="comment">// 【lazy-init】</span></span><br><span class="line">    <span class="meta">@Scope(&quot;prototype&quot;)</span> <span class="comment">// 【scope】</span></span><br><span class="line">    <span class="meta">@DependsOn(&quot;teacher&quot;)</span> <span class="comment">// 【depends-on】</span></span><br><span class="line">    <span class="keyword">public</span> Student <span class="title function_">student</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注册一个工厂<code>Bean</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentFactory</span> <span class="keyword">implements</span> <span class="title class_">FactoryBean</span>&lt;Student&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Student <span class="title function_">getObject</span><span class="params">()</span> &#123; <span class="comment">// 生产的 Bean 对象</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123; <span class="comment">// 生产的 Bean 类型</span></span><br><span class="line">        <span class="keyword">return</span> Student.class;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSingleton</span><span class="params">()</span> &#123; <span class="comment">// 生产的 Bean 是否采用单例模式</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(MainConfiguration.class);</span><br></pre></td></tr></table></figure><ul><li><code>AnnotationConfigApplicationContext</code>：可用于注解配置的上下文</li></ul><h1 id="Bean-Aware"><a href="#Bean-Aware" class="headerlink" title="Bean Aware"></a>Bean Aware</h1><blockquote><p>Spring 容器可以识别并处理特定的 Bean</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">BeanNameAware</span>, BeanClassLoaderAware &#123; <span class="comment">// 实现对应的 Aware 接口</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBeanName</span><span class="params">(String name)</span> &#123; <span class="comment">// 需要实现 set 方法</span></span><br><span class="line">        System.out.println(name); <span class="comment">// 获得 Bean 对应的资源</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBeanClassLoader</span><span class="params">(ClassLoader classLoader)</span> &#123;</span><br><span class="line">        System.out.println(classLoader);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="任务调度"><a href="#任务调度" class="headerlink" title="任务调度"></a>任务调度</h1><h2 id="异步任务"><a href="#异步任务" class="headerlink" title="异步任务"></a>异步任务</h2><p>配置类需要加上<code>EnableAsync</code>注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableAsync</span> <span class="comment">// 加上该注解，以支持异步任务</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainConfiguration</span> &#123;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">syncTest</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;&#125; <span class="comment">// 同步执行</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Async</span> <span class="comment">// 加上该注解，该方法变成异步执行</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">asyncTest</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;&#125; <span class="comment">// 异步执行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h2><p>配置类需要加上<code>EnableScheduling</code>注解，需要定时执行的方法直接编写在配置类中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableScheduling</span> <span class="comment">// 加上该注解，以支持定时任务</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Scheduled(fixedRate = 2000)</span> <span class="comment">// 加上该注解，该方法变成定时执行</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">task</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Scheduled</code>内的参数</p><ul><li><code>fixedDelay</code>：在上一次定时任务执行完之后，间隔多久继续执行</li><li><code>fixedRate</code>：无论上一次定时任务有没有执行完成，两次任务之间的时间间隔</li><li><code>cron</code>：<a href="https://blog.csdn.net/sunnyzyq/article/details/98597252">【cron表达式】</a></li></ul><h1 id="监听器"><a href="#监听器" class="headerlink" title="监听器"></a>监听器</h1><h2 id="事件的监听"><a href="#事件的监听" class="headerlink" title="事件的监听"></a>事件的监听</h2><p>要监听的<code>Bean</code>需要实现<code>ApplicationListener</code>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestListener</span> <span class="keyword">implements</span> <span class="title class_">ApplicationListener</span>&lt;ContextRefreshedEvent&gt; &#123; <span class="comment">// 泛型填写需要被监听的事件</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onApplicationEvent</span><span class="params">(ContextRefreshedEvent event)</span> &#123; <span class="comment">// 监听到指定事件时触发</span></span><br><span class="line">        System.out.println(event.getApplicationContext());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(MainConfiguration.class);</span><br><span class="line"><span class="type">TestListener</span> <span class="variable">testListener</span> <span class="operator">=</span> context.getBean(TestListener.class); <span class="comment">// 上下文更新操作，会被以上监听器捕捉到</span></span><br></pre></td></tr></table></figure><h2 id="事件的定义"><a href="#事件的定义" class="headerlink" title="事件的定义"></a><strong>事件的定义</strong></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestEvent</span> <span class="keyword">extends</span> <span class="title class_">ApplicationEvent</span> &#123; <span class="comment">// 自定义事件，需要继承 ApplicationEvent</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TestEvent</span><span class="params">(Object source)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(source);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="事件的发布"><a href="#事件的发布" class="headerlink" title="事件的发布"></a><strong>事件的发布</strong></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TaskComponent</span> <span class="keyword">implements</span> <span class="title class_">ApplicationEventPublisherAware</span> &#123; <span class="comment">// 事件发布器，需要继承 ApplicationEventPublisherAware</span></span><br><span class="line">    ApplicationEventPublisher publisher;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setApplicationEventPublisher</span><span class="params">(ApplicationEventPublisher publisher)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.publisher = publisher;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        publisher.publishEvent(<span class="keyword">new</span> <span class="title class_">TestEvent</span>(<span class="built_in">this</span>)); <span class="comment">// 发布自定义事件</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="外部属性注入"><a href="#外部属性注入" class="headerlink" title="外部属性注入"></a>外部属性注入</h1><p>在<code>resources</code>文件夹下新建<code>test.properties</code>文件，并将其的编码格式改为<code>UTF-8</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">test.name</span>=<span class="string">小星</span></span><br></pre></td></tr></table></figure><p>配置类添加以下注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PropertySource(value = &quot;classpath:test.properties&quot;, encoding = &quot;UTF-8&quot;)</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;test.name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name; <span class="comment">// 外部属性注入</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="SpringEL"><a href="#SpringEL" class="headerlink" title="SpringEL"></a>SpringEL</h1><h2 id="读取-Java-语句"><a href="#读取-Java-语句" class="headerlink" title="读取 Java 语句"></a>读取 Java 语句</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ExpressionParser</span> <span class="variable">parser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpelExpressionParser</span>();</span><br><span class="line"><span class="type">Expression</span> <span class="variable">exp</span> <span class="operator">=</span> parser.parseExpression(<span class="string">&quot;Java语句&quot;</span>);</span><br><span class="line">exp.getValue(); <span class="comment">// 获取该语句的值</span></span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">Java语句</th><th align="center">值</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center"><code>&#39;Hello World&#39;</code></td><td align="center"><code>Hello World</code></td><td align="center">字符串需要由单引号引起</td></tr><tr><td align="center"><code>new String(&#39;hello world&#39;).toUpperCase()</code></td><td align="center"><code>HELLO WORLD</code></td><td align="center"></td></tr><tr><td align="center"><code>66 &gt; 77</code></td><td align="center"><code>false</code></td><td align="center"></td></tr><tr><td align="center"><code>99 + 99 * 3</code></td><td align="center"><code>396</code></td><td align="center"></td></tr><tr><td align="center"><code>T(java.lang.Math).random()</code></td><td align="center"><code>[0, 1)之间的随机值</code></td><td align="center">由<code>T()</code>囊括，包含完整包名 + 类名</td></tr><tr><td align="center"><code>T(Math).random()</code></td><td align="center"><code>[0, 1)之间的随机值</code></td><td align="center"><code>java.lang</code>的话可以省略</td></tr></tbody></table><h2 id="读取对象属性"><a href="#读取对象属性" class="headerlink" title="读取对象属性"></a><strong>读取对象属性</strong></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Clazz&gt; list = List.of(<span class="keyword">new</span> <span class="title class_">Clazz</span>(<span class="string">&quot;高等数学&quot;</span>, <span class="number">4</span>), <span class="keyword">new</span> <span class="title class_">Clazz</span>(<span class="string">&quot;C语言程序设计&quot;</span>, <span class="number">3</span>));</span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, String&gt; map = Map.of(<span class="string">&quot;test&quot;</span>, <span class="string">&quot;你干嘛&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">record</span> <span class="title class_">Clazz</span><span class="params">(String name, <span class="type">int</span> score)</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(MainConfiguration.class);</span><br><span class="line"><span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> context.getBean(Student.class);</span><br><span class="line"></span><br><span class="line"><span class="type">ExpressionParser</span> <span class="variable">parser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpelExpressionParser</span>();</span><br><span class="line"><span class="type">Expression</span> <span class="variable">exp</span> <span class="operator">=</span> parser.parseExpression(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">exp.getValue(student); <span class="comment">// 直接读取对象的 name 属性，需要有 get 方法</span></span><br><span class="line">exp.setValue(student, <span class="string">&quot;tset&quot;</span>); <span class="comment">// 直接修改对象的 name 属性，需要有 set 方法</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ExpressionParser</span> <span class="variable">parser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpelExpressionParser</span>();</span><br><span class="line"><span class="type">Expression</span> <span class="variable">exp</span> <span class="operator">=</span> parser.parseExpression(<span class="string">&quot;SpringEL表达式&quot;</span>);</span><br><span class="line">exp.getValue(student); <span class="comment">// 获取该表达式的值</span></span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">SpringEL表达式</th><th align="center">值</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center"><code>map[&#39;test&#39;]</code></td><td align="center"><code>你干嘛</code></td><td align="center"><code>对于 Map，使用 map[key] 来取出 value</code></td></tr><tr><td align="center"><code>list[1]</code></td><td align="center"><code>Clazz(&quot;C语言程序设计&quot;, 3)</code></td><td align="center"><code>对于 List、数组，使用 list[index]</code></td></tr><tr><td align="center"><code>&#123;5, 2, 1, 4, 6, 7, 0, 3, 9, 8&#125;</code></td><td align="center"><code>[5, 2, 1, 4, 6, 7, 0, 3, 9, 8]</code></td><td align="center"><code>值是一个 List</code></td></tr><tr><td align="center"><code>&#123;&#123;1, 2&#125;, &#123;3, 4&#125;&#125;</code></td><td align="center"><code>[[1, 2], [3, 4]]</code></td><td align="center"><code>支持嵌套使用</code></td></tr><tr><td align="center"><code>&#123;name: &#39;小明&#39;, address: &#39;北京市&#39;&#125;</code></td><td align="center"><code>&#123;name=小明, address=北京市&#125;</code></td><td align="center"><code>值是一个 Map</code></td></tr><tr><td align="center"><code>list.?[name == &#39;高等数学&#39;]</code></td><td align="center"><code>[Clazz[name=高等数学, score=4]]</code></td><td align="center"><code>根据条件筛选出新的集合</code></td></tr><tr><td align="center"><code>list.?[score &lt; 4]</code></td><td align="center"><code>[Clazz[name=C语言程序设计, score=3]]</code></td><td align="center"></td></tr><tr><td align="center"><code>list.![name]</code></td><td align="center"><code>[高等数学, C语言程序设计]</code></td><td align="center"><code>根据字段映射出新的集合</code></td></tr><tr><td align="center"><code>name?.toUpperCase()</code></td><td align="center"><code>Test</code></td><td align="center"><code>作用：判空</code></td></tr></tbody></table><h1 id="AOP-面向切片"><a href="#AOP-面向切片" class="headerlink" title="AOP 面向切片"></a>AOP 面向切片</h1><h2 id="使用配置实现-AOP"><a href="#使用配置实现-AOP" class="headerlink" title="使用配置实现 AOP"></a>使用配置实现 AOP</h2><p><code>AOP</code>核心框架的<code>Maven</code>依赖坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>AOP</code>的配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>使用AOP进行行为增强</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">study</span><span class="params">(String str)</span> &#123;&#125; <span class="comment">// 原本的逻辑</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentAOP</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beforeStudy</span><span class="params">()</span> &#123;&#125; <span class="comment">// 前置增强操作</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterStudy</span><span class="params">(JoinPoint point)</span> &#123; <span class="comment">// 后置增强操作</span></span><br><span class="line">        point.getArgs()[<span class="number">0</span>]; <span class="comment">// 获取参数数组的第 1 个参数</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将他们都注册为<code>Bean</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.test.bean.Student&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentAOP&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.test.bean.StudentAOP&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>在配置文件中添加切入点</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.test.bean.Student.study(..))&quot;</span>/&gt;</span> 【添加切入点】</span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;studentAOP&quot;</span>&gt;</span> 【切入的 Bean】</span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;beforeStudy&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;test&quot;</span>/&gt;</span> 【添加切入方法】</span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">&quot;afterStudy&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;test&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>execution：</strong><code>修饰符 包名.类名.方法名称(方法参数)</code></p><p><strong>环绕方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">study</span><span class="params">(String str)</span> &#123; <span class="comment">// 原本的方法</span></span><br><span class="line">        <span class="keyword">if</span>(str.equals(<span class="string">&quot;Java&quot;</span>))</span><br><span class="line">            System.out.println(<span class="string">&quot;我的梦想是学Java&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;我就要学Java，不要修改我的梦想！&quot;</span>);</span><br><span class="line">            str = <span class="string">&quot;Java&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentAOP</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">around</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是她的家长，他不能学Java，必须学Rust，这是为他好&quot;</span>); <span class="comment">// 前置增强操作</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> joinPoint.proceed(<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;Rust&quot;</span>&#125;); <span class="comment">// 执行原本的方法，可以接收原方法的返回值</span></span><br><span class="line">        <span class="keyword">if</span>(value.equals(<span class="string">&quot;Java&quot;</span>)) &#123; <span class="comment">// 后置增强操作</span></span><br><span class="line">            System.out.println(<span class="string">&quot;听话，学Rust以后进大厂！&quot;</span>);</span><br><span class="line">            value = <span class="string">&quot;Rust&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> value; <span class="comment">// 可以修改原方法的返回值</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.test.bean.Student.study(String))&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;studentAOP&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:around</span> <span class="attr">method</span>=<span class="string">&quot;around&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;test&quot;</span>/&gt;</span> 【添加环绕方法】</span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;test.xml&quot;</span>);</span><br><span class="line"><span class="type">Student</span> <span class="variable">bean</span> <span class="operator">=</span> context.getBean(Student.class);</span><br><span class="line">System.out.println(<span class="string">&quot;已报名：&quot;</span> + bean.study(<span class="string">&quot;Java&quot;</span>));</span><br></pre></td></tr></table></figure><p>演示结果</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">我是她的家长，他不能学Java，必须学Rust，这是为他好</span><br><span class="line">我就要学Java，不要修改我的梦想！</span><br><span class="line">听话，学Rust以后进大厂！</span><br><span class="line">已报名：Rust</span><br></pre></td></tr></table></figure><h2 id="使用接口实现-AOP"><a href="#使用接口实现-AOP" class="headerlink" title="使用接口实现 AOP"></a>使用接口实现 AOP</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">study</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentAOP</span> <span class="keyword">implements</span> <span class="title class_">MethodBeforeAdvice</span>, AfterReturningAdvice, MethodInterceptor &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">(Method method, Object[] args, Object target)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="comment">// 前置增强操作</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturning</span><span class="params">(Object returnValue, Method method, Object[] args, Object target)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="comment">// 后置增强操作</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(MethodInvocation invocation)</span> <span class="keyword">throws</span> Throwable &#123; <span class="comment">// 环绕方法</span></span><br><span class="line">        <span class="comment">// 前置增强操作</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> invocation.proceed(); <span class="comment">// 调用原方法，并接收返回值</span></span><br><span class="line">        <span class="comment">// 后置增强操作</span></span><br><span class="line">        <span class="keyword">return</span> value + <span class="string">&quot;增强&quot;</span>; <span class="comment">// 返回新的值</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>method</code>：原方法</li><li><code>args</code>：原方法的实参列表</li><li><code>target</code>：执行原方法的实例对象</li><li><code>returnValue</code>：原方法的返回值</li></ul><p>在配置文件中添加该<code>AOP</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;studentAOP&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;test&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="使用注解实现-AOP"><a href="#使用注解实现-AOP" class="headerlink" title="使用注解实现 AOP"></a>使用注解实现 AOP</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span> <span class="comment">// 加上该注解，以支持 AOP</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Student <span class="title function_">student</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> StudentAOP <span class="title function_">studentAOP</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">StudentAOP</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">study</span><span class="params">(String str)</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>AOP</code>实现类需要添加<code>Aspect</code>注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentAOP</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(value = &quot;execution(* com.test.bean.Student.study(..)) &amp;&amp; args(str)&quot;, argNames = &quot;str&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">(String str)</span> &#123;&#125; <span class="comment">// 前置增强操作，可以快速得到传入的参数</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterReturning(value = &quot;execution(* com.test.bean.Student.study())&quot;, argNames = &quot;returnVal&quot;, returning = &quot;returnVal&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturn</span><span class="params">(Object returnVal)</span> &#123;&#125; <span class="comment">// 后置增强操作，可以快速得到原方法的返回值</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;execution(* com.test.bean.Student.study(..))&quot;)</span> <span class="comment">// 【expression】</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">around</span><span class="params">(ProceedingJoinPoint point)</span> <span class="keyword">throws</span> Throwable &#123; <span class="comment">// 环绕方法</span></span><br><span class="line">        <span class="comment">// 前置增强操作</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">val</span> <span class="operator">=</span> point.proceed();</span><br><span class="line">        <span class="comment">// 后置增强操作</span></span><br><span class="line">        <span class="keyword">return</span> val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="整合-Mybatis-框架"><a href="#整合-Mybatis-框架" class="headerlink" title="整合 Mybatis 框架"></a>整合 Mybatis 框架</h1><p>数据库相关的<code>Maven</code>依赖坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.31<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>Mybatis</code>的配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/my_database&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;mapper.TestMapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>将<code>SqlSessionTemplate</code>注册为<code>Bean</code></p><blockquote><p>SqlSessionTemplate 提供了线程安全的 MyBatis 操作入口</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Student <span class="title function_">student</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SqlSessionTemplate <span class="title function_">sqlSessionTemplate</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(Resources.getResourceAsReader(<span class="string">&quot;mybatis-config.xml&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SqlSessionTemplate</span>(factory);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>演示</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(MainConfiguration.class);</span><br><span class="line"><span class="type">SqlSessionTemplate</span> <span class="variable">template</span> <span class="operator">=</span> context.getBean(SqlSessionTemplate.class);</span><br><span class="line"><span class="type">TestMapper</span> <span class="variable">testMapper</span> <span class="operator">=</span> template.getMapper(TestMapper.class);</span><br><span class="line">System.out.println(testMapper.getStudent());</span><br></pre></td></tr></table></figure><p>配置类加上<code>MapperScan</code>注解，可以自动扫描该包下的所有接口为<code>Mapper</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MapperScan(&quot;com.test.bean&quot;)</span></span><br></pre></td></tr></table></figure><p>不使用<code>XML</code>配置文件的写法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.test.bean&quot;)</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.test.bean&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainConfiguration</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span> &#123; <span class="comment">// 数据库连接</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PooledDataSource</span>(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>, <span class="string">&quot;jdbc:mysql://localhost:3306/my_database&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SqlSessionFactoryBean <span class="title function_">sqlSessionFactoryBean</span><span class="params">(DataSource dataSource)</span> &#123;</span><br><span class="line">        <span class="type">SqlSessionFactoryBean</span> <span class="variable">bean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBean</span>();</span><br><span class="line">        bean.setDataSource(dataSource);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>演示</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(MainConfiguration.class);</span><br><span class="line"><span class="type">TestMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> context.getBean(TestMapper.class);</span><br><span class="line">System.out.println(mapper.getStudent());</span><br></pre></td></tr></table></figure><h1 id="HikariCP-连接池"><a href="#HikariCP-连接池" class="headerlink" title="HikariCP 连接池"></a>HikariCP 连接池</h1><p><code>HikariCP</code>核心框架的<code>Maven</code>依赖坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zaxxer<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>HikariCP<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>更换数据源实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">HikariDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HikariDataSource</span>();</span><br><span class="line">    dataSource.setJdbcUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/my_database&quot;</span>);</span><br><span class="line">    dataSource.setDriverClassName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">    dataSource.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">    dataSource.setPassword(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> dataSource;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Spring-事务管理"><a href="#Spring-事务管理" class="headerlink" title="Spring 事务管理"></a>Spring 事务管理</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span> <span class="comment">// 加上该注解，以支持事务管理</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> TransactionManager <span class="title function_">transactionManager</span><span class="params">(DataSource dataSource)</span> &#123; <span class="comment">// 事务管理器</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DataSourceTransactionManager</span>(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注解<code>Transactional</code>声明此方法是一个事务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span> <span class="comment">// 此注解表示事务，之后执行的所有方法都会在同一个事务中执行</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p><code>Transactional</code>注解的参数</p><ul><li><p><code>transactionManager</code>：指定事务管理器</p></li><li><p><code>propagation</code>：事务传播规则，默认为<code>PROPAGATION_REQUIRED</code></p></li><li><p><code>isolation</code>：事务隔离级别</p></li><li><p><code>timeout</code>：事务超时时间</p></li><li><p><code>readOnly</code>：是否为只读事务</p></li><li><p><code>rollbackFor</code>：发生指定异常时回滚【默认】</p></li><li><p><code>noRollbackFor</code>：发生指定异常时不回滚</p><table><thead><tr><th align="center">隔离级别</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">读未提交</td><td align="center">其他事务会读取当前事务尚未更改的提交</td></tr><tr><td align="center">读已提交</td><td align="center">其他事务会读取当前事务已经提交的数据</td></tr><tr><td align="center">可重复读</td><td align="center">其他事务会读取当前事务已经提交的数据，并且其他事务执行过程中不允许再进行数据修改</td></tr><tr><td align="center">串行化</td><td align="center">一个事务必须等待其他事务结束之后才能开始执行</td></tr></tbody></table><table><thead><tr><th align="center">隔离级别</th><th align="center">脏读</th><th align="center">虚读</th><th align="center">幻读</th></tr></thead><tbody><tr><td align="center">读未提交</td><td align="center">可能</td><td align="center">可能</td><td align="center">可能</td></tr><tr><td align="center">读已提交</td><td align="center">不可能</td><td align="center">可能</td><td align="center">可能</td></tr><tr><td align="center">可重复读</td><td align="center">不可能</td><td align="center">不可能</td><td align="center">可能</td></tr><tr><td align="center">串行化</td><td align="center">不可能</td><td align="center">不可能</td><td align="center">不可能</td></tr></tbody></table></li><li><p><strong>脏读</strong>：读取到了被回滚的数据</p></li><li><p><strong>虚读</strong>：由于其他事务更新数据，两次读取的数据不一致</p></li><li><p><strong>幻读</strong>：由于其他事务执行插入删除操作，而又无法感知到表中记录条数发生变化，当下次再读取时会莫名其妙多出或缺失数据</p></li></ul><p><img src="/../images/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/08%20JavaSpring%20%E6%A1%86%E6%9E%B6-1.jpg"></p><h1 id="集成-JUnit-测试"><a href="#集成-JUnit-测试" class="headerlink" title="集成 JUnit 测试"></a>集成 JUnit 测试</h1><p>测试相关的<code>Maven</code>依赖坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ExtendWith(SpringExtension.class)</span> <span class="comment">// 加上该注解，以支持集成 JUnit 测试</span></span><br><span class="line"><span class="meta">@ContextConfiguration(classes = TestConfiguration.class)</span> <span class="comment">// 表示要加载哪一个配置文件</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestMain</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    TestService service;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123; <span class="comment">// 测试方法</span></span><br><span class="line">        service.test();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 注解 </tag>
            
            <tag> 事务 </tag>
            
            <tag> 监听器 </tag>
            
            <tag> JUnit </tag>
            
            <tag> Spring </tag>
            
            <tag> Bean </tag>
            
            <tag> Bean Aware </tag>
            
            <tag> 任务调度 </tag>
            
            <tag> SpringEL </tag>
            
            <tag> AOP </tag>
            
            <tag> HikariCP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis 持久层框架</title>
      <link href="/2024/06/15/07%20Mybatis%20%E6%8C%81%E4%B9%85%E5%B1%82%E6%A1%86%E6%9E%B6/"/>
      <url>/2024/06/15/07%20Mybatis%20%E6%8C%81%E4%B9%85%E5%B1%82%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h1><blockquote><p>MyBatis 是一个流行的 Java 持久层框架，主要用于简化数据库操作</p><p>它提供了一个半自动化的对象关系映射解决方案，允许开发者通过 XML 或注解方式将 SQL 语句与 Java 对象进行映射</p></blockquote><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;版本号&quot;</span> encoding=<span class="string">&quot;编码格式&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span>   <span class="comment">&lt;!-- 环境：配置 Mybatis 的环境 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span>   <span class="comment">&lt;!-- 环境变量：支持多套环境变量，例如开发环境、生产环境 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span>   <span class="comment">&lt;!-- 事务管理器：默认 JDBC --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span>   <span class="comment">&lt;!-- 数据源：使用连接池，并加载 MySQL 驱动连接数据库 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;驱动类&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;数据库连接 URL&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;用户名&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;密码&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="映射器"><a href="#映射器" class="headerlink" title="映射器"></a>映射器</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">url</span>=<span class="string">&quot;映射器地址&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;映射器地址&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;映射器所在类&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;映射器所在包&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span>   <span class="comment">&lt;!-- 设置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;JDK_LOGGING&quot;</span> /&gt;</span>   <span class="comment">&lt;!-- 使用 JUL 日志系统输出 Mybatis 的日志信息 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span>   <span class="comment">&lt;!-- 开启将下划线映射为驼峰大小写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">&quot;要起别名的类&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;别名&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;要起别名的包&quot;</span>/&gt;</span>   <span class="comment">&lt;!-- 默认使用类名的小写形式作为别名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="映射器-1"><a href="#映射器-1" class="headerlink" title="映射器"></a>映射器</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;版本号&quot;</span> encoding=<span class="string">&quot;编码格式&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;命名空间&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 映射 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="映射规则"><a href="#映射规则" class="headerlink" title="映射规则"></a>映射规则</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;命名空间中用来代表这些映射规则的唯一标识符&quot;</span> <span class="attr">type</span>=<span class="string">&quot;被映射到的类名&quot;</span>&gt;</span>   <span class="comment">&lt;!-- 设定字段的映射规则 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor</span>&gt;</span>   <span class="comment">&lt;!-- 设定字段的构造方法 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">idArg</span> <span class="attr">column</span>=<span class="string">&quot;主键 ID&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;字段类型&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">arg</span> <span class="attr">column</span>=<span class="string">&quot;字段&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;字段类型&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">constructor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;字段&quot;</span> <span class="attr">property</span>=<span class="string">&quot;对应到类的字段&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="DML-操作"><a href="#DML-操作" class="headerlink" title="DML 操作"></a>DML 操作</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    insert into user(username, email) values(#&#123;username&#125;, #&#123;email&#125;)   <span class="comment">&lt;!-- 通过 #&#123;形参&#125; 来接收外部参数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    delete from user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    update user set username = #&#123;username&#125;, email = #&#123;email&#125; where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="查询操作"><a href="#查询操作" class="headerlink" title="查询操作"></a>查询操作</h2><h3 id="一对一"><a href="#一对一" class="headerlink" title="一对一"></a>一对一</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;期望类型的类的完全限定名或别名&quot;</span>&gt;</span></span><br><span class="line">    一对一查询语句</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a>一对多</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;映射规则&quot;</span>&gt;</span></span><br><span class="line">    一对多查询语句</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">type</span>=<span class="string">&quot;被映射到的类名&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;字段&quot;</span> <span class="attr">property</span>=<span class="string">&quot;对应到类的字段&quot;</span>/&gt;</span>   <span class="comment">&lt;!-- 通过 id 作为唯一标识符 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;字段&quot;</span> <span class="attr">property</span>=<span class="string">&quot;对应到类的字段&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;对应到类的字段&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;内部对应到类的字段&quot;</span>&gt;</span>   <span class="comment">&lt;!-- 通过 collection 将所有结果合并为一个集合 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;字段&quot;</span> <span class="attr">property</span>=<span class="string">&quot;对应到类的字段&quot;</span>/&gt;</span>   <span class="comment">&lt;!-- 通过 id 作为唯一标识符 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;字段&quot;</span> <span class="attr">property</span>=<span class="string">&quot;对应到类的字段&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;字段&quot;</span> <span class="attr">property</span>=<span class="string">&quot;对应到类的字段&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="多对一"><a href="#多对一" class="headerlink" title="多对一"></a>多对一</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;映射规则&quot;</span>&gt;</span></span><br><span class="line">    多对一查询语句</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">type</span>=<span class="string">&quot;被映射到的类名&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;字段&quot;</span> <span class="attr">property</span>=<span class="string">&quot;对应到类的字段&quot;</span>/&gt;</span>   <span class="comment">&lt;!-- 通过 id 作为唯一标识符 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;字段&quot;</span> <span class="attr">property</span>=<span class="string">&quot;对应到类的字段&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;对应到类的字段&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;字段类型&quot;</span>&gt;</span>   <span class="comment">&lt;!-- 通过使用 association 进行关联，形成多对一的关系 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;字段&quot;</span> <span class="attr">property</span>=<span class="string">&quot;对应到类的字段&quot;</span>/&gt;</span>   <span class="comment">&lt;!-- 通过 id 作为唯一标识符 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;字段&quot;</span> <span class="attr">property</span>=<span class="string">&quot;对应到类的字段&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="动态-SQL"><a href="#动态-SQL" class="headerlink" title="动态 SQL"></a>动态 SQL</h2><h3 id="查询操作-1"><a href="#查询操作-1" class="headerlink" title="查询操作"></a>查询操作</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    select * from user where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;id &gt; 3&quot;</span>&gt;</span></span><br><span class="line">        and age &gt; 18</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    select * from user where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;id == 1&quot;</span>&gt;</span>   <span class="comment">&lt;!-- 不允许使用 &lt; 或是 &gt; 这种模糊匹配的条件 --&gt;</span></span><br><span class="line">             and age <span class="symbol">&amp;lt;</span>= 18</span><br><span class="line">        <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;id == 2&quot;</span>&gt;</span></span><br><span class="line">            and age = 18</span><br><span class="line">        <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">            and age &gt; 18</span><br><span class="line">        <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Foreach-操作"><a href="#Foreach-操作" class="headerlink" title="Foreach 操作"></a>Foreach 操作</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    delete from user where id in</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">item</span>=<span class="string">&quot;item&quot;</span> <span class="attr">index</span>=<span class="string">&quot;index&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">        #&#123;item&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    insert into user (name, age) values</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">item</span>=<span class="string">&quot;user&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">        (#&#123;user.name&#125;, #&#123;user.age&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">item</span>=<span class="string">&quot;user&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;;&quot;</span>&gt;</span></span><br><span class="line">        update user set name = #&#123;user.name&#125;, age = #&#123;user.age&#125; where id = #&#123;user.id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>collection</code>：指定要迭代的集合</li><li><code>item</code>：当前迭代的元素</li><li><code>index</code>：当前迭代元素的索引位置</li><li><code>open</code>：在生成的<code>SQL</code>语句中，在开始生成列表元素之前添加的字符串</li><li><code>separator</code>：在迭代元素之间插入的字符串</li><li><code>close</code>：在生成的<code>SQL</code>语句中，在结束生成列表元素之后添加的字符串</li></ul><h2 id="二级缓存"><a href="#二级缓存" class="headerlink" title="二级缓存"></a>二级缓存</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cache</span> <span class="attr">eviction</span>=<span class="string">&quot;FIFO&quot;</span> <span class="attr">flushInterval</span>=<span class="string">&quot;60000&quot;</span> <span class="attr">size</span>=<span class="string">&quot;512&quot;</span> <span class="attr">readOnly</span>=<span class="string">&quot;true&quot;</span>/&gt;</span>   <span class="comment">&lt;!-- 开启二级缓存 --&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p><code>flushInterval</code>：用于控制缓存刷新时间，当到达指定时间时会自动清理所有缓存</p></li><li><p><code>readOnly</code>：是否设置为只读</p></li><li><p><code>size</code>：最大的缓存对象数量，当缓存达到上限时，会根据<code>eviction</code>配置的策略进行清理</p></li></ul><table><thead><tr><th align="center">eviction</th><th align="center">策略</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center"><code>LRU</code></td><td align="center">最近最少使用</td><td align="center">移除最长时间不被使用的对象</td></tr><tr><td align="center"><code>FIFO</code></td><td align="center">先进先出</td><td align="center">按对象进入缓存的顺序来移除它们</td></tr><tr><td align="center"><code>SOFT</code></td><td align="center">软引用</td><td align="center">基于垃圾回收器状态和软引用规则移除对象</td></tr><tr><td align="center"><code>WEAK</code></td><td align="center">弱引用</td><td align="center">更积极地基于垃圾收集器状态和弱引用规则移除对象</td></tr></tbody></table><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;&quot;</span> <span class="attr">useCache</span>=<span class="string">&quot;false&quot;</span> <span class="attr">flushCache</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    select 语句</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>useCache</code>：是否启用二级缓存</li><li><code>flushCache</code>：在操作执行完成后，是否直接清除所有缓存</li></ul><h1 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;select 语句&quot;)</span></span><br><span class="line"><span class="meta">@Insert(&quot;insert 语句&quot;)</span></span><br><span class="line"><span class="meta">@Delete(&quot;delete 语句&quot;)</span></span><br><span class="line"><span class="meta">@Update(&quot;update 语句&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Param(&quot;字段&quot;)</span> <span class="comment">// 指定参数名称</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@ResultMap(&quot;注解器&quot;)</span></span><br><span class="line"><span class="meta">@Results(&#123; // 自定义映射规则，等价于 resultMap</span></span><br><span class="line"><span class="meta">        @Result(id = true, column=&quot;字段&quot;, property=&quot;对应到类的字段&quot;),</span></span><br><span class="line"><span class="meta">        @Result(column=&quot;字段&quot;, property=&quot;对应到类的字段&quot;, many = @Many(select = &quot;Select 注解器&quot;)) // 一对多子查询，等价于 collection</span></span><br><span class="line"><span class="meta">        @Result(column=&quot;字段&quot;, property=&quot;对应到类的字段&quot;, one = @One(select = &quot;Select 注解器&quot;)), // 多对一子查询，等价于 assocation</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@ConstructorArgs(&#123; // 指定构造方法，等价于 constructor</span></span><br><span class="line"><span class="meta">        @Arg(column = &quot;字段&quot;, javaType = 字段类型),</span></span><br><span class="line"><span class="meta">        @Arg(column = &quot;字段&quot;, javaType = 字段类型)</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@CacheNamespace(size = 512, readWrite = false)</span> <span class="comment">// 控制缓存机制</span></span><br><span class="line"><span class="meta">@Options(flushCache = Options.FlushCachePolicy.TRUE, useCache = false)</span> <span class="comment">// 控制单个操作的缓存机制</span></span><br></pre></td></tr></table></figure><h1 id="Java-与-Mybatis"><a href="#Java-与-Mybatis" class="headerlink" title="Java 与 Mybatis"></a>Java 与 Mybatis</h1><h2 id="Mybatis-核心接口"><a href="#Mybatis-核心接口" class="headerlink" title="Mybatis 核心接口"></a>Mybatis 核心接口</h2><p>创建<code>SqlSessionFactory</code>对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">SqlSessionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;Mybatis 配置文件地址&quot;</span>))</span><br></pre></td></tr></table></figure><p>创建<code>SqlSession</code>对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> factory.openSession(事务是否自动提交)</span><br></pre></td></tr></table></figure><h2 id="执行-SQL-语句"><a href="#执行-SQL-语句" class="headerlink" title="执行 SQL 语句"></a>执行 SQL 语句</h2><h3 id="查询操作-2"><a href="#查询操作-2" class="headerlink" title="查询操作"></a>查询操作</h3><p>查询单个数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> sqlSession.selectOne(<span class="string">&quot;映射器 ID&quot;</span>, params)</span><br></pre></td></tr></table></figure><p>查询多个数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;类&gt; user = sqlSession.selectList(<span class="string">&quot;映射器 ID&quot;</span>)</span><br></pre></td></tr></table></figure><p>以键值对的形式获取映射的对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, Object&gt; user = sqlSession.selectOne(<span class="string">&quot;映射器 ID&quot;</span>, params)</span><br><span class="line">List&lt;Map&lt;String, Object&gt;&gt; users = sqlSession.selectList(<span class="string">&quot;映射器 ID&quot;</span>, params)</span><br></pre></td></tr></table></figure><h3 id="DML-操作-1"><a href="#DML-操作-1" class="headerlink" title="DML 操作"></a>DML 操作</h3><p>插入数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlSession.insert(<span class="string">&quot;映射器 ID&quot;</span>, params)</span><br></pre></td></tr></table></figure><p>更新数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlSession.update(<span class="string">&quot;映射器 ID&quot;</span>, params)</span><br></pre></td></tr></table></figure><p>删除数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlSession.delete(<span class="string">&quot;映射器 ID&quot;</span>, params)</span><br></pre></td></tr></table></figure><h3 id="事务操作"><a href="#事务操作" class="headerlink" title="事务操作"></a>事务操作</h3><p>提交事务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlSession.commit()</span><br></pre></td></tr></table></figure><p>回滚事务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlSession.rollback()</span><br></pre></td></tr></table></figure><h3 id="批处理操作"><a href="#批处理操作" class="headerlink" title="批处理操作"></a>批处理操作</h3><p>开启批处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">SqlSession</span> <span class="variable">session</span> <span class="operator">=</span> factory.openSession(ExecutorType.BATCH, <span class="literal">false</span>)</span><br></pre></td></tr></table></figure><p>提交批处理操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">session.flushStatements()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 注解 </tag>
            
            <tag> 事务 </tag>
            
            <tag> 交互 </tag>
            
            <tag> Mybatis </tag>
            
            <tag> 映射器 </tag>
            
            <tag> 配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaWeb 后端开发</title>
      <link href="/2024/06/01/06%20JavaWeb%20%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
      <url>/2024/06/01/06%20JavaWeb%20%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="JUL-日志系统"><a href="#JUL-日志系统" class="headerlink" title="JUL 日志系统"></a>JUL 日志系统</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">获取日志管理器：<span class="type">LogManager</span> <span class="variable">manager</span> <span class="operator">=</span> LogManager.getLogManager()</span><br><span class="line">读取自定义配置文件：manager.readConfiguration(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;文件地址&quot;</span>))</span><br><span class="line"></span><br><span class="line">获取日志打印器（控制台）：<span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> Logger.getLogger(当前类.class.getName())</span><br><span class="line">获取日志打印器（本地文件）：<span class="type">FileHandler</span> <span class="variable">fileHandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileHandler</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;文件地址&quot;</span>))</span><br><span class="line">获取其父类的日志打印器：logger.getParent().getClass()</span><br><span class="line"></span><br><span class="line">设置日志过滤器：logger.setFilter(断言型函数)</span><br><span class="line">修改日志级别：logger.setLevel(日志级别)</span><br><span class="line">不使用父类的日志处理器：logger.setUseParentHandlers(<span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line">新建日志处理器：<span class="type">ConsoleHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConsoleHandler</span>()</span><br><span class="line">设置日志的打印格式：handler.setFormatter(打印格式)</span><br><span class="line">使用自定义日志处理器：logger.addHandler(handler)</span><br></pre></td></tr></table></figure><h2 id="JUL-日志级别"><a href="#JUL-日志级别" class="headerlink" title="JUL 日志级别"></a>JUL 日志级别</h2><table><thead><tr><th align="center">JUL 日志级别</th><th align="center">含义</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center"><code>Level.SEVERE</code></td><td align="center">严重</td><td align="center">严重的错误</td></tr><tr><td align="center"><code>Level.WARNING</code></td><td align="center">警告</td><td align="center">警告的内容</td></tr><tr><td align="center"><code>Level.INFO</code></td><td align="center">信息</td><td align="center">普通的信息</td></tr><tr><td align="center"><code>Level.CONFIG</code></td><td align="center">配置</td><td align="center">普通的配置</td></tr><tr><td align="center"><code>Level.FINE</code></td><td align="center">详细</td><td align="center">详细的信息</td></tr><tr><td align="center"><code>Level.FINER</code></td><td align="center">较详细</td><td align="center">较详细的信息</td></tr><tr><td align="center"><code>Level.FINEST</code></td><td align="center">非常详细</td><td align="center">非常详细的信息</td></tr></tbody></table><h2 id="JUL-打印格式"><a href="#JUL-打印格式" class="headerlink" title="JUL 打印格式"></a>JUL 打印格式</h2><table><thead><tr><th align="center">JUL 打印格式</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center"><code>new SimpleFormatter()</code></td><td align="center">默认格式</td></tr><tr><td align="center"><code>new XMLFormatter()</code></td><td align="center">XML 格式</td></tr><tr><td align="center"><code>new Formatter()</code></td><td align="center">自定义格式</td></tr></tbody></table><h1 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h1><h2 id="Properties-配置文件"><a href="#Properties-配置文件" class="headerlink" title="Properties 配置文件"></a>Properties 配置文件</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">书写格式：配置项 = 配置值</span><br><span class="line">指定默认日志级别：java.util.logging.ConsoleHandler.level = 日志级别</span><br><span class="line">指定默认日志格式：java.util.logging.ConsoleHandler.formatter = 日志格式</span><br><span class="line">指定默认的字符集：java.util.logging.ConsoleHandler.encoding = 字符集</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">获取 Properties 对象：<span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>()</span><br><span class="line">读取 Properties 文件配置：properties.load(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;文件地址&quot;</span>))</span><br><span class="line">添加配置：properties.put(配置项, 配置值)</span><br><span class="line">删除配置：properties.remove(配置项, 配置值)</span><br><span class="line">保存 Properties 对象为文件：properties.store(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;文件地址&quot;</span>))</span><br></pre></td></tr></table></figure><h1 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h1><h2 id="Maven-配置文件"><a href="#Maven-配置文件" class="headerlink" title="Maven 配置文件"></a>Maven 配置文件</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;版本号&quot;</span> encoding=<span class="string">&quot;解码格式&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>当前模型的版本<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 父类项目的位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>组的名称<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>项目在当前组中的唯一名称<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>项目版本<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>组的名称<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>项目在当前组中的唯一名称<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>项目版本<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 一些变量和选项的配置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 导入依赖 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>组的名称<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>项目在当前组中的唯一名称<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>项目版本<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 移除指定依赖 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>组的名称<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>项目在当前组中的唯一名称<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>组的名称<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>项目在当前组中的唯一名称<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>项目版本<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 管理依赖 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>组的名称<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>项目在当前组中的唯一名称<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>项目版本<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Maven-依赖字段"><a href="#Maven-依赖字段" class="headerlink" title="Maven 依赖字段"></a>Maven 依赖字段</h2><table><thead><tr><th align="center">Maven 依赖字段</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center"><code>groupId</code></td><td align="center">组的名称</td></tr><tr><td align="center"><code>artifactId</code></td><td align="center">项目在当前组中的唯一名称</td></tr><tr><td align="center"><code>version</code></td><td align="center">项目版本</td></tr><tr><td align="center"><code>type</code></td><td align="center">依赖的类型</td></tr><tr><td align="center"><code>scope</code></td><td align="center">依赖的作用域</td></tr><tr><td align="center"><code>optional</code></td><td align="center">标记依赖是否可选</td></tr><tr><td align="center"><code>exclusions</code></td><td align="center">用来排除传递性依赖</td></tr></tbody></table><h2 id="Maven-依赖的作用域"><a href="#Maven-依赖的作用域" class="headerlink" title="Maven 依赖的作用域"></a>Maven 依赖的作用域</h2><table><thead><tr><th align="center">Maven 依赖的作用域</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center"><code>compile</code></td><td align="center">在编译、运行、测试时均有效【默认选项】</td></tr><tr><td align="center"><code>provided</code></td><td align="center">在编译、测试时有效，但是在运行时无效</td></tr><tr><td align="center"><code>runtime</code></td><td align="center">在运行、测试时有效，但是在编译代码时无效</td></tr><tr><td align="center"><code>test</code></td><td align="center">只在测试时有效</td></tr></tbody></table><h2 id="Maven-常用命令"><a href="#Maven-常用命令" class="headerlink" title="Maven 常用命令"></a>Maven 常用命令</h2><table><thead><tr><th align="center">Maven 常用命令</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center"><code>clean</code></td><td align="center">清理整个目标文件夹</td></tr><tr><td align="center"><code>validate</code></td><td align="center">验证项目的可用性</td></tr><tr><td align="center"><code>compile</code></td><td align="center">将项目编译为 .class 文件</td></tr><tr><td align="center"><code>install</code></td><td align="center">将当前项目安装到本地仓库</td></tr><tr><td align="center"><code>verify</code></td><td align="center">按顺序执行每个默认生命周期阶段</td></tr><tr><td align="center"><code>test</code></td><td align="center">一键测试所有位于 test 目录下的测试案例</td></tr><tr><td align="center"><code>package</code></td><td align="center">直接对项目的代码进行打包，生成 jar 文件</td></tr></tbody></table><h1 id="JUnit-测试框架"><a href="#JUnit-测试框架" class="headerlink" title="JUnit 测试框架"></a>JUnit 测试框架</h1><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.8.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.8.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.8.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span>：将一个方法标记为测试案例</span><br><span class="line"><span class="meta">@RepeatedTest(n)</span>：将一个方法标记为测试案例，执行多次测试</span><br><span class="line"><span class="meta">@DisplayName(&quot;测试名称&quot;)</span>：自定义测试名称</span><br><span class="line"></span><br><span class="line"><span class="meta">@BeforeAll</span>：添加测试用例开始之前的前置操作，对于全部的测试用例，只会执行一次</span><br><span class="line"><span class="meta">@BeforeEach</span>：添加测试用例开始之前的前置操作，对于每个测试用例，都会执行一次</span><br><span class="line"><span class="meta">@AfterAll</span>：添加测试用例开始之后的收尾操作，对于全部的测试用例，只会执行一次</span><br><span class="line"><span class="meta">@AfterEach</span>：添加测试用例开始之后的收尾操作，对于每个测试用例，都会执行一次</span><br></pre></td></tr></table></figure><p><strong>断言语句</strong></p><ul><li><code>Assert.assertEquals(期盼值, 实际值)</code></li><li><code>Assert.assertArrayEquals(期盼值, 实际值)</code></li></ul><h1 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h1><h2 id="获得数据库连接"><a href="#获得数据库连接" class="headerlink" title="获得数据库连接"></a>获得数据库连接</h2><p>通过<code>DriverManager </code>来获得数据库连接</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(连接URL，用户名，密码)</span><br></pre></td></tr></table></figure><h2 id="创建用于执行-SQL-语句的对象"><a href="#创建用于执行-SQL-语句的对象" class="headerlink" title="创建用于执行 SQL 语句的对象"></a>创建用于执行 SQL 语句的对象</h2><p>创建一个用于执行<code>SQL</code>的<code>Statement</code>对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.createStatement()</span><br></pre></td></tr></table></figure><p>预编译一个<code>SQL</code>语句，通过直接将内容进行替换的方式来填写数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">PreparedStatement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.prepareStatement(SQL语句格式)</span><br></pre></td></tr></table></figure><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">connection.setAutoCommit(<span class="literal">false</span>)：关闭事务自动提交</span><br><span class="line">connection.commit()：提交事务</span><br><span class="line"><span class="type">Savepoint</span> <span class="variable">savepoint</span> <span class="operator">=</span> connection.setSavepoint()：创建回滚点</span><br><span class="line">connection.rollback(回滚点)：回滚至指定回滚点</span><br></pre></td></tr></table></figure><h2 id="执行-SQL-语句"><a href="#执行-SQL-语句" class="headerlink" title="执行 SQL 语句"></a>执行 SQL 语句</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> statement.excute(SQL语句)：执行任意的 SQL 语句</span><br><span class="line"></span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">set</span> <span class="operator">=</span> statement.executeQuery(数据库查询语句)：执行 SQL 语句，并得到结果集</span><br><span class="line">set.next()：结果集迭代指针下移</span><br><span class="line">set.getXXX(列号)：获取结果集数据</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> statement.executeUpdate(数据库操纵语句 / 数据库定义语句)：执行 SQL 语句，并得到生效的行数</span><br><span class="line">statement.addBatch(数据库操纵语句 / 数据库定义语句)：将该 SQL 语句缓存起来先</span><br><span class="line">statement.executeBatch()：将之前缓存的全部 SQL 语句一起执行</span><br></pre></td></tr></table></figure><h1 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h1><p><strong><code>C/S</code>数据交互的中间接口</strong></p><h2 id="创建一个类来实现它"><a href="#创建一个类来实现它" class="headerlink" title="创建一个类来实现它"></a>创建一个类来实现它</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;路径&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestServlet</span> <span class="keyword">implements</span> <span class="title class_">Servlet</span> &#123;</span><br><span class="line">    ...实现接口方法</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Servlet-接口的方法"><a href="#Servlet-接口的方法" class="headerlink" title="Servlet 接口的方法"></a>Servlet 接口的方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig servletConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;初始化的方法&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;响应交互的方法【重点】&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;回收处理前的方法&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ServletRequest"><a href="#ServletRequest" class="headerlink" title="ServletRequest"></a>ServletRequest</h2><p><strong>包含了 HTTP 请求报文中的所有内容</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> (HttpServletRequest) servletRequest <span class="comment">// 向下转型</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">获取协议版本：request.getProtocol()</span><br><span class="line">获取访问者的IP地址：request.getRemoteAddr()</span><br><span class="line">获取请求方法：request.getMethod()</span><br><span class="line">获取头部信息：</span><br><span class="line">        Enumeration&lt;String&gt; enumeration = request.getHeaderNames()</span><br><span class="line">        <span class="keyword">while</span> (enumeration.hasMoreElements())&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> enumeration.nextElement()</span><br><span class="line">            System.out.println(name + <span class="string">&quot;: &quot;</span> + request.getHeader(name))</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h2 id="ServletResponse"><a href="#ServletResponse" class="headerlink" title="ServletResponse"></a>ServletResponse</h2><p><strong>包含了 HTTP 响应报文中的所有内容</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">HttpServletResponse</span> <span class="variable">response</span> <span class="operator">=</span> (HttpServletResponse) servletResponse <span class="comment">// 向下转型</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">设置首部字节：response.setHeader(<span class="string">&quot;Content-type&quot;</span>, <span class="string">&quot;text/html;charset=UTF-8&quot;</span>)</span><br><span class="line">向浏览器输入内容：response.getWriter().write(<span class="string">&quot;输入内容&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="HttpServlet"><a href="#HttpServlet" class="headerlink" title="HttpServlet"></a>HttpServlet</h1><p><strong>它根据 HTTP 协议的规则，完善了<code>service</code>方法</strong></p><h2 id="创建一个-HttpServlet-的子类"><a href="#创建一个-HttpServlet-的子类" class="headerlink" title="创建一个 HttpServlet 的子类"></a>创建一个 HttpServlet 的子类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;路径&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="处理请求的方法：doGet"><a href="#处理请求的方法：doGet" class="headerlink" title="处理请求的方法：doGet"></a>处理请求的方法：doGet</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    重定向：resp.sendRedirect(<span class="string">&quot;路径&quot;</span>)</span><br><span class="line">    设置转发的参数：req.setAttribute(<span class="string">&quot;test&quot;</span>, <span class="string">&quot;我是请求转发前的数据&quot;</span>)</span><br><span class="line">    请求转发给另一个 Servlet 对象：req.getRequestDispatcher(<span class="string">&quot;路径&quot;</span>).forward(req, resp)</span><br><span class="line">    接收转发的参数：req.getAttribute(<span class="string">&quot;test&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="处理响应的方法：doPost"><a href="#处理响应的方法：doPost" class="headerlink" title="处理响应的方法：doPost"></a>处理响应的方法：doPost</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    获取响应的表单数据：</span><br><span class="line">    req.getParameterMap().forEach((k, v) -&gt; &#123;</span><br><span class="line">        System.out.println(k + <span class="string">&quot;: &quot;</span> + Arrays.toString(v))</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="文件的上传与下载"><a href="#文件的上传与下载" class="headerlink" title="文件的上传与下载"></a>文件的上传与下载</h1><h2 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h2><ol><li><strong>前端中添加用于上传文件的表单</strong></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">action</span>=<span class="string">&quot;file&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;test-file&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span>&gt;</span>上传文件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li><strong>编写一个<code>Servlet</code>用于处理文件的上传</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MultipartConfig</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;路径&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="keyword">try</span>(<span class="type">FileOutputStream</span> <span class="variable">stream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;文件地址&quot;</span>)) &#123;</span><br><span class="line">            <span class="type">Part</span> <span class="variable">part</span> <span class="operator">=</span> req.getPart(<span class="string">&quot;test-file&quot;</span>)</span><br><span class="line">            拷贝输入流到输出流中：IOUtils.copy(part.getInputStream(), stream)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="下载文件"><a href="#下载文件" class="headerlink" title="下载文件"></a>下载文件</h2><ol><li><strong>前端中添加用于下载文件的链接</strong></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;file&quot;</span> <span class="attr">download</span>=<span class="string">&quot;icon.png&quot;</span>&gt;</span>点我下载高清资源<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li><strong>编写一个<code>Servlet</code>用于处理文件的下载</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;路径&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        设置下载文件的类型：resp.setContentType(<span class="string">&quot;image/png&quot;</span>)</span><br><span class="line">        浏览器的文件输出流（指向本地文件）：<span class="type">OutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> resp.getOutputStream()</span><br><span class="line">        本地的文件输入流（指向本地文件）：<span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;icon.png&quot;</span>)</span><br><span class="line">        拷贝输出流到输入流中：IOUtils.copy(inputStream, outputStream)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="使用-XHR-请求数据"><a href="#使用-XHR-请求数据" class="headerlink" title="使用 XHR 请求数据"></a>使用 XHR 请求数据</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">updateTime</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line">    xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span> &amp;&amp; xhr.<span class="property">status</span> === <span class="number">200</span>) &#123;</span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;time&quot;</span>).<span class="property">innerText</span> = xhr.<span class="property">responseText</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    开启请求：xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;time&#x27;</span>, <span class="literal">true</span>)</span><br><span class="line">    发送请求：xhr.<span class="title function_">send</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该<code>GET</code>请求，会使得<code>Servlet</code>执行一次<code>doGet</code>方法</p><h1 id="ServletContext"><a href="#ServletContext" class="headerlink" title="ServletContext"></a>ServletContext</h1><p><strong>作用于整个 Web 程序的单例对象</strong></p><p>获取该对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ServletContext</span> <span class="variable">context</span> <span class="operator">=</span> getServletContext()</span><br></pre></td></tr></table></figure><p>设置存储的键值对</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">context.setAttribute(<span class="string">&quot;K&quot;</span>, <span class="string">&quot;V&quot;</span>)</span><br></pre></td></tr></table></figure><p>获取初始化参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">context.getInitParameter(<span class="string">&quot;K&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="Servlet-初始化参数"><a href="#Servlet-初始化参数" class="headerlink" title="Servlet 初始化参数"></a>Servlet 初始化参数</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(value = &quot;/login&quot;, initParams = &#123;</span></span><br><span class="line"><span class="meta">    @WebInitParam(name = &quot;K&quot;, value = &quot;V&quot;)</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br></pre></td></tr></table></figure><h2 id="全局初始化参数"><a href="#全局初始化参数" class="headerlink" title="全局初始化参数"></a>全局初始化参数</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>K<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>V<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h1><p><strong>Web 程序用来保存数据的容器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">创建一个 Cookie 对象：<span class="type">Cookie</span> <span class="variable">cookie</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;test&quot;</span>, <span class="string">&quot;yyds&quot;</span>)</span><br><span class="line">设置 Cookie 对象的生效时长：cookie.setMaxAge(<span class="number">20</span>)</span><br><span class="line">添加进响应报文中：resp.addCookie(cookie)</span><br><span class="line">重定向后，该数据依然存在：resp.sendRedirect(<span class="string">&quot;time&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="Cookie-字段"><a href="#Cookie-字段" class="headerlink" title="Cookie 字段"></a>Cookie 字段</h2><table><thead><tr><th align="center">Cookie 字段</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center"><code>name</code></td><td align="center">名称</td></tr><tr><td align="center"><code>value</code></td><td align="center">值</td></tr><tr><td align="center"><code>maxAge</code></td><td align="center">失效的时间，单位：秒</td></tr></tbody></table><p><strong><code>maxAge</code>说明：</strong></p><ul><li><code>&gt; 0</code>，在<code>maxAge</code>秒后失效</li><li><code>&lt; 0</code>，关闭浏览器即失效</li><li><code>= 0</code>，删除该<code>Cookie</code></li><li><code>= -1</code>，默认选项</li></ul><h2 id="遍历-Cookies-的键值对"><a href="#遍历-Cookies-的键值对" class="headerlink" title="遍历 Cookies 的键值对"></a>遍历 Cookies 的键值对</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (Cookie cookie : req.getCookies()) &#123;</span><br><span class="line">    System.out.println(cookie.getName() + <span class="string">&quot;: &quot;</span> + cookie.getValue())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h1><p><strong>管理当前 Web 程序会话的对象</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">获取 HttpSession 对象：<span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> req.getSession()</span><br><span class="line">设定值：session.setAttribute(<span class="string">&quot;user&quot;</span>, user)</span><br><span class="line">立即销毁该 Session 对象：session.invalidate()</span><br></pre></td></tr></table></figure><p>设定<code>Session</code>对象的过期时间（默认 30 分钟）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>30<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h1><p><strong>Web 服务器跟 Web 资源之间的过滤器</strong></p><p>添加一个过滤器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebFilter(&quot;路径&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        放行给下一级的过滤器：filterChain.doFilter(servletRequest, servletResponse)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="HttpFilter"><a href="#HttpFilter" class="headerlink" title="HttpFilter"></a>HttpFilter</h1><p><strong>专用于 HTTP 的 Web 服务器跟 Web 资源之间的过滤器</strong></p><p>添加一个过滤器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebFilter(&quot;路径&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestFilter</span> <span class="keyword">extends</span> <span class="title class_">HttpFilter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        放行给下一级的过滤器：chain.doFilter(servletRequest, servletResponse)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Thymeleaf-模板引擎"><a href="#Thymeleaf-模板引擎" class="headerlink" title="Thymeleaf 模板引擎"></a>Thymeleaf 模板引擎</h1><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.14.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-spring5<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.14.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="前端配置"><a href="#前端配置" class="headerlink" title="前端配置"></a>前端配置</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">统一格式：th:属性名称=&quot;$&#123;参数名&#125;&quot;</span><br><span class="line">普通文本：<span class="tag">&lt;<span class="name">div</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;title&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">HTML语言文本：<span class="tag">&lt;<span class="name">div</span> <span class="attr">th:utext</span>=<span class="string">&quot;$&#123;title.toLowerCase()&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="后端配置"><a href="#后端配置" class="headerlink" title="后端配置"></a>后端配置</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">TemplateEngine engine <span class="comment">// 需要用到这个对象</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">    engine = <span class="keyword">new</span> <span class="title class_">TemplateEngine</span>()</span><br><span class="line">    engine.setTemplateResolver(<span class="keyword">new</span> <span class="title class_">ClassLoaderTemplateResolver</span>())</span><br><span class="line">    <span class="comment">// 设定模板解析器决定了从哪里获取模板文件，这里直接使用 ClassLoaderTemplateResolver 表示加载内部资源文件</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    <span class="type">Context</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Context</span>()</span><br><span class="line">    context.setVariable(<span class="string">&quot;title&quot;</span>, <span class="string">&quot;&lt;h1&gt;我是标题&lt;/h1&gt;&quot;</span>) <span class="comment">// 直接替换前端的参数</span></span><br><span class="line">    engine.process(<span class="string">&quot;test.html&quot;</span>, context, resp.getWriter()) <span class="comment">// 配置</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Thymeleaf-流程控制语法"><a href="#Thymeleaf-流程控制语法" class="headerlink" title="Thymeleaf 流程控制语法"></a>Thymeleaf 流程控制语法</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;eval&#125;&quot;</span>&gt;</span>我是判断条件标签<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:unless</span>=<span class="string">&quot;$&#123;eval&#125;&quot;</span>&gt;</span>我是判断条件标签<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:switch</span>=<span class="string">&quot;$&#123;eval&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:case</span>=<span class="string">&quot;1&quot;</span>&gt;</span>我是1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:case</span>=<span class="string">&quot;2&quot;</span>&gt;</span>我是2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:case</span>=<span class="string">&quot;3&quot;</span>&gt;</span>我是3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Thymeleaf-遍历语法"><a href="#Thymeleaf-遍历语法" class="headerlink" title="Thymeleaf 遍历语法"></a>Thymeleaf 遍历语法</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">th:each</span>=<span class="string">&quot;title, iterStat : $&#123;list&#125;&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;iterStat.index&#125;+&#x27;.《&#x27;+$&#123;title&#125;+&#x27;》&#x27;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="对前端内容进行替换"><a href="#对前端内容进行替换" class="headerlink" title="对前端内容进行替换"></a>对前端内容进行替换</h2><ol><li>单独编写一个<code>head.html</code>来存放重复部分</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;head&quot;</span> <span class="attr">th:fragment</span>=<span class="string">&quot;head-title&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是标题内容，每个页面都有<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>直接将页面中的内容快速替换</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:include</span>=<span class="string">&quot;head.html::head-title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;body&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">th:each</span>=<span class="string">&quot;title, iterStat : $&#123;list&#125;&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;iterStat.index&#125;+&#x27;.《&#x27;+$&#123;title&#125;+&#x27;》&#x27;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="替换方式"><a href="#替换方式" class="headerlink" title="替换方式"></a>替换方式</h2><table><thead><tr><th align="center">替换方式</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center"><code>th:insert</code></td><td align="center">只插入指定的片段作为标签的主体</td></tr><tr><td align="center"><code>th:replace</code></td><td align="center">将标签直接替换为指定的片段</td></tr><tr><td align="center"><code>th:include</code></td><td align="center">只插入此片段的内容</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Web </tag>
            
            <tag> JUL </tag>
            
            <tag> Properties </tag>
            
            <tag> Maven </tag>
            
            <tag> JUnit </tag>
            
            <tag> JDBC </tag>
            
            <tag> Servlet </tag>
            
            <tag> HttpServlet </tag>
            
            <tag> XHR </tag>
            
            <tag> ServletContext </tag>
            
            <tag> Cookie </tag>
            
            <tag> Session </tag>
            
            <tag> Filter </tag>
            
            <tag> HttpFilter </tag>
            
            <tag> Thymeleaf </tag>
            
            <tag> 文件传输 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaGUI 可视化开发</title>
      <link href="/2024/04/20/05%20JavaGUI%20%E5%8F%AF%E8%A7%86%E5%8C%96%E5%BC%80%E5%8F%91/"/>
      <url>/2024/04/20/05%20JavaGUI%20%E5%8F%AF%E8%A7%86%E5%8C%96%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="外观"><a href="#外观" class="headerlink" title="外观"></a>外观</h1><h2 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h2><h3 id="颜色的创建"><a href="#颜色的创建" class="headerlink" title="颜色的创建"></a>颜色的创建</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">通过 RGB 创建一个颜色对象：<span class="type">Color</span> <span class="variable">color</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Color</span>(R, G, B)</span><br><span class="line">通过 RGB 创建一个颜色对象：<span class="type">Color</span> <span class="variable">color</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Color</span>(R, G, B, 透明度)</span><br><span class="line">通过颜色样式创建一个颜色对象：<span class="type">Color</span> <span class="variable">color</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Color</span>(颜色样式)</span><br></pre></td></tr></table></figure><ul><li><strong>透明度：</strong>介于<code>[0, 255]</code>之间，表示<code>[完全透明，完全不透明]</code></li></ul><h3 id="颜色的样式"><a href="#颜色的样式" class="headerlink" title="颜色的样式"></a>颜色的样式</h3><table><thead><tr><th align="center">字段名称</th><th align="center">颜色样式</th></tr></thead><tbody><tr><td align="center"><code>BLACK</code></td><td align="center">黑</td></tr><tr><td align="center"><code>WHITE</code></td><td align="center">白</td></tr><tr><td align="center"><code>RED</code></td><td align="center">红</td></tr><tr><td align="center"><code>GREEN</code></td><td align="center">绿</td></tr><tr><td align="center"><code>BLUE</code></td><td align="center">蓝</td></tr><tr><td align="center"><code>YELLOW</code></td><td align="center">黄</td></tr><tr><td align="center"><code>ORANGE</code></td><td align="center">橙</td></tr><tr><td align="center"><code>PINK</code></td><td align="center">粉红</td></tr><tr><td align="center"><code>CYAN</code></td><td align="center">青</td></tr><tr><td align="center"><code>MAGENTA</code></td><td align="center">品红</td></tr><tr><td align="center"><code>GRAY</code></td><td align="center">灰</td></tr><tr><td align="center"><code>LIGHT_GRAY</code></td><td align="center">浅灰</td></tr><tr><td align="center"><code>DARK_GRAY</code></td><td align="center">深灰</td></tr></tbody></table><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><h3 id="字体的创建"><a href="#字体的创建" class="headerlink" title="字体的创建"></a>字体的创建</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">创建一个字体：<span class="type">Font</span> <span class="variable">font</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Font</span>(<span class="string">&quot;字体名称&quot;</span>, 字体样式, 字体大小);</span><br></pre></td></tr></table></figure><h3 id="字体的名称"><a href="#字体的名称" class="headerlink" title="字体的名称"></a>字体的名称</h3><p>获取当前设备支持的字体名称：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Font[] allFonts = GraphicsEnvironment.getLocalGraphicsEnvironment().getAllFonts();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; allFonts.length; i++) &#123;</span><br><span class="line">    System.out.println(allFonts[i].getName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字体的样式"><a href="#字体的样式" class="headerlink" title="字体的样式"></a>字体的样式</h3><table><thead><tr><th align="center">字段</th><th align="center">字体样式</th></tr></thead><tbody><tr><td align="center"><code>PLAIN</code></td><td align="center">常规样式</td></tr><tr><td align="center"><code>BOLD</code></td><td align="center">加粗样式</td></tr><tr><td align="center"><code>ITALIC</code></td><td align="center">斜体样式</td></tr></tbody></table><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><h3 id="图片的加载"><a href="#图片的加载" class="headerlink" title="图片的加载"></a>图片的加载</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">加载一个图片：<span class="type">Image</span> <span class="variable">image</span> <span class="operator">=</span> ImageIO.read(文件)</span><br><span class="line">加载一个图片：<span class="type">Image</span> <span class="variable">image</span> <span class="operator">=</span> ImageIO.read(文件输入流)</span><br></pre></td></tr></table></figure><h3 id="图片的保存"><a href="#图片的保存" class="headerlink" title="图片的保存"></a>图片的保存</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">保存一个图片：ImageIO.write(图片, <span class="string">&quot;格式&quot;</span>, 文件)</span><br><span class="line">保存一个图片：ImageIO.write(图片, <span class="string">&quot;格式&quot;</span>, 文件输出流)</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">格式</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>jpeg</code> &#x2F; <code>jpg</code></td><td align="center"><code>JPEG</code> 格式的图像文件</td></tr><tr><td align="center"><code>png</code></td><td align="center"><code>PNG</code> 格式的图像文件</td></tr><tr><td align="center"><code>gif</code></td><td align="center"><code>GIF</code> 格式的图像文件</td></tr><tr><td align="center"><code>bmp</code></td><td align="center"><code>BMP</code> 格式的图像文件</td></tr><tr><td align="center"><code>wbmp</code></td><td align="center"><code>WBMP</code> 格式的黑白图像文件</td></tr></tbody></table><h2 id="图片缓存"><a href="#图片缓存" class="headerlink" title="图片缓存"></a>图片缓存</h2><h3 id="图片缓存的创建"><a href="#图片缓存的创建" class="headerlink" title="图片缓存的创建"></a>图片缓存的创建</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">创建一个图片缓存：<span class="type">BufferedImage</span> <span class="variable">image</span> <span class="operator">=</span> ImageIO.read(文件)</span><br><span class="line">创建一个图片缓存：<span class="type">BufferedImage</span> <span class="variable">image</span> <span class="operator">=</span> ImageIO.read(文件输入流)</span><br></pre></td></tr></table></figure><h3 id="图片缓存的方法"><a href="#图片缓存的方法" class="headerlink" title="图片缓存的方法"></a>图片缓存的方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">获取图片类型：image.getType()</span><br><span class="line">获取图片宽度：image.getWidth()</span><br><span class="line">获取图片高度：image.getHidth()</span><br><span class="line">获取该点的 RGB：image.getRGB(x, y)</span><br><span class="line">设置该点的 RGB：image.setRGB(x, y, rgb)</span><br><span class="line">获取 <span class="number">2D</span> 画笔：image.createGraphics()</span><br><span class="line">图片缓存转图片：image.getScaledInstance(宽, 高, Image.SCALE_SMOOTH)</span><br></pre></td></tr></table></figure><h2 id="画笔"><a href="#画笔" class="headerlink" title="画笔"></a>画笔</h2><h3 id="画笔的创建"><a href="#画笔的创建" class="headerlink" title="画笔的创建"></a>画笔的创建</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">创建一个画笔：<span class="type">Graphics</span> <span class="variable">g</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Graphics</span>() &#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="画笔的方法"><a href="#画笔的方法" class="headerlink" title="画笔的方法"></a>画笔的方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">设置画笔：g.setPaint(画笔)</span><br><span class="line">设置画笔颜色：g.setColor(颜色)</span><br><span class="line">设置普通绘画模式：g.setPaintMode()</span><br><span class="line">设置交替颜色模式：g.setXORMode(颜色)</span><br><span class="line">设置画笔字体：g.setFont(字体)</span><br><span class="line">设置裁剪区域：g.setClip(x, y, 宽, 高)</span><br><span class="line">移动画笔原点到指定坐标，默认是(<span class="number">0</span>, <span class="number">0</span>)：g.translate(x, y)</span><br><span class="line">拷贝指定区域的内容到另一个位置：g.copyArea(x, y, 宽, 高, dx, dy)</span><br><span class="line"></span><br><span class="line">绘制直线：g.drawLine(x1, y1, x2, y2)</span><br><span class="line">绘制折线：g.drawPolyline(x[], y[], n)</span><br><span class="line">填充矩形区域：g.fillRect(x, y, 宽, 高)</span><br><span class="line">绘制矩形边框：g.drawRect(x, y, 宽, 高)</span><br><span class="line">填充圆角矩形区域：g.fillRoundRect(x, y, 宽, 高, 圆角宽, 圆角高)</span><br><span class="line">绘制圆角矩形边框：g.drawRoundRect(x, y, 宽, 高, 圆角宽, 圆角高)</span><br><span class="line">填充 <span class="number">3D</span> 矩形区域：g.fill3DRect(x, y, 宽, 高, <span class="literal">true</span>)</span><br><span class="line">绘制 <span class="number">3D</span> 矩形边框：g.draw3DRect(x, y, 宽, 高, <span class="literal">true</span>)</span><br><span class="line">填充椭圆形区域：g.fillOval(x, y, 宽, 高)</span><br><span class="line">绘制椭圆形边框：g.drawOval(x, y, 宽, 高)</span><br><span class="line">填充扇形区域：g.fillArc(x, y, 宽, 高, 始角, 弧角)</span><br><span class="line">绘制弧线边框：g.drawArc(x, y, 宽, 高, 始角, 弧角)</span><br><span class="line">填充多边形区域：g.fillPolygon(x[], y[], n)</span><br><span class="line">绘制多边形边框：g.drawPolygon(x[], y[], n)</span><br><span class="line"></span><br><span class="line">绘制文本：g.drawString(字符串, x, y)</span><br><span class="line">绘制图片：g.drawImage(图片, x, y, <span class="literal">null</span>)</span><br><span class="line">绘制按自定义大小缩放后的图片：g.drawImage(图片, x, y, 宽, 高, <span class="literal">null</span>)</span><br><span class="line">绘制图片时如果是透明部分则采用背景颜色填充：g.drawImage(图片, x, y, 颜色, <span class="literal">null</span>)</span><br><span class="line">绘制按自定义大小缩放后带背景颜色的图片：g.drawImage(图片, x, y, 宽, 高, 颜色, <span class="literal">null</span>)</span><br></pre></td></tr></table></figure><h2 id="渐变画笔"><a href="#渐变画笔" class="headerlink" title="渐变画笔"></a>渐变画笔</h2><h3 id="渐变画笔的创建"><a href="#渐变画笔的创建" class="headerlink" title="渐变画笔的创建"></a>渐变画笔的创建</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">创建一个渐变画笔[循环渐变]：<span class="type">GradientPaint</span> <span class="variable">paint</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GradientPaint</span>(x1, y1, 颜色, x2, y2, 颜色, <span class="literal">true</span>)</span><br><span class="line">创建一个渐变画笔[线性渐变]：<span class="type">GradientPaint</span> <span class="variable">paint</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GradientPaint</span>(x1, y1, 颜色, x2, y2, 颜色)</span><br></pre></td></tr></table></figure><h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><h3 id="设置-UI-主题"><a href="#设置-UI-主题" class="headerlink" title="设置 UI 主题"></a>设置 UI 主题</h3><p>全局生效</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">设置 UI 主题：UIManager.setLookAndFeel(UI 主题)</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">类</th><th align="center">UI 主题</th></tr></thead><tbody><tr><td align="center"><code>MetalLookAndFeel</code></td><td align="center">官方默认皮肤</td></tr><tr><td align="center"><code>MotifLookAndFeel</code></td><td align="center">官方皮肤</td></tr><tr><td align="center"><code>NimbusLookAndFeel</code></td><td align="center">官方皮肤</td></tr><tr><td align="center"><code>WindowsLookAndFeel</code></td><td align="center"><code>Windows</code>操作系统限定皮肤，其他平台无法使用</td></tr><tr><td align="center"><code>AquaLookAndFeel</code></td><td align="center"><code>MacOS</code>操作系统限定皮肤，其他平台无法使用</td></tr></tbody></table><h1 id="窗口"><a href="#窗口" class="headerlink" title="窗口"></a>窗口</h1><h2 id="窗口的创建"><a href="#窗口的创建" class="headerlink" title="窗口的创建"></a>窗口的创建</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">创建一个窗口对象：<span class="type">JFrame</span> <span class="variable">frame</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JFrame</span>()</span><br></pre></td></tr></table></figure><h2 id="窗口的方法"><a href="#窗口的方法" class="headerlink" title="窗口的方法"></a>窗口的方法</h2><h3 id="Get"><a href="#Get" class="headerlink" title="Get"></a>Get</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">获取窗口宽度：frame.getWidth()</span><br><span class="line">获取窗口高度：frame.getHeight()</span><br><span class="line">获取窗口大小：frame.getSize()</span><br><span class="line">获取窗口初始位置：frame.getLocation()</span><br><span class="line">获取窗口初始位置和大小：frame.getBounds()</span><br><span class="line"></span><br><span class="line">获取窗口标题：frame.getTitle()</span><br><span class="line">获取窗口内部鼠标：frame.getCursor()</span><br><span class="line">获取窗口背景颜色：frame.getBackground()</span><br><span class="line">获取窗口布局：frame.getLayout()</span><br></pre></td></tr></table></figure><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">设置窗口大小：frame.setSize(宽, 高)</span><br><span class="line">设置窗口初始位置：frame.setLocation(x, y)</span><br><span class="line">设置窗口初始位置和大小：frame.setBounds(x, y, 宽, 高)</span><br><span class="line"></span><br><span class="line">设置窗口标题：frame.setTitle(<span class="string">&quot;我是标题&quot;</span>)</span><br><span class="line">设置窗口图标：frame.setIconImage(图片)</span><br><span class="line">设置窗口内部鼠标：frame.setCursor(鼠标对象)</span><br><span class="line">设置窗口背景颜色：frame.setBackground(颜色)</span><br><span class="line">设置窗口布局：frame.setLayout(布局)</span><br><span class="line">设置窗口形状：frame.setShape(形状)</span><br><span class="line">设置窗口关闭[退出]：frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE)</span><br><span class="line">设置窗口关闭[什么都不做]：frame.setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE)</span><br><span class="line"></span><br><span class="line">设置窗口大小是否固定：frame.setResizable(<span class="literal">false</span>)</span><br><span class="line">设置窗口是否始终展示在最前面：frame.setAlwaysOnTop(<span class="literal">true</span>)</span><br><span class="line">设置窗口为非修饰状态：frame.setUndecorated(<span class="literal">true</span>)</span><br><span class="line">设置窗口的可见性：frame.setVisible(<span class="literal">true</span>)</span><br></pre></td></tr></table></figure><h3 id="Add"><a href="#Add" class="headerlink" title="Add"></a>Add</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">添加组件：frame.add(组件)</span><br><span class="line">添加组件：frame.add(组件, 约束)</span><br><span class="line">添加窗口监听器：frame.addWindowListener(窗口监听器对象)</span><br><span class="line">添加键盘监听器：frame.addKeyListener(键盘监听器对象)</span><br><span class="line">添加鼠标监听器：frame.addMouseListener(鼠标监听器对象)</span><br></pre></td></tr></table></figure><h2 id="Dimension"><a href="#Dimension" class="headerlink" title="Dimension"></a>Dimension</h2><table><thead><tr><th align="center">字段名称</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>height</code></td><td align="center">高度尺寸</td></tr><tr><td align="center"><code>width</code></td><td align="center">宽度尺寸</td></tr></tbody></table><table><thead><tr><th align="center">方法名称</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>getWidth()</code></td><td align="center">以<code>double</code>精度返回此<code>Dimension</code>的宽度</td></tr><tr><td align="center"><code>getHeight()</code></td><td align="center">以<code>double</code>精度返回此<code>Dimension</code>的高度</td></tr><tr><td align="center"><code>setSize(double width, double height)</code></td><td align="center">以<code>double</code>精度将此<code>Dimension</code>对象的大小设置为指定的宽度和高度</td></tr><tr><td align="center"><code>setSize(int width, int height)</code></td><td align="center">将此<code>Dimension</code>对象的大小设置为指定的宽度和高度</td></tr><tr><td align="center"><code>setSize(Dimension d)</code></td><td align="center">将此<code>Dimension</code>对象的大小设置为指定的大小</td></tr></tbody></table><p>获取屏幕尺寸</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Dimension</span> <span class="variable">screenSize</span> <span class="operator">=</span> Toolkit.getDefaultToolkit().getScreenSize()</span><br></pre></td></tr></table></figure><p>窗口居中显示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">JFrame</span> <span class="variable">frame</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JFrame</span>()</span><br><span class="line">frame.setSize(宽, 高)</span><br><span class="line"><span class="type">Dimension</span> <span class="variable">screenSize</span> <span class="operator">=</span> Toolkit.getDefaultToolkit().getScreenSize()</span><br><span class="line"><span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> (<span class="type">int</span>) ((screenSize.getWidth() - frame.getWidth()) / <span class="number">2</span>)</span><br><span class="line"><span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> (<span class="type">int</span>) ((screenSize.getHeight() - frame.getHeight()) / <span class="number">2</span>)</span><br><span class="line">frame.setLocation(x, y)</span><br></pre></td></tr></table></figure><h1 id="鼠标"><a href="#鼠标" class="headerlink" title="鼠标"></a>鼠标</h1><h2 id="鼠标的创建"><a href="#鼠标的创建" class="headerlink" title="鼠标的创建"></a>鼠标的创建</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">创建一个鼠标对象：<span class="type">Cursor</span> <span class="variable">cursor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cursor</span>(鼠标样式)</span><br></pre></td></tr></table></figure><h2 id="鼠标的样式"><a href="#鼠标的样式" class="headerlink" title="鼠标的样式"></a>鼠标的样式</h2><table><thead><tr><th align="center">字段名称</th><th align="center">鼠标样式</th><th align="center">备注</th></tr></thead><tbody><tr><td align="center"><code>DEFAULT_CURSOR</code></td><td align="center">箭头光标</td><td align="center">默认光标</td></tr><tr><td align="center"><code>CROSSHAIR_CURSOR</code></td><td align="center">十字光标</td><td align="center"></td></tr><tr><td align="center"><code>TEXT_CURSOR</code></td><td align="center">I 型光标</td><td align="center">文本编辑光标</td></tr><tr><td align="center"><code>WAIT_CURSOR</code></td><td align="center">通常是一个沙漏或旋转圈</td><td align="center">等待光标</td></tr><tr><td align="center"><code>HAND_CURSOR</code></td><td align="center">手形光标</td><td align="center">通常用于点击链接</td></tr><tr><td align="center"><code>MOVE_CURSOR</code></td><td align="center">四向箭头</td><td align="center">移动光标</td></tr><tr><td align="center"><code>N_RESIZE_CURSOR</code></td><td align="center">双向箭头</td><td align="center">北</td></tr><tr><td align="center"><code>S_RESIZE_CURSOR</code></td><td align="center">双向箭头</td><td align="center">南</td></tr><tr><td align="center"><code>W_RESIZE_CURSOR</code></td><td align="center">双向箭头</td><td align="center">西</td></tr><tr><td align="center"><code>E_RESIZE_CURSOR</code></td><td align="center">双向箭头</td><td align="center">东</td></tr><tr><td align="center"><code>SW_RESIZE_CURSOR</code></td><td align="center">双向箭头</td><td align="center">南西</td></tr><tr><td align="center"><code>SE_RESIZE_CURSOR</code></td><td align="center">双向箭头</td><td align="center">东南</td></tr><tr><td align="center"><code>NW_RESIZE_CURSOR</code></td><td align="center">双向箭头</td><td align="center">北西</td></tr><tr><td align="center"><code>NE_RESIZE_CURSOR</code></td><td align="center">双向箭头</td><td align="center">东北</td></tr></tbody></table><h1 id="监听器"><a href="#监听器" class="headerlink" title="监听器"></a>监听器</h1><h2 id="窗口监听器"><a href="#窗口监听器" class="headerlink" title="窗口监听器"></a>窗口监听器</h2><h3 id="窗口监听器的创建"><a href="#窗口监听器的创建" class="headerlink" title="窗口监听器的创建"></a>窗口监听器的创建</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">创建一个窗口监听器：<span class="type">WindowAdapter</span> <span class="variable">windowAdapter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WindowAdapter</span>() &#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="窗口监听器的事件"><a href="#窗口监听器的事件" class="headerlink" title="窗口监听器的事件"></a>窗口监听器的事件</h3><table><thead><tr><th align="center">方法名称</th><th align="center">何时被调用</th></tr></thead><tbody><tr><td align="center"><code>windowOpened</code></td><td align="center">当窗口的可见性首次变成<code>true</code>时</td></tr><tr><td align="center"><code>windowClosing</code></td><td align="center">当企图关闭窗口（也就是点击<code>X</code>号）时</td></tr><tr><td align="center"><code>windowClosed</code></td><td align="center">当成功关闭窗口时</td></tr><tr><td align="center"><code>windowIconified</code></td><td align="center">当最小化窗口时</td></tr><tr><td align="center"><code>windowDeiconified</code></td><td align="center">当窗口从最小化状态变成普通状态时</td></tr><tr><td align="center"><code>windowActivated</code></td><td align="center">当窗口变成活跃状态时</td></tr><tr><td align="center"><code>windowDeactivated</code></td><td align="center">当窗口变成不活跃时</td></tr></tbody></table><h3 id="WindowEvent"><a href="#WindowEvent" class="headerlink" title="WindowEvent"></a>WindowEvent</h3><table><thead><tr><th align="center">字段</th><th align="center">事件</th></tr></thead><tbody><tr><td align="center"><code>WINDOW_CLOSED</code></td><td align="center">窗口关闭事件</td></tr><tr><td align="center"><code>WINDOW_CLOSING</code></td><td align="center">窗口正在关闭</td></tr><tr><td align="center"><code>WINDOW_OPENED</code></td><td align="center">窗口打开事件</td></tr><tr><td align="center"><code>WINDOW_STATE_CHANGED</code></td><td align="center">窗口状态更改事件</td></tr></tbody></table><table><thead><tr><th align="center">方法</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>getID</code></td><td align="center">返回与此事件关联的事件类型的唯一标识符</td></tr><tr><td align="center"><code>paramString</code></td><td align="center">返回一个表示此事件对象的字符串</td></tr><tr><td align="center"><code>getWindow</code></td><td align="center">返回与此事件相关联的窗口对象</td></tr><tr><td align="center"><code>getNewState</code></td><td align="center">对于窗口状态更改事件，返回窗口的新状态</td></tr><tr><td align="center"><code>getOldState</code></td><td align="center">对于窗口状态更改事件，返回窗口的旧状态</td></tr></tbody></table><h2 id="键盘监听器"><a href="#键盘监听器" class="headerlink" title="键盘监听器"></a>键盘监听器</h2><h3 id="键盘监听器的创建"><a href="#键盘监听器的创建" class="headerlink" title="键盘监听器的创建"></a>键盘监听器的创建</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">创建一个键盘监听器：<span class="type">KeyAdapter</span> <span class="variable">keyAdapter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">KeyAdapter</span>() &#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="键盘监听器的事件"><a href="#键盘监听器的事件" class="headerlink" title="键盘监听器的事件"></a>键盘监听器的事件</h3><table><thead><tr><th align="center">方法名称</th><th align="center">何时被调用</th></tr></thead><tbody><tr><td align="center"><code>keyTyped</code></td><td align="center">当一个按键按下之后（只捕获字符键）</td></tr><tr><td align="center"><code>keyPressed</code></td><td align="center">当一个按键按下之后（全捕获）</td></tr><tr><td align="center"><code>keyReleased</code></td><td align="center">当一个按键松开之后</td></tr></tbody></table><h3 id="KeyEvent"><a href="#KeyEvent" class="headerlink" title="KeyEvent"></a>KeyEvent</h3><p>字段太多了，见<a href="https://www.runoob.com/manual/jdk11api/java.desktop/java/awt/event/KeyEvent.html">[KeyEvent]</a></p><table><thead><tr><th align="center">方法</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>getID</code></td><td align="center">返回与此事件关联的事件类型的唯一标识符</td></tr><tr><td align="center"><code>paramString</code></td><td align="center">返回一个表示此事件对象的字符串</td></tr><tr><td align="center"><code>getKeyChar</code></td><td align="center">返回与此事件中的键关联的字符</td></tr><tr><td align="center"><code>getKeyCode</code></td><td align="center">返回与此事件中的键关联的整数</td></tr><tr><td align="center"><code>isActionKey</code></td><td align="center">检查此键事件的键码是否表示一个动作键</td></tr><tr><td align="center"><code>isAltDown</code></td><td align="center">检查是否按下了 Alt 键</td></tr><tr><td align="center"><code>isControlDown</code></td><td align="center">检查是否按下了 Ctrl 键</td></tr><tr><td align="center"><code>isMetaDown</code></td><td align="center">检查是否按下了 Meta 键</td></tr><tr><td align="center"><code>isShiftDown</code></td><td align="center">检查是否按下了 Shift 键</td></tr></tbody></table><p>监听<strong>Shift + A</strong>事件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (e.isShiftDown() &amp;&amp; e.getKeyChar() == <span class="string">&#x27;A&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="鼠标监听器"><a href="#鼠标监听器" class="headerlink" title="鼠标监听器"></a>鼠标监听器</h2><h3 id="鼠标监听器的创建"><a href="#鼠标监听器的创建" class="headerlink" title="鼠标监听器的创建"></a>鼠标监听器的创建</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">MouseAdapter</span> <span class="variable">mouseAdapter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MouseAdapter</span>() &#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="鼠标监听器的事件"><a href="#鼠标监听器的事件" class="headerlink" title="鼠标监听器的事件"></a>鼠标监听器的事件</h3><table><thead><tr><th align="center">方法名称</th><th align="center">何时被调用</th></tr></thead><tbody><tr><td align="center"><code>mouseClicked</code></td><td align="center">当鼠标被点击（按下并释放）时</td></tr><tr><td align="center"><code>mousePressed</code></td><td align="center">当鼠标被按下时</td></tr><tr><td align="center"><code>mouseReleased</code></td><td align="center">当鼠标被释放时</td></tr><tr><td align="center"><code>mouseEntered</code></td><td align="center">当鼠标进入组件时</td></tr><tr><td align="center"><code>mouseExited</code></td><td align="center">当鼠标离开组件时</td></tr><tr><td align="center"><code>mouseDragged</code></td><td align="center">当鼠标按下并拖动时</td></tr><tr><td align="center"><code>mouseMoved</code></td><td align="center">当鼠标移动时</td></tr></tbody></table><h3 id="InputEvent"><a href="#InputEvent" class="headerlink" title="InputEvent"></a>InputEvent</h3><table><thead><tr><th align="center">字段</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>SHIFT_DOWN_MASK</code></td><td align="center">Shift 键的位掩码</td></tr><tr><td align="center"><code>CTRL_DOWN_MASK</code></td><td align="center">Ctrl 键的位掩码</td></tr><tr><td align="center"><code>META_DOWN_MASK</code></td><td align="center">Meta 键的位掩码</td></tr><tr><td align="center"><code>ALT_DOWN_MASK</code></td><td align="center">Alt 键的位掩码</td></tr><tr><td align="center"><code>BUTTON1_DOWN_MASK</code></td><td align="center">鼠标左键的位掩码</td></tr><tr><td align="center"><code>BUTTON2_DOWN_MASK</code></td><td align="center">鼠标中键的位掩码</td></tr><tr><td align="center"><code>BUTTON3_DOWN_MASK</code></td><td align="center">鼠标右键的位掩码</td></tr></tbody></table><h3 id="MouseEvent"><a href="#MouseEvent" class="headerlink" title="MouseEvent"></a>MouseEvent</h3><p>继承自<code>InputEvent</code></p><table><thead><tr><th align="center">字段</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>BUTTON1</code></td><td align="center">鼠标左键</td></tr><tr><td align="center"><code>BUTTON2</code></td><td align="center">鼠标中键</td></tr><tr><td align="center"><code>BUTTON3</code></td><td align="center">鼠标右键</td></tr></tbody></table><table><thead><tr><th align="center">方法</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>getID</code></td><td align="center">返回与此事件关联的事件类型的唯一标识符</td></tr><tr><td align="center"><code>paramString</code></td><td align="center">返回一个表示此事件对象的字符串</td></tr><tr><td align="center"><code>getButton</code></td><td align="center">返回触发鼠标事件的鼠标按钮的标识符</td></tr><tr><td align="center"><code>getX</code></td><td align="center">返回鼠标事件发生时的相对于组件左上角的 X 坐标</td></tr><tr><td align="center"><code>getY</code></td><td align="center">返回鼠标事件发生时的相对于组件左上角的 Y 坐标</td></tr><tr><td align="center"><code>getModifiers</code></td><td align="center">返回触发鼠标事件时按下的修饰键的状态</td></tr></tbody></table><p>监听<strong>Ctrl + 鼠标左键</strong>事件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>((e.getModifiers() &amp; InputEvent.CTRL_DOWN_MASK) != <span class="number">0</span> &amp;&amp; e.getButton() == MouseEvent.BUTTON1)</span><br></pre></td></tr></table></figure><h1 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h1><h2 id="常用组件"><a href="#常用组件" class="headerlink" title="常用组件"></a>常用组件</h2><h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><h4 id="标签的创建"><a href="#标签的创建" class="headerlink" title="标签的创建"></a>标签的创建</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">创建一个标签：<span class="type">JLabel</span> <span class="variable">label</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JLabel</span>(<span class="string">&quot;文本内容&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="标签的方法"><a href="#标签的方法" class="headerlink" title="标签的方法"></a>标签的方法</h4><h5 id="Get-1"><a href="#Get-1" class="headerlink" title="Get"></a>Get</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">获取标签宽度：label.getWidth()</span><br><span class="line">获取标签高度：label.getHeight()</span><br><span class="line">获取标签大小：label.getSize()</span><br><span class="line">获取标签初始位置：label.getLocation()</span><br><span class="line">获取标签初始位置和大小：label.getBounds()</span><br><span class="line"></span><br><span class="line">获取标签文本：label.getText()</span><br><span class="line">获取标签字体样式：label.getFont()</span><br><span class="line">获取标签背景颜色：label.getBackground()</span><br></pre></td></tr></table></figure><h5 id="Set-1"><a href="#Set-1" class="headerlink" title="Set"></a>Set</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">设置标签大小：label.setSize(宽, 高)</span><br><span class="line">设置标签初始位置：label.setLocation(x, y)</span><br><span class="line">设置标签初始位置和大小：label.setBounds(x, y, 宽, 高)</span><br><span class="line">设置标签建议大小：label.setPreferredSize(尺寸)</span><br><span class="line"></span><br><span class="line">设置标签悬浮文本：label.setToolTipText(文本内容)</span><br><span class="line">设置标签文本：label.setText(文本内容)</span><br><span class="line">设置标签字体样式：label.setFont(字体样式)</span><br><span class="line">设置标签背景颜色：label.setBackground(颜色)</span><br><span class="line">设置标签　UI：label.setUI(UI 主题)</span><br><span class="line"></span><br><span class="line">设置标签可见性：label.setVisible(<span class="literal">true</span>)</span><br></pre></td></tr></table></figure><h3 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h3><h4 id="按钮的创建"><a href="#按钮的创建" class="headerlink" title="按钮的创建"></a>按钮的创建</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">创建一个按钮：<span class="type">JButton</span> <span class="variable">button</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;文本内容&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="按钮的方法"><a href="#按钮的方法" class="headerlink" title="按钮的方法"></a>按钮的方法</h4><h5 id="Get-2"><a href="#Get-2" class="headerlink" title="Get"></a>Get</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">获取按钮宽度：button.getWidth()</span><br><span class="line">获取按钮高度：button.getHeight()</span><br><span class="line">获取按钮大小：button.getSize()</span><br><span class="line">获取按钮初始位置：button.getLocation()</span><br><span class="line">获取按钮初始位置和大小：button.getBounds()</span><br><span class="line"></span><br><span class="line">获取按钮文本：button.getText()</span><br><span class="line">获取按钮 UI：button.getUI()</span><br><span class="line">获取按钮字体样式：button.getFont()</span><br><span class="line">获取按钮背景颜色：button.getBackground()</span><br></pre></td></tr></table></figure><h5 id="Set-2"><a href="#Set-2" class="headerlink" title="Set"></a>Set</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">设置按钮大小：button.setSize(宽, 高)</span><br><span class="line">设置按钮初始位置：button.setLocation(x, y)</span><br><span class="line">设置按钮初始位置和大小：button.setBounds(x, y, 宽, 高)</span><br><span class="line">设置按钮建议大小：button.setPreferredSize(尺寸)</span><br><span class="line"></span><br><span class="line">设置按钮悬浮文本：button.setToolTipText(文本内容)</span><br><span class="line">设置按钮文本：button.setText(文本内容)</span><br><span class="line">设置按钮 UI：button.setUI(UI)</span><br><span class="line">设置按钮字体样式：button.setFont(字体样式)</span><br><span class="line">设置按钮背景颜色：button.setBackground(颜色)</span><br><span class="line">设置按钮 UI：button.setUI(UI 主题)</span><br><span class="line"></span><br><span class="line">设置按钮可见性：button.setVisible(<span class="literal">true</span>)</span><br></pre></td></tr></table></figure><h5 id="Add-1"><a href="#Add-1" class="headerlink" title="Add"></a>Add</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">添加监听器[按下按钮]：button.addActionListener(监听器)</span><br></pre></td></tr></table></figure><h3 id="开关按钮"><a href="#开关按钮" class="headerlink" title="开关按钮"></a>开关按钮</h3><h4 id="按钮的创建-1"><a href="#按钮的创建-1" class="headerlink" title="按钮的创建"></a>按钮的创建</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">创建一个开关按钮：<span class="type">JToggleButton</span> <span class="variable">button</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JToggleButton</span>(文本内容)</span><br></pre></td></tr></table></figure><h4 id="按钮的方法-1"><a href="#按钮的方法-1" class="headerlink" title="按钮的方法"></a>按钮的方法</h4><h5 id="Get-3"><a href="#Get-3" class="headerlink" title="Get"></a>Get</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">获取按钮宽度：button.getWidth()</span><br><span class="line">获取按钮高度：button.getHeight()</span><br><span class="line">获取按钮大小：button.getSize()</span><br><span class="line">获取按钮初始位置：button.getLocation()</span><br><span class="line">获取按钮初始位置和大小：button.getBounds()</span><br><span class="line"></span><br><span class="line">获取按钮文本：button.getText()</span><br><span class="line">获取按钮 UI：button.getUI()</span><br><span class="line">获取按钮字体样式：button.getFont()</span><br><span class="line">获取按钮背景颜色：button.getBackground()</span><br><span class="line">    </span><br><span class="line">检查按钮是否被选中：button.isSelected()</span><br></pre></td></tr></table></figure><h5 id="Set-3"><a href="#Set-3" class="headerlink" title="Set"></a>Set</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">设置按钮大小：button.setSize(宽, 高)</span><br><span class="line">设置按钮初始位置：button.setLocation(x, y)</span><br><span class="line">设置按钮初始位置和大小：button.setBounds(x, y, 宽, 高)</span><br><span class="line">设置按钮建议大小：button.setPreferredSize(尺寸)</span><br><span class="line"></span><br><span class="line">设置按钮悬浮文本：button.setToolTipText(文本内容)</span><br><span class="line">设置按钮文本：button.setText(文本内容)</span><br><span class="line">设置按钮 UI：button.setUI(UI)</span><br><span class="line">设置按钮字体样式：button.setFont(字体样式)</span><br><span class="line">设置按钮背景颜色：button.setBackground(颜色)</span><br><span class="line">设置按钮　UI：button.setUI(UI 主题)</span><br><span class="line"></span><br><span class="line">设置按钮状态：setSelected(<span class="literal">true</span>)</span><br><span class="line">设置按钮可见性：button.setVisible(<span class="literal">true</span>)</span><br></pre></td></tr></table></figure><h5 id="Add-2"><a href="#Add-2" class="headerlink" title="Add"></a>Add</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">添加监听器[按下按钮]：button.addActionListener(监听器)</span><br></pre></td></tr></table></figure><h3 id="文本输入框"><a href="#文本输入框" class="headerlink" title="文本输入框"></a>文本输入框</h3><h4 id="文本输入框的创建"><a href="#文本输入框的创建" class="headerlink" title="文本输入框的创建"></a>文本输入框的创建</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">创建一个文本输入框：<span class="type">JTextField</span> <span class="variable">field</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JTextField</span>()</span><br></pre></td></tr></table></figure><h4 id="文本输入框的方法"><a href="#文本输入框的方法" class="headerlink" title="文本输入框的方法"></a>文本输入框的方法</h4><h5 id="Get-4"><a href="#Get-4" class="headerlink" title="Get"></a>Get</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">获取文本输入框宽度：field.getWidth()</span><br><span class="line">获取文本输入框高度：field.getHeight()</span><br><span class="line">获取文本输入框大小：field.getSize()</span><br><span class="line">获取文本输入框初始位置：field.getLocation()</span><br><span class="line">获取文本输入框初始位置和大小：field.getBounds()</span><br><span class="line"></span><br><span class="line">获取文本输入框展示字符：field.getEchoChar()</span><br><span class="line">获取文本输入框文本：field.getText()</span><br><span class="line">获取文本输入框字体样式：field.getFont()</span><br><span class="line">获取文本输入框背景颜色：field.getBackground()</span><br></pre></td></tr></table></figure><h5 id="Set-4"><a href="#Set-4" class="headerlink" title="Set"></a>Set</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">设置文本输入框大小：field.setSize(宽, 高)</span><br><span class="line">设置文本输入框初始位置：field.setLocation(x, y)</span><br><span class="line">设置文本输入框初始位置和大小：field.setBounds(x, y, 宽, 高)</span><br><span class="line">设置文本输入框建议大小：field.setPreferredSize(尺寸)</span><br><span class="line"></span><br><span class="line">设置文本输入框悬浮文本：field.setToolTipText(文本内容)</span><br><span class="line">设置文本输入框展示字符：field.setEchoChar(字符)</span><br><span class="line">设置文本输入框文本：field.setText(文本内容)</span><br><span class="line">设置文本输入框字体样式：field.setFont(字体样式)</span><br><span class="line">设置文本输入框背景颜色：field.setBackground(颜色)</span><br><span class="line">设置文本输入框　UI：field.setUI(UI 主题)</span><br><span class="line"></span><br><span class="line">设置文本输入框可见性：field.setVisible(<span class="literal">true</span>)</span><br></pre></td></tr></table></figure><h5 id="Add-3"><a href="#Add-3" class="headerlink" title="Add"></a>Add</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">添加监听器[按下回车键]：field.addActionListener(监听器)</span><br></pre></td></tr></table></figure><h3 id="勾选框"><a href="#勾选框" class="headerlink" title="勾选框"></a>勾选框</h3><h4 id="勾选框的创建"><a href="#勾选框的创建" class="headerlink" title="勾选框的创建"></a>勾选框的创建</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">创建一个勾选框：<span class="type">JCheckbox</span> <span class="variable">checkbox</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JCheckbox</span>(<span class="string">&quot;文本内容&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="勾选框的方法"><a href="#勾选框的方法" class="headerlink" title="勾选框的方法"></a>勾选框的方法</h4><h5 id="Get-5"><a href="#Get-5" class="headerlink" title="Get"></a>Get</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">获取勾选框宽度：checkbox.getWidth()</span><br><span class="line">获取勾选框高度：checkbox.getHeight()</span><br><span class="line">获取勾选框大小：checkbox.getSize()</span><br><span class="line">获取勾选框初始位置：checkbox.getLocation()</span><br><span class="line">获取勾选框初始位置和大小：checkbox.getBounds()</span><br><span class="line">    </span><br><span class="line">获取勾选框状态：checkbox.getState()</span><br><span class="line">获取勾选框分组：checkbox.getCheckboxGroup()</span><br><span class="line">获取勾选框字体样式：checkbox.getFont()</span><br><span class="line">获取勾选框背景颜色：checkbox.getBackground()</span><br></pre></td></tr></table></figure><h5 id="Set-5"><a href="#Set-5" class="headerlink" title="Set"></a>Set</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">设置勾选框大小：checkbox.setSize(宽, 高)</span><br><span class="line">设置勾选框初始位置：checkbox.setLocation(x, y)</span><br><span class="line">设置勾选框初始位置和大小：checkbox.setBounds(x, y, 宽, 高)</span><br><span class="line">设置勾选框建议大小：checkbox.setPreferredSize(尺寸)</span><br><span class="line"></span><br><span class="line">设置勾选框悬浮文本：checkbox.setToolTipText(文本内容)</span><br><span class="line">设置勾选框状态：checkbox.setState(<span class="literal">true</span>)</span><br><span class="line">设置勾选框分组：checkbox.setCheckboxGroup(勾选框组)</span><br><span class="line">设置勾选框字体样式：checkbox.setFont(字体样式)</span><br><span class="line">设置勾选框背景颜色：checkbox.setBackground(颜色)</span><br><span class="line">设置勾选框　UI：checkbox.setUI(UI 主题)</span><br><span class="line"></span><br><span class="line">设置勾选框可见性：checkbox.setVisible(<span class="literal">true</span>)</span><br></pre></td></tr></table></figure><h3 id="勾选框组"><a href="#勾选框组" class="headerlink" title="勾选框组"></a>勾选框组</h3><h4 id="勾选框组的创建"><a href="#勾选框组的创建" class="headerlink" title="勾选框组的创建"></a>勾选框组的创建</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">创建一个勾选框组：<span class="type">JCheckboxGroup</span> <span class="variable">group</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JCheckboxGroup</span>()</span><br></pre></td></tr></table></figure><h4 id="勾选框组的方法"><a href="#勾选框组的方法" class="headerlink" title="勾选框组的方法"></a>勾选框组的方法</h4><h5 id="Get-6"><a href="#Get-6" class="headerlink" title="Get"></a>Get</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">获取被选中的勾选框：group.getSelectedCheckbox()</span><br></pre></td></tr></table></figure><h5 id="Set-6"><a href="#Set-6" class="headerlink" title="Set"></a>Set</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">设置被选中的勾选框：group.setSelectedCheckbox(勾选框)</span><br></pre></td></tr></table></figure><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><h4 id="列表的创建"><a href="#列表的创建" class="headerlink" title="列表的创建"></a>列表的创建</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">创建一个列表：JList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">JList</span>&lt;&gt;()</span><br></pre></td></tr></table></figure><h4 id="列表的方法"><a href="#列表的方法" class="headerlink" title="列表的方法"></a>列表的方法</h4><h5 id="Get-7"><a href="#Get-7" class="headerlink" title="Get"></a>Get</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">获取列表宽度：list.getWidth()</span><br><span class="line">获取列表高度：list.getHeight()</span><br><span class="line">获取列表大小：list.getSize()</span><br><span class="line">获取列表初始位置：list.getLocation()</span><br><span class="line">获取列表初始位置和大小：list.getBounds()</span><br><span class="line"></span><br><span class="line">获取列表名称：list.getName()</span><br><span class="line">获取列表内部鼠标：list.getCursor()</span><br><span class="line">获取列表背景颜色：list.getBackground()</span><br><span class="line">    </span><br><span class="line">获取列表项目：getItem()</span><br><span class="line">获取列表项目：getItems()</span><br><span class="line">获取列表项目总数：getItemCount()</span><br><span class="line">获取已选列表项目：getSelectedItem()</span><br><span class="line">获取已选列表项目：getSelectedItems()</span><br></pre></td></tr></table></figure><h5 id="Set-7"><a href="#Set-7" class="headerlink" title="Set"></a>Set</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">设置列表大小：list.setSize(宽, 高)</span><br><span class="line">设置列表初始位置：list.setLocation(x, y)</span><br><span class="line">设置列表初始位置和大小：list.setBounds(x, y, 宽, 高)</span><br><span class="line"></span><br><span class="line">设置列表悬浮文本：list.setToolTipText(文本内容)</span><br><span class="line">设置列表名称：list.setName(字符串)</span><br><span class="line">设置列表内部鼠标：list.setCursor(鼠标对象)</span><br><span class="line">设置列表背景颜色：list.setBackground(颜色)</span><br><span class="line">设置列表　UI：list.setUI(UI 主题)</span><br><span class="line"></span><br><span class="line">设置列表是否多选：list.setMultipleMode(<span class="literal">true</span>)</span><br><span class="line">设置列表的可见性：list.setVisible(<span class="literal">true</span>)</span><br></pre></td></tr></table></figure><h5 id="Add-4"><a href="#Add-4" class="headerlink" title="Add"></a>Add</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">添加项目：list.add(字符串)</span><br><span class="line">添加项目：list.add(字符串, 索引)</span><br><span class="line">添加项目监听器：list.addItemListener(项目监听器对象)</span><br><span class="line">添加键盘监听器：list.addKeyListener(键盘监听器对象)</span><br><span class="line">添加鼠标监听器：list.addMouseListener(鼠标监听器对象)</span><br></pre></td></tr></table></figure><h3 id="进度条"><a href="#进度条" class="headerlink" title="进度条"></a>进度条</h3><h4 id="进度条的创建"><a href="#进度条的创建" class="headerlink" title="进度条的创建"></a>进度条的创建</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">创建一个进度条：<span class="type">JProgressBar</span> <span class="variable">bar</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JProgressBar</span>()</span><br></pre></td></tr></table></figure><h4 id="进度条的方法"><a href="#进度条的方法" class="headerlink" title="进度条的方法"></a>进度条的方法</h4><h5 id="Get-8"><a href="#Get-8" class="headerlink" title="Get"></a>Get</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">获取进度条宽度：bar.getWidth()</span><br><span class="line">获取进度条高度：bar.getHeight()</span><br><span class="line">获取进度条大小：bar.getSize()</span><br><span class="line">获取进度条初始位置：bar.getLocation()</span><br><span class="line">获取进度条初始位置和大小：bar.getBounds()</span><br><span class="line"></span><br><span class="line">获取进度条名称：bar.getName()</span><br><span class="line">获取进度条字体样式：bar.getFont()</span><br><span class="line">获取进度条背景颜色：bar.getBackground()</span><br><span class="line"></span><br><span class="line">获取进度条下界：bar.getMinimum()</span><br><span class="line">获取进度条上界：bar.getMaximum()</span><br><span class="line">获取进度条当前值：bar.getValue()</span><br><span class="line">获取进度条百分比：bar.getPercentComplete()</span><br></pre></td></tr></table></figure><h5 id="Set-8"><a href="#Set-8" class="headerlink" title="Set"></a>Set</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">设置进度条大小：bar.setSize(宽, 高)</span><br><span class="line">设置进度条初始位置：bar.setLocation(x, y)</span><br><span class="line">设置进度条初始位置和大小：bar.setBounds(x, y, 宽, 高)</span><br><span class="line">设置进度条建议大小：bar.setPreferredSize(尺寸)</span><br><span class="line"></span><br><span class="line">设置进度条悬浮文本：bar.setToolTipText(文本内容)</span><br><span class="line">设置进度条名称：bar.setName(字符串)</span><br><span class="line">设置进度条字体样式：bar.setFont(字体样式)</span><br><span class="line">设置进度条背景颜色：bar.setBackground(颜色)</span><br><span class="line">设置进度条　UI：bar.setUI(UI 主题)</span><br><span class="line"></span><br><span class="line">设置进度条可见性：bar.setVisible(<span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line">设置进度条下界：bar.setMinimum(n)</span><br><span class="line">设置进度条上界：bar.setMaximum(n)</span><br><span class="line">设置进度条当前值：bar.setValue(n)</span><br></pre></td></tr></table></figure><h5 id="Re"><a href="#Re" class="headerlink" title="Re"></a>Re</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">重新绘制进度条：bar.repaint()</span><br></pre></td></tr></table></figure><h3 id="颜色选择器"><a href="#颜色选择器" class="headerlink" title="颜色选择器"></a>颜色选择器</h3><h4 id="颜色选择器的创建"><a href="#颜色选择器的创建" class="headerlink" title="颜色选择器的创建"></a>颜色选择器的创建</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">创建一个颜色选择器：<span class="type">JColorChooser</span> <span class="variable">chooser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JColorChooser</span>()</span><br></pre></td></tr></table></figure><h4 id="颜色选择器的方法"><a href="#颜色选择器的方法" class="headerlink" title="颜色选择器的方法"></a>颜色选择器的方法</h4><h5 id="Get-9"><a href="#Get-9" class="headerlink" title="Get"></a>Get</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">获取颜色选择器宽度：chooser.getWidth()</span><br><span class="line">获取颜色选择器高度：chooser.getHeight()</span><br><span class="line">获取颜色选择器大小：chooser.getSize()</span><br><span class="line">获取颜色选择器初始位置：chooser.getLocation()</span><br><span class="line">获取颜色选择器初始位置和大小：chooser.getBounds()</span><br><span class="line"></span><br><span class="line">获取颜色选择器名称：chooser.getName()</span><br><span class="line">获取颜色选择器字体样式：chooser.getFont()</span><br><span class="line">获取颜色选择器背景颜色：chooser.getBackground()</span><br><span class="line"></span><br><span class="line">获取颜色选择器颜色：chooser.getColor()</span><br></pre></td></tr></table></figure><h5 id="Set-9"><a href="#Set-9" class="headerlink" title="Set"></a>Set</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">设置颜色选择器大小：chooser.setSize(宽, 高)</span><br><span class="line">设置颜色选择器初始位置：chooser.setLocation(x, y)</span><br><span class="line">设置颜色选择器初始位置和大小：chooser.setBounds(x, y, 宽, 高)</span><br><span class="line">设置颜色选择器建议大小：chooser.setPreferredSize(尺寸)</span><br><span class="line"></span><br><span class="line">设置颜色选择器悬浮文本：chooser.setToolTipText(文本内容)</span><br><span class="line">设置颜色选择器名称：chooser.setName(字符串)</span><br><span class="line">设置颜色选择器字体样式：chooser.setFont(字体样式)</span><br><span class="line">设置颜色选择器背景颜色：chooser.setBackground(颜色)</span><br><span class="line">设置颜色选择器　UI：chooser.setUI(UI 主题)</span><br><span class="line"></span><br><span class="line">设置颜色选择器颜色：chooser.setColor(颜色)</span><br><span class="line">设置颜色选择器可见性：chooser.setVisible(<span class="literal">true</span>)</span><br></pre></td></tr></table></figure><h3 id="文件选择器"><a href="#文件选择器" class="headerlink" title="文件选择器"></a>文件选择器</h3><h4 id="文件选择器的创建"><a href="#文件选择器的创建" class="headerlink" title="文件选择器的创建"></a>文件选择器的创建</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">创建一个文件选择器：<span class="type">JFileChooser</span> <span class="variable">fileChooser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JFileChooser</span>()</span><br></pre></td></tr></table></figure><h4 id="文件选择器的方法"><a href="#文件选择器的方法" class="headerlink" title="文件选择器的方法"></a>文件选择器的方法</h4><h5 id="Get-10"><a href="#Get-10" class="headerlink" title="Get"></a>Get</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">获取文件选择器宽度：fileChooser.getWidth()</span><br><span class="line">获取文件选择器高度：fileChooser.getHeight()</span><br><span class="line">获取文件选择器大小：fileChooser.getSize()</span><br><span class="line">获取文件选择器初始位置：fileChooser.getLocation()</span><br><span class="line">获取文件选择器初始位置和大小：fileChooser.getBounds()</span><br><span class="line"></span><br><span class="line">获取文件选择器名称：fileChooser.getName()</span><br><span class="line">获取文件选择器字体样式：fileChooser.getFont()</span><br><span class="line">获取文件选择器背景颜色：fileChooser.getBackground()</span><br><span class="line">    </span><br><span class="line">获取文件选择器文件：fileChooser.getSelectedFile()</span><br><span class="line">获取文件选择器文件：fileChooser.getSelectedFiles()</span><br></pre></td></tr></table></figure><h5 id="Set-10"><a href="#Set-10" class="headerlink" title="Set"></a>Set</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">设置文件选择器大小：fileChooser.setSize(宽, 高)</span><br><span class="line">设置文件选择器初始位置：fileChooser.setLocation(x, y)</span><br><span class="line">设置文件选择器初始位置和大小：fileChooser.setBounds(x, y, 宽, 高)</span><br><span class="line">设置文件选择器建议大小：fileChooser.setPreferredSize(尺寸)</span><br><span class="line"></span><br><span class="line">设置文件选择器悬浮文本：fileChooser.setToolTipText(文本内容)</span><br><span class="line">设置文件选择器名称：fileChooser.setName(字符串)</span><br><span class="line">设置文件选择器字体样式：fileChooser.setFont(字体样式)</span><br><span class="line">设置文件选择器背景颜色：fileChooser.setBackground(颜色)</span><br><span class="line">设置文件选择器　UI：fileChooser.setUI(UI 主题)</span><br><span class="line"></span><br><span class="line">设置文件选择器类型[打开文件]：fileChooser.setDialogType(JFileChooser.OPEN_DIALOG)</span><br><span class="line">设置文件选择器类型[保存文件]：fileChooser.setDialogType(JFileChooser.SAVE_DIALOG)</span><br><span class="line">设置文件选择器文件：fileChooser.setSelectedFile(文件)</span><br><span class="line">设置文件选择器文件：fileChooser.setSelectedFiles(文件[])</span><br><span class="line">设置文件选择器可见性：fileChooser.setVisible(<span class="literal">true</span>)</span><br></pre></td></tr></table></figure><h3 id="树"><a href="#树" class="headerlink" title="树"></a>树</h3><h4 id="树的创建"><a href="#树的创建" class="headerlink" title="树的创建"></a>树的创建</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">创建一个树：<span class="type">JTree</span> <span class="variable">tree</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JTree</span>(<span class="keyword">new</span> <span class="title class_">DefaultMutableTreeNode</span>(<span class="string">&quot;根节点&quot;</span>))</span><br></pre></td></tr></table></figure><h4 id="树的方法"><a href="#树的方法" class="headerlink" title="树的方法"></a>树的方法</h4><h5 id="Get-11"><a href="#Get-11" class="headerlink" title="Get"></a>Get</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">获取树宽度：tree.getWidth()</span><br><span class="line">获取树高度：tree.getHeight()</span><br><span class="line">获取树大小：tree.getSize()</span><br><span class="line">获取树初始位置：tree.getLocation()</span><br><span class="line">获取树初始位置和大小：tree.getBounds()</span><br><span class="line"></span><br><span class="line">获取树名称：tree.getName()</span><br><span class="line">获取树字体样式：tree.getFont()</span><br><span class="line">获取树背景颜色：tree.getBackground()</span><br></pre></td></tr></table></figure><h5 id="Set-11"><a href="#Set-11" class="headerlink" title="Set"></a>Set</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">设置树大小：tree.setSize(宽, 高)</span><br><span class="line">设置树初始位置：tree.setLocation(x, y)</span><br><span class="line">设置树初始位置和大小：tree.setBounds(x, y, 宽, 高)</span><br><span class="line">设置树建议大小：tree.setPreferredSize(尺寸)</span><br><span class="line"></span><br><span class="line">设置树悬浮文本：tree.setToolTipText(文本内容)</span><br><span class="line">设置树名称：tree.setName(字符串)</span><br><span class="line">设置树字体样式：tree.setFont(字体样式)</span><br><span class="line">设置树背景颜色：tree.setBackground(颜色)</span><br><span class="line">设置树　UI：tree.setUI(UI 主题)</span><br><span class="line"></span><br><span class="line">设置树可见性：tree.setVisible(<span class="literal">true</span>)</span><br></pre></td></tr></table></figure><p>让<code>JTree</code>展示<code>.idea</code>目录下的所有文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;.idea&quot;</span>);</span><br><span class="line"><span class="type">DefaultMutableTreeNode</span> <span class="variable">root</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultMutableTreeNode</span>(file.getName());</span><br><span class="line">File[] files = Optional.ofNullable(file.listFiles()).orElseGet(() -&gt; <span class="keyword">new</span> <span class="title class_">File</span>[<span class="number">0</span>]); <span class="comment">// 拿到当前目录下所有文件和文件夹</span></span><br><span class="line"><span class="keyword">for</span> (File f: files)</span><br><span class="line">    root.add(<span class="keyword">new</span> <span class="title class_">DefaultMutableTreeNode</span>(f.getName())); <span class="comment">// 构造子结点并连接</span></span><br><span class="line"></span><br><span class="line"><span class="type">JTree</span> <span class="variable">tree</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JTree</span>(root); <span class="comment">// 设定默认的根结点</span></span><br></pre></td></tr></table></figure><h2 id="自定义组件"><a href="#自定义组件" class="headerlink" title="自定义组件"></a>自定义组件</h2><h3 id="自定义组件的创建"><a href="#自定义组件的创建" class="headerlink" title="自定义组件的创建"></a>自定义组件的创建</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> <span class="keyword">extends</span> <span class="title class_">Component</span> &#123; <span class="comment">// 继承自 Component 表示是一个组件</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">paint</span><span class="params">(Graphics g)</span> &#123; <span class="comment">// 重写 paint 方法，这个方法就是组件的绘制方法</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>必须继承自<code>Component</code>类，表示这是一个 AWT 组件</li><li>需要自己实现<code>paintComponent</code>方法，这个方法就是组件的绘制方法</li></ol><h1 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h1><h2 id="边界布局"><a href="#边界布局" class="headerlink" title="边界布局"></a>边界布局</h2><h3 id="边界布局的创建"><a href="#边界布局的创建" class="headerlink" title="边界布局的创建"></a>边界布局的创建</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">创建一个边界布局：<span class="type">BorderLayout</span> <span class="variable">borderLayout</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BorderLayout</span>()</span><br></pre></td></tr></table></figure><h3 id="边界布局的方法"><a href="#边界布局的方法" class="headerlink" title="边界布局的方法"></a>边界布局的方法</h3><h4 id="Get-12"><a href="#Get-12" class="headerlink" title="Get"></a>Get</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">获取横向间距：borderLayout.getHgap()</span><br><span class="line">获取纵向间距：borderLayout.getVgap()</span><br></pre></td></tr></table></figure><h4 id="Set-12"><a href="#Set-12" class="headerlink" title="Set"></a>Set</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">设置横向间距：borderLayout.setHgap(间距)</span><br><span class="line">设置纵向间距：borderLayout.setVgap(间距)</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">字段名称</th><th align="center">约束</th></tr></thead><tbody><tr><td align="center"><code>EAST</code></td><td align="center">东</td></tr><tr><td align="center"><code>SOUTH</code></td><td align="center">南</td></tr><tr><td align="center"><code>WEST</code></td><td align="center">西</td></tr><tr><td align="center"><code>NORTH</code></td><td align="center">北</td></tr><tr><td align="center"><code>CENTER</code></td><td align="center">中</td></tr></tbody></table><h2 id="流式布局"><a href="#流式布局" class="headerlink" title="流式布局"></a>流式布局</h2><h3 id="流式布局的创建"><a href="#流式布局的创建" class="headerlink" title="流式布局的创建"></a>流式布局的创建</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">创建一个流式布局：<span class="type">FlowLayout</span> <span class="variable">flowLayout</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FlowLayout</span>()</span><br></pre></td></tr></table></figure><h3 id="流式布局的方法"><a href="#流式布局的方法" class="headerlink" title="流式布局的方法"></a>流式布局的方法</h3><h4 id="Get-13"><a href="#Get-13" class="headerlink" title="Get"></a>Get</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">获取横向间距：flowLayout.getHgap()</span><br><span class="line">获取纵向间距：flowLayout.getVgap()</span><br></pre></td></tr></table></figure><h4 id="Set-13"><a href="#Set-13" class="headerlink" title="Set"></a>Set</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">设置横向间距：flowLayout.setHgap(间距)</span><br><span class="line">设置纵向间距：flowLayout.setVgap(间距)</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">字段名称</th><th align="center">约束</th></tr></thead><tbody><tr><td align="center"><code>CENTER</code></td><td align="center">居中对齐</td></tr><tr><td align="center"><code>LEFT</code></td><td align="center">左对齐</td></tr><tr><td align="center"><code>RIGHT</code></td><td align="center">右对齐</td></tr><tr><td align="center"><code>LEADING</code></td><td align="center">前沿对齐</td></tr><tr><td align="center"><code>TRAILING</code></td><td align="center">后缘对齐</td></tr></tbody></table><h2 id="卡片布局"><a href="#卡片布局" class="headerlink" title="卡片布局"></a>卡片布局</h2><h3 id="卡片布局的创建"><a href="#卡片布局的创建" class="headerlink" title="卡片布局的创建"></a>卡片布局的创建</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">创建一个卡片布局：<span class="type">CardLayout</span> <span class="variable">cardLayout</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CardLayout</span>()</span><br></pre></td></tr></table></figure><h3 id="卡片布局的方法"><a href="#卡片布局的方法" class="headerlink" title="卡片布局的方法"></a>卡片布局的方法</h3><h4 id="Get-14"><a href="#Get-14" class="headerlink" title="Get"></a>Get</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">获取横向间距：cardLayout.getHgap()</span><br><span class="line">获取纵向间距：cardLayout.getVgap()</span><br></pre></td></tr></table></figure><h4 id="Set-14"><a href="#Set-14" class="headerlink" title="Set"></a>Set</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">设置横向间距：cardLayout.setHgap(间距)</span><br><span class="line">设置纵向间距：cardLayout.setVgap(间距)</span><br></pre></td></tr></table></figure><h4 id="next"><a href="#next" class="headerlink" title="next"></a>next</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">切换到下一页：cardLayout.next(frame)</span><br></pre></td></tr></table></figure><h2 id="网格布局"><a href="#网格布局" class="headerlink" title="网格布局"></a>网格布局</h2><h3 id="网格布局的创建"><a href="#网格布局的创建" class="headerlink" title="网格布局的创建"></a>网格布局的创建</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">创建一个网格布局：<span class="type">GridLayout</span> <span class="variable">gridLayout</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GridLayout</span>()</span><br></pre></td></tr></table></figure><h3 id="网格布局的方法"><a href="#网格布局的方法" class="headerlink" title="网格布局的方法"></a>网格布局的方法</h3><h4 id="Get-15"><a href="#Get-15" class="headerlink" title="Get"></a>Get</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">获取横向间距：gridLayout.getHgap()</span><br><span class="line">获取纵向间距：gridLayout.getVgap()</span><br><span class="line">获取布局行数：gridLayout.getRows()</span><br><span class="line">获取布局列数：：gridLayout.getColumns()</span><br></pre></td></tr></table></figure><h4 id="Set-15"><a href="#Set-15" class="headerlink" title="Set"></a>Set</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">设置横向间距：gridLayout.setHgap(间距)</span><br><span class="line">设置纵向间距：gridLayout.setVgap(间距)</span><br><span class="line">设置布局行数：gridLayout.setRows(行数)</span><br><span class="line">设置布局列数：：gridLayout.setColumns(列数)</span><br></pre></td></tr></table></figure><h1 id="面板"><a href="#面板" class="headerlink" title="面板"></a>面板</h1><h2 id="普通面板"><a href="#普通面板" class="headerlink" title="普通面板"></a>普通面板</h2><h3 id="面板的创建"><a href="#面板的创建" class="headerlink" title="面板的创建"></a>面板的创建</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">创建一个普通面板：<span class="type">JPanel</span> <span class="variable">panel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JPanel</span>()</span><br></pre></td></tr></table></figure><h3 id="面板的方法"><a href="#面板的方法" class="headerlink" title="面板的方法"></a>面板的方法</h3><h4 id="Get-16"><a href="#Get-16" class="headerlink" title="Get"></a>Get</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">获取面板宽度：panel.getWidth()</span><br><span class="line">获取面板高度：panel.getHeight()</span><br><span class="line">获取面板大小：panel.getSize()</span><br><span class="line">获取面板初始位置：panel.getLocation()</span><br><span class="line">获取面板初始位置和大小：panel.getBounds()</span><br><span class="line"></span><br><span class="line">获取面板名称：panel.getName()</span><br><span class="line">获取面板内部鼠标：panel.getCursor()</span><br><span class="line">获取面板背景颜色：panel.getBackground()</span><br><span class="line">获取面板布局：panel.getLayout()</span><br></pre></td></tr></table></figure><h4 id="Set-16"><a href="#Set-16" class="headerlink" title="Set"></a>Set</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">设置面板大小：panel.setSize(宽, 高)</span><br><span class="line">设置面板初始位置：panel.setLocation(x, y)</span><br><span class="line">设置面板初始位置和大小：panel.setBounds(x, y, 宽, 高)</span><br><span class="line"></span><br><span class="line">设置面板名称：panel.setName(字符串)</span><br><span class="line">设置面板内部鼠标：panel.setCursor(鼠标对象)</span><br><span class="line">设置面板背景颜色：panel.setBackground(颜色)</span><br><span class="line">设置面板布局：panel.setLayout(布局)</span><br><span class="line"></span><br><span class="line">设置面板的可见性：panel.setVisible(<span class="literal">true</span>)</span><br></pre></td></tr></table></figure><h4 id="Add-5"><a href="#Add-5" class="headerlink" title="Add"></a>Add</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">添加组件：panel.add(组件)</span><br><span class="line">添加组件：panel.add(组件, 约束)</span><br><span class="line">添加键盘监听器：panel.addKeyListener(键盘监听器对象)</span><br><span class="line">添加鼠标监听器：panel.addMouseListener(鼠标监听器对象)</span><br></pre></td></tr></table></figure><h2 id="滚动面板"><a href="#滚动面板" class="headerlink" title="滚动面板"></a>滚动面板</h2><h3 id="面板的创建-1"><a href="#面板的创建-1" class="headerlink" title="面板的创建"></a>面板的创建</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">创建一个滚动面板：<span class="type">JScrollPane</span> <span class="variable">scrollPane</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JScrollPane</span>()</span><br></pre></td></tr></table></figure><h3 id="面板的方法-1"><a href="#面板的方法-1" class="headerlink" title="面板的方法"></a>面板的方法</h3><h4 id="Add-6"><a href="#Add-6" class="headerlink" title="Add"></a>Add</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">添加面板：scrollPane.add(面板)</span><br></pre></td></tr></table></figure><h2 id="多面板"><a href="#多面板" class="headerlink" title="多面板"></a>多面板</h2><h3 id="面板的创建-2"><a href="#面板的创建-2" class="headerlink" title="面板的创建"></a>面板的创建</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">创建一个多面板：<span class="type">JTabbedPane</span> <span class="variable">pane</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JTabbedPane</span>()</span><br></pre></td></tr></table></figure><h3 id="面板的方法-2"><a href="#面板的方法-2" class="headerlink" title="面板的方法"></a>面板的方法</h3><h4 id="Add-7"><a href="#Add-7" class="headerlink" title="Add"></a>Add</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">添加面板：pane.addTab(标题, 面板)</span><br></pre></td></tr></table></figure><h2 id="分割面板"><a href="#分割面板" class="headerlink" title="分割面板"></a>分割面板</h2><h3 id="面板的创建-3"><a href="#面板的创建-3" class="headerlink" title="面板的创建"></a>面板的创建</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">创建一个分割面板：<span class="type">JSplitPane</span> <span class="variable">pane</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSplitPane</span>()</span><br></pre></td></tr></table></figure><h3 id="面板的方法-3"><a href="#面板的方法-3" class="headerlink" title="面板的方法"></a>面板的方法</h3><h4 id="Set-17"><a href="#Set-17" class="headerlink" title="Set"></a>Set</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">设置面板为水平分割：pane.setOrientation(JSplitPane.HORIZONTAL_SPLIT)</span><br><span class="line">设置面板为垂直分割：pane.setOrientation(JSplitPane.VERTICAL_SPLIT)</span><br><span class="line">设置面板的左侧组件：pane.setLeftComponent(组件)</span><br><span class="line">设置面板的右侧组件：pane.setRightComponent(组件)</span><br><span class="line">设置面板的顶端组件：pane.setTopComponent(组件)</span><br><span class="line">设置面板的底部组件：pane.setBottomComponent(组件)</span><br></pre></td></tr></table></figure><h1 id="菜单"><a href="#菜单" class="headerlink" title="菜单"></a>菜单</h1><h2 id="菜单栏"><a href="#菜单栏" class="headerlink" title="菜单栏"></a>菜单栏</h2><h3 id="下拉菜单栏"><a href="#下拉菜单栏" class="headerlink" title="下拉菜单栏"></a>下拉菜单栏</h3><h4 id="下拉菜单栏的创建"><a href="#下拉菜单栏的创建" class="headerlink" title="下拉菜单栏的创建"></a>下拉菜单栏的创建</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">创建一个下拉菜单栏：<span class="type">JMenuBar</span> <span class="variable">bar</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JMenuBar</span>()</span><br></pre></td></tr></table></figure><h4 id="下拉菜单栏的方法"><a href="#下拉菜单栏的方法" class="headerlink" title="下拉菜单栏的方法"></a>下拉菜单栏的方法</h4><h5 id="Add-8"><a href="#Add-8" class="headerlink" title="Add"></a>Add</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">添加菜单项目：bar.add(菜单项目)</span><br></pre></td></tr></table></figure><h3 id="弹出菜单栏"><a href="#弹出菜单栏" class="headerlink" title="弹出菜单栏"></a>弹出菜单栏</h3><h4 id="弹出菜单栏的创建"><a href="#弹出菜单栏的创建" class="headerlink" title="弹出菜单栏的创建"></a>弹出菜单栏的创建</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">创建一个下拉菜单栏：<span class="type">JPopupMenu</span> <span class="variable">menu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JPopupMenu</span>()</span><br></pre></td></tr></table></figure><h4 id="弹出菜单栏的方法"><a href="#弹出菜单栏的方法" class="headerlink" title="弹出菜单栏的方法"></a>弹出菜单栏的方法</h4><h5 id="Add-9"><a href="#Add-9" class="headerlink" title="Add"></a>Add</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">添加菜单项目：menu.add(菜单项目)</span><br></pre></td></tr></table></figure><h2 id="菜单项目"><a href="#菜单项目" class="headerlink" title="菜单项目"></a>菜单项目</h2><h3 id="普通菜单项目"><a href="#普通菜单项目" class="headerlink" title="普通菜单项目"></a>普通菜单项目</h3><h4 id="菜单项目的创建"><a href="#菜单项目的创建" class="headerlink" title="菜单项目的创建"></a>菜单项目的创建</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">创建一个菜单项目：<span class="type">JMenuItem</span> <span class="variable">menuItem</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JMenuItem</span>(名称)</span><br></pre></td></tr></table></figure><h4 id="菜单项目的方法"><a href="#菜单项目的方法" class="headerlink" title="菜单项目的方法"></a>菜单项目的方法</h4><h5 id="Get-17"><a href="#Get-17" class="headerlink" title="Get"></a>Get</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">获取菜单项目名称：menuItem.getName()</span><br><span class="line">获取菜单项目标签：menuItem.getLabel()</span><br><span class="line">获取菜单项目字体：menuItem.getFont()</span><br></pre></td></tr></table></figure><h5 id="Set-18"><a href="#Set-18" class="headerlink" title="Set"></a>Set</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">设置菜单项目名称：menuItem.setName(字符串)</span><br><span class="line">设置菜单项目标签：menuItem.setLabel(标签)</span><br><span class="line">设置菜单项目字体：menuItem.setFont(字体)</span><br><span class="line">设置菜单项目快捷键：menuItem.setShortcut(<span class="keyword">new</span> <span class="title class_">MenuShortcut</span>(字符))</span><br><span class="line">设置菜单项目快捷键：menuItem.setShortcut(<span class="keyword">new</span> <span class="title class_">MenuShortcut</span>(字符, <span class="literal">true</span>))</span><br></pre></td></tr></table></figure><h5 id="Add-10"><a href="#Add-10" class="headerlink" title="Add"></a>Add</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">添加监听器[点击]：menuItem.addActionListener(监听器)</span><br></pre></td></tr></table></figure><h3 id="勾选菜单项目"><a href="#勾选菜单项目" class="headerlink" title="勾选菜单项目"></a>勾选菜单项目</h3><h4 id="菜单项目的创建-1"><a href="#菜单项目的创建-1" class="headerlink" title="菜单项目的创建"></a>菜单项目的创建</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">创建一个菜单项目：<span class="type">JCheckboxMenuItem</span> <span class="variable">checkboxMenuItem</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JCheckboxMenuItem</span>(名称)</span><br></pre></td></tr></table></figure><h4 id="菜单项目的方法-1"><a href="#菜单项目的方法-1" class="headerlink" title="菜单项目的方法"></a>菜单项目的方法</h4><h5 id="Get-18"><a href="#Get-18" class="headerlink" title="Get"></a>Get</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">获取菜单项目名称：checkboxMenuItem.getName()</span><br><span class="line">获取菜单项目标签：checkboxMenuItem.getLabel()</span><br><span class="line">获取菜单项目字体：checkboxMenuItem.getFont()</span><br><span class="line">获取菜单项目状态：checkboxMenuItem.getState()</span><br></pre></td></tr></table></figure><h5 id="Set-19"><a href="#Set-19" class="headerlink" title="Set"></a>Set</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">设置菜单项目名称：checkboxMenuItem.setName(字符串)</span><br><span class="line">设置菜单项目标签：checkboxMenuItem.setLabel(标签)</span><br><span class="line">设置菜单项目字体：checkboxMenuItem.setFont(字体)</span><br><span class="line">设置菜单项目状态：checkboxMenuItem.setState(<span class="literal">true</span>)</span><br><span class="line">设置菜单项目快捷键：checkboxMenuItem.setShortcut(<span class="keyword">new</span> <span class="title class_">MenuShortcut</span>(字符))</span><br><span class="line">设置菜单项目快捷键：checkboxMenuItem.setShortcut(<span class="keyword">new</span> <span class="title class_">MenuShortcut</span>(字符, <span class="literal">true</span>))</span><br></pre></td></tr></table></figure><h5 id="Add-11"><a href="#Add-11" class="headerlink" title="Add"></a>Add</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">添加监听器[点击]：checkboxMenuItem.addActionListener(监听器)</span><br></pre></td></tr></table></figure><h1 id="对话框"><a href="#对话框" class="headerlink" title="对话框"></a>对话框</h1><h2 id="普通对话框"><a href="#普通对话框" class="headerlink" title="普通对话框"></a>普通对话框</h2><h3 id="对话框的创建"><a href="#对话框的创建" class="headerlink" title="对话框的创建"></a>对话框的创建</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">创建一个对话框：<span class="type">JDialog</span> <span class="variable">dialog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JDialog</span>(父窗口/父对话框, 文本内容, <span class="literal">true</span>)</span><br></pre></td></tr></table></figure><h3 id="对话框的方法"><a href="#对话框的方法" class="headerlink" title="对话框的方法"></a>对话框的方法</h3><h4 id="Get-19"><a href="#Get-19" class="headerlink" title="Get"></a>Get</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">获取对话框宽度：dialog.getWidth()</span><br><span class="line">获取对话框高度：dialog.getHeight()</span><br><span class="line">获取对话框大小：dialog.getSize()</span><br><span class="line">获取对话框初始位置：dialog.getLocation()</span><br><span class="line">获取对话框初始位置和大小：dialog.getBounds()</span><br><span class="line"></span><br><span class="line">获取对话框标题：dialog.getTitle()</span><br><span class="line">获取对话框内部鼠标：dialog.getCursor()</span><br><span class="line">获取对话框背景颜色：dialog.getBackground()</span><br><span class="line">获取对话框布局：dialog.getLayout()</span><br></pre></td></tr></table></figure><h4 id="Set-20"><a href="#Set-20" class="headerlink" title="Set"></a>Set</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">设置对话框大小：dialog.setSize(宽, 高)</span><br><span class="line">设置对话框初始位置：dialog.setLocation(x, y)</span><br><span class="line">设置对话框初始位置和大小：dialog.setBounds(x, y, 宽, 高)</span><br><span class="line"></span><br><span class="line">设置对话框标题：dialog.setTitle(<span class="string">&quot;我是标题&quot;</span>)</span><br><span class="line">设置对话框内部鼠标：dialog.setCursor(鼠标对象)</span><br><span class="line">设置对话框背景颜色：dialog.setBackground(颜色)</span><br><span class="line">设置对话框布局：dialog.setLayout(布局)</span><br><span class="line"></span><br><span class="line">设置对话框大小是否固定：dialog.setResizable(<span class="literal">true</span>)</span><br><span class="line">设置对话框是否始终展示在最前面：dialog.setAlwaysOnTop(<span class="literal">true</span>)</span><br><span class="line">设置对话框的可见性：dialog.setVisible(<span class="literal">true</span>)</span><br></pre></td></tr></table></figure><h4 id="Add-12"><a href="#Add-12" class="headerlink" title="Add"></a>Add</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">添加组件：dialog.add(组件)</span><br><span class="line">添加组件：dialog.add(组件, 约束)</span><br><span class="line">添加窗口监听器：dialog.addWindowListener(窗口监听器对象)</span><br><span class="line">添加键盘监听器：dialog.addKeyListener(键盘监听器对象)</span><br><span class="line">添加鼠标监听器：dialog.addMouseListener(鼠标监听器对象)</span><br></pre></td></tr></table></figure><h2 id="文件对话框"><a href="#文件对话框" class="headerlink" title="文件对话框"></a>文件对话框</h2><h3 id="对话框的创建-1"><a href="#对话框的创建-1" class="headerlink" title="对话框的创建"></a>对话框的创建</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">创建一个对话框[打开文件]：<span class="type">JFileDialog</span> <span class="variable">dialog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JFileDialog</span>(父窗口/父对话框, <span class="string">&quot;请选择一个文件&quot;</span>, FileDialog.LOAD)</span><br><span class="line">创建一个对话框[保存文件]：<span class="type">JFileDialog</span> <span class="variable">dialog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JFileDialog</span>(父窗口/父对话框, <span class="string">&quot;请选择一个文件&quot;</span>, FileDialog.SAVE)</span><br></pre></td></tr></table></figure><h3 id="对话框的方法-1"><a href="#对话框的方法-1" class="headerlink" title="对话框的方法"></a>对话框的方法</h3><h4 id="Get-20"><a href="#Get-20" class="headerlink" title="Get"></a>Get</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">获取对话框宽度：dialog.getWidth()</span><br><span class="line">获取对话框高度：dialog.getHeight()</span><br><span class="line">获取对话框大小：dialog.getSize()</span><br><span class="line">获取对话框初始位置：dialog.getLocation()</span><br><span class="line">获取对话框初始位置和大小：dialog.getBounds()</span><br><span class="line"></span><br><span class="line">获取对话框标题：dialog.getTitle()</span><br><span class="line">获取对话框内部鼠标：dialog.getCursor()</span><br><span class="line">获取对话框背景颜色：dialog.getBackground()</span><br><span class="line">获取对话框布局：dialog.getLayout()</span><br><span class="line">    </span><br><span class="line">获取选择的文件的目录：dialog.getDirectory()</span><br><span class="line">获取选择的文件的名称：dialog.getFile()</span><br></pre></td></tr></table></figure><h4 id="Set-21"><a href="#Set-21" class="headerlink" title="Set"></a>Set</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">设置对话框大小：dialog.setSize(宽, 高)</span><br><span class="line">设置对话框初始位置：dialog.setLocation(x, y)</span><br><span class="line">设置对话框初始位置和大小：dialog.setBounds(x, y, 宽, 高)</span><br><span class="line"></span><br><span class="line">设置对话框标题：dialog.setTitle(<span class="string">&quot;我是标题&quot;</span>)</span><br><span class="line">设置对话框内部鼠标：dialog.setCursor(鼠标对象)</span><br><span class="line">设置对话框背景颜色：dialog.setBackground(颜色)</span><br><span class="line">设置对话框布局：dialog.setLayout(布局)</span><br><span class="line"></span><br><span class="line">设置对话框大小是否固定：dialog.setResizable(<span class="literal">true</span>)</span><br><span class="line">设置对话框是否始终展示在最前面：dialog.setAlwaysOnTop(<span class="literal">true</span>)</span><br><span class="line">设置对话框的可见性：dialog.setVisible(<span class="literal">true</span>)</span><br></pre></td></tr></table></figure><h4 id="Add-13"><a href="#Add-13" class="headerlink" title="Add"></a>Add</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">添加组件：dialog.add(组件)</span><br><span class="line">添加组件：dialog.add(组件, 约束)</span><br><span class="line">添加窗口监听器：dialog.addWindowListener(窗口监听器对象)</span><br><span class="line">添加键盘监听器：dialog.addKeyListener(键盘监听器对象)</span><br><span class="line">添加鼠标监听器：dialog.addMouseListener(鼠标监听器对象)</span><br></pre></td></tr></table></figure><h2 id="预设对话框"><a href="#预设对话框" class="headerlink" title="预设对话框"></a>预设对话框</h2><h3 id="消息对话框"><a href="#消息对话框" class="headerlink" title="消息对话框"></a>消息对话框</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JOptionPane.showMessageDialog(父窗口/父组件, 消息, 类型)</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">字段</th><th align="center">类型</th></tr></thead><tbody><tr><td align="center"><code>PLAIN_MESSAGE</code></td><td align="center">文本框</td></tr><tr><td align="center"><code>INFORMATION_MESSAGE</code></td><td align="center">普通提示框（默认）</td></tr><tr><td align="center"><code>WARNING_MESSAGE</code></td><td align="center">警示框</td></tr><tr><td align="center"><code>ERROR_MESSAGE</code></td><td align="center">错误提示框</td></tr><tr><td align="center"><code>QUESTION_MESSAGE</code></td><td align="center">提问框</td></tr></tbody></table><h3 id="选择对话框"><a href="#选择对话框" class="headerlink" title="选择对话框"></a>选择对话框</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JOptionPane.showConfirmDialog(父窗口/父组件, 消息, 类型)</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">字段</th><th align="center">类型</th></tr></thead><tbody><tr><td align="center"><code>YES_NO_OPTION</code></td><td align="center">是，否</td></tr><tr><td align="center"><code>YES_NO_CANCEL_OPTION</code></td><td align="center">是，否，取消</td></tr></tbody></table><h3 id="自定义选择对话框"><a href="#自定义选择对话框" class="headerlink" title="自定义选择对话框"></a>自定义选择对话框</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">JOptionPane.showOptionDialog(父窗口/父组件, 消息, 选项类型, 消息类型, 图标)</span><br><span class="line">JOptionPane.showOptionDialog(父窗口/父组件, 消息, 选项类型, 消息类型, 图标, Object[], 初始值)</span><br></pre></td></tr></table></figure><h3 id="输入对话框"><a href="#输入对话框" class="headerlink" title="输入对话框"></a>输入对话框</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">JOptionPane.showInputDialog(父窗口/父组件, 消息, 选项类型, 消息类型, 图标)</span><br><span class="line">JOptionPane.showInputDialog(父窗口/父组件, 消息, 选项类型, 消息类型, 图标, Object[], 初始值)</span><br></pre></td></tr></table></figure><h1 id="Robot"><a href="#Robot" class="headerlink" title="Robot"></a>Robot</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Robot</span> <span class="variable">robot</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Robot</span>() <span class="comment">// 创建</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">robot.delay(毫秒) <span class="comment">// 暂停执行指定的毫秒数</span></span><br><span class="line"></span><br><span class="line">robot.mouseMove(x, y) <span class="comment">// 将鼠标移动到指定的屏幕坐标 (x, y)</span></span><br><span class="line">robot.mousePress(鼠标按键) <span class="comment">// 模拟按下鼠标事件</span></span><br><span class="line">robot.mouseRelease(鼠标按键) <span class="comment">// 模拟释放鼠标事件</span></span><br><span class="line">robot.mouseWheel(滚动单位) <span class="comment">// 模拟滚动鼠标事件（正值向上，负值向下）</span></span><br><span class="line"></span><br><span class="line">robot.keyPress(键盘按键) <span class="comment">// 模拟按下键盘事件</span></span><br><span class="line">robot.keyRelease(键盘按键) <span class="comment">// 模拟释放键盘事件</span></span><br><span class="line"></span><br><span class="line">robot.createScreenCapture(<span class="keyword">new</span> <span class="title class_">Rectangle</span>(x, y, width, height)) <span class="comment">// 捕获指定区域的屏幕图像</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Color</span>(robot.createScreenCapture(<span class="keyword">new</span> <span class="title class_">Rectangle</span>(x, y, <span class="number">1</span>, <span class="number">1</span>)).getRGB(<span class="number">0</span>, <span class="number">0</span>)) <span class="comment">// 获取指定坐标的颜色</span></span><br></pre></td></tr></table></figure><ul><li><p>关于<code>robot.mouseMove</code>的坐标获取，可以使用下面的代码进行调试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Robot</span> <span class="variable">robot</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Robot</span>();</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    Thread.sleep(<span class="number">500</span>);</span><br><span class="line">    <span class="type">Point</span> <span class="variable">mouseLocation</span> <span class="operator">=</span> MouseInfo.getPointerInfo().getLocation();</span><br><span class="line">    System.out.println(<span class="string">&quot;当前鼠标位置: &quot;</span> + mouseLocation.x + <span class="string">&quot;, &quot;</span> + mouseLocation.y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="鼠标按键"><a href="#鼠标按键" class="headerlink" title="鼠标按键"></a>鼠标按键</h2><table><thead><tr><th align="center">鼠标按键</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>InputEvent.BUTTON1_DOWN_MASK</code></td><td align="center">鼠标左键</td></tr><tr><td align="center"><code>InputEvent.BUTTON3_DOWN_MASK</code></td><td align="center">鼠标中键</td></tr><tr><td align="center"><code>InputEvent.BUTTON2_DOWN_MASK</code></td><td align="center">鼠标右键</td></tr></tbody></table><h2 id="键盘按键"><a href="#键盘按键" class="headerlink" title="键盘按键"></a>键盘按键</h2><h3 id="字母键"><a href="#字母键" class="headerlink" title="字母键"></a>字母键</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">KeyEvent.getExtendedKeyCodeForChar(字母)</span><br></pre></td></tr></table></figure><h3 id="数字键"><a href="#数字键" class="headerlink" title="数字键"></a>数字键</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">KeyEvent.getExtendedKeyCodeForChar(数字)</span><br></pre></td></tr></table></figure><h3 id="功能键"><a href="#功能键" class="headerlink" title="功能键"></a>功能键</h3><table><thead><tr><th align="center">功能键</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>KeyEvent.VK_F1</code></td><td align="center">F1</td></tr><tr><td align="center"><code>KeyEvent.VK_F2</code></td><td align="center">F2</td></tr><tr><td align="center">…</td><td align="center">…</td></tr><tr><td align="center"><code>KeyEvent.VK_F12</code></td><td align="center">F12</td></tr></tbody></table><h3 id="特殊键"><a href="#特殊键" class="headerlink" title="特殊键"></a>特殊键</h3><table><thead><tr><th align="center">键码</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>KeyEvent.VK_ENTER</code></td><td align="center">回车键</td></tr><tr><td align="center"><code>KeyEvent.VK_ESCAPE</code></td><td align="center">ESC 键</td></tr><tr><td align="center"><code>KeyEvent.VK_SPACE</code></td><td align="center">空格键</td></tr><tr><td align="center"><code>KeyEvent.VK_TAB</code></td><td align="center">Tab 键</td></tr><tr><td align="center"><code>KeyEvent.VK_BACK_SPACE</code></td><td align="center">退格键</td></tr><tr><td align="center"><code>KeyEvent.VK_DELETE</code></td><td align="center">删除键</td></tr><tr><td align="center"><code>KeyEvent.VK_SHIFT</code></td><td align="center">Shift 键</td></tr><tr><td align="center"><code>KeyEvent.VK_CONTROL</code></td><td align="center">Ctrl 键</td></tr><tr><td align="center"><code>KeyEvent.VK_ALT</code></td><td align="center">Alt 键</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 函数 </tag>
            
            <tag> 属性 </tag>
            
            <tag> 组件 </tag>
            
            <tag> 监听器 </tag>
            
            <tag> GUI </tag>
            
            <tag> 布局 </tag>
            
            <tag> 面板 </tag>
            
            <tag> 菜单 </tag>
            
            <tag> 对话框 </tag>
            
            <tag> Robot </tag>
            
            <tag> 窗口 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue</title>
      <link href="/2024/04/05/04%20Vue/"/>
      <url>/2024/04/05/04%20Vue/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h1><blockquote><p>Vue 是一个用于构建用户界面的渐进式 JavaScript 框架。它可以用来创建单页面应用或构建复杂的前端界面</p></blockquote><h1 id="创建一个-Vue-项目"><a href="#创建一个-Vue-项目" class="headerlink" title="创建一个 Vue 项目"></a>创建一个 Vue 项目</h1><h2 id="安装-Vue"><a href="#安装-Vue" class="headerlink" title="安装 Vue"></a>安装 Vue</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br></pre></td></tr></table></figure><p>验证是否安装成功</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue --version</span><br></pre></td></tr></table></figure><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create [项目名称]</span><br></pre></td></tr></table></figure><h2 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h2><ol><li><p>进入项目根目录<code>cd [项目名称]</code></p></li><li><p>运行<code>npm run serve</code>启动项目</p></li></ol><h2 id="项目格式"><a href="#项目格式" class="headerlink" title="项目格式"></a>项目格式</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">// HTML 代码</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">// JavaScript 代码</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">// CSS 代码</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h1 id="插入文本"><a href="#插入文本" class="headerlink" title="插入文本"></a>插入文本</h1><blockquote><p>用于在模板中显示数据</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;&#123;&#123; str &#125;&#125;&lt;/div&gt; // 插入文本</span><br><span class="line">    &lt;span&gt;&#123;&#123; str === &#x27;&#x27; ? &#x27;字符串为空&#x27; : str &#125;&#125;&lt;/span&gt; // 支持 JavaScript 单个表达式</span><br><span class="line">    &lt;span&gt;&#123;&#123; ++state.count &#125;&#125;&lt;/span&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref, reactive &#125; from &quot;vue&quot;;</span><br><span class="line"></span><br><span class="line">const str = ref(&#x27;hello world&#x27;) // 声明变量</span><br><span class="line">const state = reactive(&#123; // 创建响应式对象的值</span><br><span class="line">    count: 0,</span><br><span class="line">    message: &#x27;Hello&#x27;</span><br><span class="line">&#125;);</span><br><span class="line">console.log(str.value) // 获取变量</span><br><span class="line">console.log(state.message) // 获取变量</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><code>ref</code>和<code>reactive</code>的区别</p><ul><li><code>ref</code>：用于创建一个响应式的单一值，适合基本数据类型；<code>ref</code>返回一个对象，其中的值通过<code>.value</code>访问</li><li><code>reactive</code>：用于创建一个响应式对象，适合复杂数据结构；<code>reactive</code> 直接返回一个可响应的对象</li></ul><h1 id="插入-HTML"><a href="#插入-HTML" class="headerlink" title="插入 HTML"></a>插入 HTML</h1><blockquote><p>将 HTML 字符串插入到页面中，允许动态渲染和显示 HTML 内容</p></blockquote><p><code>&#123;&#123; &#125;&#125;</code>会将数据解释为普通文本，而非 HTML 代码</p><p>为了输出真正的 HTML，需要使用<code>v-html</code>指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div v-html=&quot;htmlContent&quot;&gt; // 插入 HTML</span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &quot;vue&quot;;</span><br><span class="line"></span><br><span class="line">const htmlContent = ref(&#x27;&lt;p&gt;这是一段动态生成的 HTML&lt;/p&gt;&#x27;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h1 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h1><blockquote><p>根据特定条件控制某些元素在 DOM 中的显示或隐藏</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div v-show=true&gt;&lt;/div&gt; // 为真时渲染，只渲染自身</span><br><span class="line">    &lt;div v-if=false&gt;&lt;/div&gt; // 为假时，自身以及其内部都不会渲染</span><br><span class="line">    &lt;p v-else&gt;&lt;/p&gt; // 配合 v-if 一起使用</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p><code>v-if</code>有更高的切换开销，而<code>v-show</code>有更高的初始渲染开销</p><p>因此，如果需要非常频繁地切换，则使用<code>v-show</code>较好；如果在运行时条件很少改变，则使用<code>v-if</code>较好</p><h1 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h1><blockquote><p>根据数组或对象动态生成一组 DOM 元素，方便展示重复的数据项</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div v-for=&quot;(item, index) in list&quot; :key=&quot;index&quot;&gt; // 列表渲染</span><br><span class="line">        &lt;span&gt;</span><br><span class="line">            下标：&#123;&#123; index &#125;&#125;</span><br><span class="line">        值：&#123;&#123; item &#125;&#125;</span><br><span class="line">        &lt;/span&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &quot;vue&quot;;</span><br><span class="line"></span><br><span class="line">const list = ref([1, 2, 3, 4, 5])</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h1 id="动态绑定"><a href="#动态绑定" class="headerlink" title="动态绑定"></a>动态绑定</h1><blockquote><p>将 Vue 实例中的数据与 DOM 元素的属性或内容关联起来，实现数据和视图的自动同步</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div v-bind:id=&quot;id&quot; :class=str&gt; // 动态绑定</span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &quot;vue&quot;;</span><br><span class="line"></span><br><span class="line">const str = ref(&#x27;hello world&#x27;), id = ref(&quot;0001&quot;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote><p><code>:</code>是<code>v-bind:</code>的简写形式</p></blockquote><h1 id="双向绑定"><a href="#双向绑定" class="headerlink" title="双向绑定"></a>双向绑定</h1><blockquote><p>实现数据与视图之间的自动同步</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;input v-model=&quot;str&quot; type=&quot;text&quot;&gt; // 双向绑定</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &quot;vue&quot;;</span><br><span class="line"></span><br><span class="line">const str = ref(&#x27;hello world&#x27;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h2><p><strong>.lazy</strong></p><p>在默认情况下，<code>v-model</code>在每次<code>input</code>事件触发后将输入框的值与数据进行同步</p><p>可以添加<code>lazy</code>修饰符，从而转为在<code>change</code>事件之后进行同步</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;input v-model.lazy=&quot;str&quot; type=&quot;text&quot;&gt; // 双向绑定</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &quot;vue&quot;;</span><br><span class="line"></span><br><span class="line">const str = ref(&#x27;hello world&#x27;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>.trim</strong></p><p>自动过滤用户输入的首尾空白字符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;input v-model.trim=&quot;str&quot; type=&quot;text&quot;&gt; // 双向绑定</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &quot;vue&quot;;</span><br><span class="line"></span><br><span class="line">const str = ref(&#x27;hello world&#x27;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h1 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h1><blockquote><p>响应用户的交互，通过绑定事件处理函数来执行特定的操作，增强用户体验和应用的互动性</p></blockquote><p>事件命名同<code>DOM</code>事件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;button v-on:click=&quot;cnt++&quot;&gt;Add 1&lt;/button&gt; // 事件监听</span><br><span class="line">    &lt;div @click=&quot;test&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div @click=&quot;greet&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div @click=&quot;say(&quot;消息&quot;)&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &quot;vue&quot;;</span><br><span class="line"></span><br><span class="line">const cnt = ref(0)</span><br><span class="line"></span><br><span class="line">function test() &#123;</span><br><span class="line">    console.log(&quot;hello world&quot;)</span><br><span class="line">&#125;</span><br><span class="line">function greet(e) &#123; // e 是原生 DOM 事件</span><br><span class="line">    if(e) &#123;</span><br><span class="line">        alert(e.target.tagName)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">function say(message) &#123;</span><br><span class="line">    alert(message)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote><p><code>@</code>是<code>v-on:</code>的简写形式</p></blockquote><h1 id="侦听器"><a href="#侦听器" class="headerlink" title="侦听器"></a>侦听器</h1><blockquote><p>监控 Vue 实例中的数据变化，并在数据发生变化时执行特定的回调函数</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref, watch &#125; from &quot;vue&quot;;</span><br><span class="line"></span><br><span class="line">const str = ref(&#x27;hello world&#x27;)</span><br><span class="line"></span><br><span class="line">function check() &#123;</span><br><span class="line">    console.log(str.value)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">watch(str, check) // 在 str 更新时调用 check 方法</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref, watch &#125; from &quot;vue&quot;;</span><br><span class="line"></span><br><span class="line">const str = ref(&#x27;hello world&#x27;)</span><br><span class="line"></span><br><span class="line">function check(newVal, oldVal) &#123; // 还可以获取到新旧的值</span><br><span class="line">    console.log(newVal, oldVal)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">watch(str, check)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref, watch &#125; from &quot;vue&quot;;</span><br><span class="line"></span><br><span class="line">const str = ref(&#123;</span><br><span class="line">    text: &#x27;Hello, World!&#x27;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">function check(newVal, oldVal) &#123;</span><br><span class="line">    console.log(newVal, oldVal)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">watch(str, check, &#123;deep: true&#125;) // 深度侦听</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h1 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h1><blockquote><p>组件是 Vue 应用的基本构建块，封装了特定功能和界面的独立、可重用的代码片段</p><p>每个组件可以拥有自己的数据、模板、样式和生命周期方法，便于组织和管理复杂的用户界面</p><p>组件化开发提高了代码的可维护性和复用性</p></blockquote><p>一个组件就是一个<code>.vue</code>文件（子组件）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;h3&gt;单文件组件&lt;/h3&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; defineOptions &#125; from &#x27;vue&#x27;;</span><br><span class="line"></span><br><span class="line">defineOptions(&#123;</span><br><span class="line">    name: &quot;MyComponent&quot; // 为组件命名</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">h3 &#123;</span><br><span class="line">    color: red;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="加载组件"><a href="#加载组件" class="headerlink" title="加载组件"></a>加载组件</h2><ol><li><p>引入组件：<code>import MyComponentVue from &#39;./components/MyComponent.vue&#39;</code></p></li><li><p>挂载组件：<code>components: &#123; MyComponentVue &#125;</code></p></li><li><p>显示组件：<code>&lt;my-componentVue/&gt;</code></p></li></ol><h2 id="组件交互"><a href="#组件交互" class="headerlink" title="组件交互"></a>组件交互</h2><h3 id="父组件-子组件"><a href="#父组件-子组件" class="headerlink" title="父组件 -&gt; 子组件"></a>父组件 -&gt; 子组件</h3><p>子组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; inject &#125; from &quot;vue&quot;</span><br><span class="line">    </span><br><span class="line">const val = inject(&quot;key&quot;); // 接收数据</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>父组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; provide &#125; from &quot;vue&quot;</span><br><span class="line">    </span><br><span class="line">provide(&quot;key&quot;, &quot;val&quot;); // 发送数据</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="子组件-父组件"><a href="#子组件-父组件" class="headerlink" title="子组件 -&gt; 父组件"></a>子组件 -&gt; 父组件</h3><p>子组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;h3&gt;单文件组件&lt;/h3&gt;</span><br><span class="line">    &lt;button @click=&quot;sendHandle&quot;&gt;发送数据&lt;/button&gt; // 发送数据</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; defineEmits &#125; from &#x27;vue&#x27;;</span><br><span class="line"></span><br><span class="line">const emit = defineEmits();</span><br><span class="line"></span><br><span class="line">function sendHandle() &#123;</span><br><span class="line">    emit(&quot;onCustom&quot;, &quot;数据&quot;); // 触发事件 onCustom</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">h3 &#123;</span><br><span class="line">    color: red;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>父组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;my-componentVue @onCustom=&quot;getData&quot;/&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import MyComponentVue from &#x27;./components/MyComponent.vue&#x27;;</span><br><span class="line">import &#123; defineEmits &#125; from &#x27;vue&#x27;;</span><br><span class="line"></span><br><span class="line">const emit = defineEmits();</span><br><span class="line"></span><br><span class="line">function getData(data) &#123;</span><br><span class="line">    console.log(data); // 接收数据</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="组件生命周期"><a href="#组件生命周期" class="headerlink" title="组件生命周期"></a>组件生命周期</h2><ol><li>**<code>created</code>**：【创建】组件实例被创建后调用，此时数据观测已设置，但 DOM 还未挂载</li><li>**<code>mounted</code>**：【渲染】组件挂载到 DOM 后调用，此时可以访问到 DOM 元素</li><li>**<code>updated</code>**：【更新】组件数据更新后调用，DOM 也已更新</li><li>**<code>destroyed</code>**：【卸载】组件销毁前调用，可以在这里执行清理工作</li></ol><h3 id="钩子函数"><a href="#钩子函数" class="headerlink" title="钩子函数"></a>钩子函数</h3><p>可以通过在钩子函数（生命周期钩子）前面加上<code>on</code>来访问</p><table><thead><tr><th align="center">钩子函数</th><th align="center">访问方式</th></tr></thead><tbody><tr><td align="center"><code>beforeCreate</code></td><td align="center">[不再需要]</td></tr><tr><td align="center"><code>created</code></td><td align="center">[不再需要]</td></tr><tr><td align="center"><code>beforeMount</code></td><td align="center"><code>onBeforeMount</code></td></tr><tr><td align="center"><code>mounted</code></td><td align="center"><code>onMounted</code></td></tr><tr><td align="center"><code>beforeUpdate</code></td><td align="center"><code>onBeforeUpdate</code></td></tr><tr><td align="center"><code>updated</code></td><td align="center"><code>onUpdated</code></td></tr><tr><td align="center"><code>beforeUnmount</code></td><td align="center"><code>onBeforeUnmount</code></td></tr><tr><td align="center"><code>unmounted</code></td><td align="center"><code>onUnmounted</code></td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">onMounted(() =&gt; &#123;</span><br><span class="line">    // ...</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h1 id="网络请求"><a href="#网络请求" class="headerlink" title="网络请求"></a>网络请求</h1><h2 id="Axios"><a href="#Axios" class="headerlink" title="Axios"></a>Axios</h2><blockquote><p>Axios 是一个基于 Promise 的 HTTP 客户端，用于浏览器和 Node.js 中发送 HTTP 请求</p><p>它提供了简洁的 API，支持请求和响应拦截、取消请求、自动转换 JSON 数据等功能，非常适合与 RESTful API 进行交互</p></blockquote><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save axios</span><br></pre></td></tr></table></figure><h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><p><strong>组件中引入</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span></span><br></pre></td></tr></table></figure><p><strong>全局引入</strong></p><p>[<code>main.js</code>]</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>);</span><br><span class="line">app.<span class="property">config</span>.<span class="property">globalProperties</span>.<span class="property">$axios</span> = axios</span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><p>在组件中调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$axios</span></span><br></pre></td></tr></table></figure><h2 id="网络请求封装"><a href="#网络请求封装" class="headerlink" title="网络请求封装"></a>网络请求封装</h2><h3 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">get</span>(<span class="params">url</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> res = <span class="keyword">await</span> axios.<span class="title function_">get</span>(url, &#123;</span><br><span class="line">            <span class="attr">withCredentials</span>: <span class="literal">true</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span> res.<span class="property">data</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;发送数据时出错：&#x27;</span>, e)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SET"><a href="#SET" class="headerlink" title="SET"></a>SET</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">post</span>(<span class="params">url, data</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> res = <span class="keyword">await</span> axios.<span class="title function_">post</span>(url, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data), &#123;</span><br><span class="line">            <span class="attr">headers</span>: &#123;</span><br><span class="line">                <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">withCredentials</span>: <span class="literal">true</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span> res.<span class="property">data</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;发送数据时出错：&#x27;</span>, e)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="网络请求调用"><a href="#网络请求调用" class="headerlink" title="网络请求调用"></a>网络请求调用</h2><h3 id="GET-1"><a href="#GET-1" class="headerlink" title="GET"></a>GET</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> url = <span class="string">&#x27;&#x27;</span>; <span class="comment">// 替换为实际 URL</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">get</span>(url); <span class="comment">// 忽略异常情况的调用形式</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">get</span>(url).<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (data) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;获取到的数据：&#x27;</span>, data);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;没有获取到数据&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;处理请求时出错：&#x27;</span>, error);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><h3 id="SET-1"><a href="#SET-1" class="headerlink" title="SET"></a>SET</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> url = <span class="string">&#x27;&#x27;</span>; <span class="comment">// 替换为实际 URL</span></span><br><span class="line"><span class="keyword">const</span> data = &#123; <span class="attr">key</span>: <span class="string">&#x27;value&#x27;</span> &#125;; <span class="comment">// 替换为实际 data</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">post</span>(url, data); <span class="comment">// 忽略异常情况的调用形式</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">post</span>(url, data).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (response) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务器返回的数据：&#x27;</span>, response);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;没有返回数据&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;处理请求时出错：&#x27;</span>, error);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><h2 id="跨域解决方案"><a href="#跨域解决方案" class="headerlink" title="跨域解决方案"></a>跨域解决方案</h2><p>跨域错误提示信息</p><p><img src="/../images/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/04%20Vue-1.jpg"></p><p>跨域解决方案</p><ol><li><p>后端解决：<code>cors</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> &#123;</span><br><span class="line">        registry.addMapping(<span class="string">&quot;/**&quot;</span>) <span class="comment">// 允许所有路径</span></span><br><span class="line">                .allowedOrigins(<span class="string">&quot;http://example.com&quot;</span>) <span class="comment">// 允许特定来源</span></span><br><span class="line">                .allowedMethods(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;POST&quot;</span>, <span class="string">&quot;PUT&quot;</span>, <span class="string">&quot;DELETE&quot;</span>); <span class="comment">// 允许的方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>前端解决：<code>proxy</code></p><p>[<code>vue.config.js</code>]</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">devServer</span>: &#123;</span><br><span class="line">        <span class="attr">proxy</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;/api&#x27;</span>: &#123;</span><br><span class="line">                <span class="attr">target</span>: <span class="string">&#x27;&lt;url&gt;&#x27;</span>,</span><br><span class="line">                <span class="attr">changeOrigin</span>: <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol><h1 id="状态管理"><a href="#状态管理" class="headerlink" title="状态管理"></a>状态管理</h1><h2 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h2><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save vuex</span><br></pre></td></tr></table></figure><h3 id="引入-1"><a href="#引入-1" class="headerlink" title="引入"></a>引入</h3><ol><li><p>配置<code>Vuex</code>文件</p><p>[<code>stores/index.js</code>]</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">createStore</span>(&#123;</span><br><span class="line">    <span class="attr">state</span>: &#123;</span><br><span class="line">        <span class="attr">cnt</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>在主文件中引入<code>Vuex</code></p><p>[<code>main.js</code>]</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line">app.<span class="title function_">use</span>(store)</span><br></pre></td></tr></table></figure></li><li><p>在组件中读取状态</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;p&gt;cnt：&#123;&#123; $store.state.cnt &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;p&gt;cnt：&#123;&#123; cnt &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; computed &#125; from &#x27;vue&#x27;;</span><br><span class="line">import &#123; useStore &#125; from &#x27;vuex&#x27;;</span><br><span class="line"></span><br><span class="line">const store = useStore();</span><br><span class="line">const cnt = computed(() =&gt; store.state.cnt);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="状态管理核心"><a href="#状态管理核心" class="headerlink" title="状态管理核心"></a>状态管理核心</h2><h3 id="Getter"><a href="#Getter" class="headerlink" title="Getter"></a>Getter</h3><blockquote><p>用于从 Vuex 状态中派生出计算属性</p><p>可以获取状态，并进行计算或过滤，返回所需的数据</p></blockquote><p>[<code>stores/index.js</code>]</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">createStore</span>(&#123;</span><br><span class="line">    <span class="attr">state</span>: &#123;</span><br><span class="line">        <span class="attr">cnt</span>: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">getters</span>: &#123;</span><br><span class="line">        <span class="title function_">getCount</span>(<span class="params">state</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> state.<span class="property">cnt</span> &gt; <span class="number">0</span> ? state.<span class="property">cnt</span> : <span class="string">&quot;cnt &lt;= 0&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; computed &#125; from &#x27;vue&#x27;;</span><br><span class="line">import &#123; useStore &#125; from &#x27;vuex&#x27;;</span><br><span class="line"></span><br><span class="line">const store = useStore();</span><br><span class="line">const getCount = computed(() =&gt; store.getters.getCount);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="Mutation"><a href="#Mutation" class="headerlink" title="Mutation"></a>Mutation</h3><blockquote><p>用于同步修改 Vuex 的状态</p><p>每个 mutation 都有一个类型（字符串）和一个回调函数，该函数接受 state 作为第一个参数，并可接受其他参数来修改状态</p></blockquote><p>[<code>stores/index.js</code>]</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">createStore</span>(&#123;</span><br><span class="line">    <span class="attr">state</span>: &#123;</span><br><span class="line">        <span class="attr">cnt</span>: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">mutations</span>: &#123;</span><br><span class="line">        <span class="title function_">addCounter</span>(<span class="params">state, num</span>) &#123;</span><br><span class="line">            state.<span class="property">cnt</span> += num</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; useStore &#125; from &#x27;vuex&#x27;;</span><br><span class="line">import &#123; toRefs &#125; from &#x27;vue&#x27;;</span><br><span class="line"></span><br><span class="line">const store = useStore();</span><br><span class="line"></span><br><span class="line">const addCounter = (amount) =&gt; &#123;</span><br><span class="line">    store.commit(&#x27;addCounter&#x27;, amount);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const clickHandler = () =&gt; &#123;</span><br><span class="line">    store.commit(&#x27;addCounter&#x27;, 20);</span><br><span class="line">    addCounter(10);</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h3><blockquote><p>用于处理异步操作</p><p>通常会调用 mutations 来修改状态，Actions 可以包含任意异步操作，如 API 请求</p></blockquote><p>[<code>stores/index.js</code>]</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">createStore</span>(&#123;</span><br><span class="line">    <span class="attr">state</span>: &#123;</span><br><span class="line">        <span class="attr">cnt</span>: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">mutations</span>: &#123;</span><br><span class="line">        <span class="title function_">setCounter</span>(<span class="params">state, num</span>) &#123;</span><br><span class="line">            state.<span class="property">cnt</span> = num</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">actions</span>: &#123;</span><br><span class="line">        <span class="title function_">asyncSetCount</span>(<span class="params">&#123; commit &#125;</span>) &#123;</span><br><span class="line">            axios.<span class="title function_">get</span>(<span class="string">&quot;[URL]&quot;</span>)</span><br><span class="line">                .<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="title function_">commit</span>(<span class="string">&quot;setCounter&quot;</span>, res.<span class="property">data</span>)</span><br><span class="line">                &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; useStore &#125; from &#x27;vuex&#x27;;</span><br><span class="line"></span><br><span class="line">const store = useStore();</span><br><span class="line"></span><br><span class="line">const asyncSetCount = () =&gt; &#123;</span><br><span class="line">    return store.dispatch(&#x27;asyncSetCount&#x27;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const clickAsyncHandler = () =&gt; &#123;</span><br><span class="line">    store.dispatch(&#x27;asyncSetCount&#x27;);</span><br><span class="line">    asyncSetCount();</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h1 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h1><h2 id="引入路由"><a href="#引入路由" class="headerlink" title="引入路由"></a>引入路由</h2><ol><li><p>安装路由</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save vue-router</span><br></pre></td></tr></table></figure></li><li><p>配置独立的路由文件</p><p>[<code>router/index.js</code>]</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useStore &#125; <span class="keyword">from</span> <span class="string">&quot;@/stores&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">    <span class="attr">history</span>: <span class="title function_">createWebHistory</span>(<span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">env</span>.<span class="property">BASE_URL</span>), <span class="comment">// 使用 HTML5 的 history 模式，基础 URL 来自环境变量</span></span><br><span class="line">    <span class="attr">routes</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>, <span class="comment">// 路径</span></span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;welcome&#x27;</span>, <span class="comment">// 名称</span></span><br><span class="line">            <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/WelcomeView.vue&#x27;</span>), <span class="comment">// 懒加载组件</span></span><br><span class="line">            <span class="attr">children</span>: [ <span class="comment">// 子路由</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">path</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">                    <span class="attr">name</span>: <span class="string">&#x27;welcome-login&#x27;</span>,</span><br><span class="line">                    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/components/welcome/LoginPage.vue&#x27;</span>)</span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                    <span class="attr">path</span>: <span class="string">&#x27;register&#x27;</span>,</span><br><span class="line">                    <span class="attr">name</span>: <span class="string">&#x27;welcome-register&#x27;</span>,</span><br><span class="line">                    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/components/welcome/RegisterPage.vue&#x27;</span>)</span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                    <span class="attr">path</span>: <span class="string">&#x27;forget&#x27;</span>,</span><br><span class="line">                    <span class="attr">name</span>: <span class="string">&#x27;welcome-forget&#x27;</span>,</span><br><span class="line">                    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/components/welcome/ForgetPage.vue&#x27;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;/index&#x27;</span>,</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;index&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/IndexView.vue&#x27;</span>),</span><br><span class="line">            <span class="attr">meta</span>: &#123;</span><br><span class="line">                <span class="attr">title</span>: <span class="string">&#x27;主页&#x27;</span>, <span class="comment">// 标题</span></span><br><span class="line">                <span class="attr">icon</span>: <span class="string">&#x27;/favicon.png&#x27;</span> <span class="comment">// Icon</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;/old-path&#x27;</span>,</span><br><span class="line">            <span class="attr">redirect</span>: <span class="string">&#x27;/new-path&#x27;</span> <span class="comment">// 重定向</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123; <span class="comment">// 在每次路由导航发生前进行拦截</span></span><br><span class="line">    <span class="keyword">const</span> store = <span class="title function_">useStore</span>() <span class="comment">// 使用 useStore 获取 Vuex 状态管理实例</span></span><br><span class="line">    <span class="keyword">if</span>(store.<span class="property">auth</span>.<span class="property">user</span> != <span class="literal">null</span> &amp;&amp; to.<span class="property">name</span>.<span class="title function_">startsWith</span>(<span class="string">&#x27;welcome-&#x27;</span>)) &#123; <span class="comment">// 如果用户已登录且目标路由是 welcome 开头的路由</span></span><br><span class="line">        <span class="title function_">next</span>(<span class="string">&#x27;/index&#x27;</span>) <span class="comment">// 重定向到 &#x27;/index&#x27; 页面</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(store.<span class="property">auth</span>.<span class="property">user</span> == <span class="literal">null</span> &amp;&amp; to.<span class="property">fullPath</span>.<span class="title function_">startsWith</span>(<span class="string">&#x27;/index&#x27;</span>)) &#123; <span class="comment">// 如果用户未登录且目标路由是 &#x27;/index&#x27;</span></span><br><span class="line">        <span class="title function_">next</span>(<span class="string">&#x27;/&#x27;</span>) <span class="comment">// 重定向到根页面 &#x27;/&#x27;</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(to.<span class="property">matched</span>.<span class="property">length</span> === <span class="number">0</span>) &#123; <span class="comment">// 如果没有匹配到任何路由</span></span><br><span class="line">        <span class="title function_">next</span>(<span class="string">&#x27;/index&#x27;</span>) <span class="comment">// 重定向到 &#x27;/index&#x27; 页面</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">next</span>() <span class="comment">// 否则，继续导航</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure></li><li><p>引入路由到项目</p><p>[<code>main.js</code>]</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line">app.<span class="title function_">use</span>(router)</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123; <span class="comment">// 配置页面 meta</span></span><br><span class="line">    <span class="keyword">if</span> (to.<span class="property">meta</span>.<span class="property">title</span>) &#123;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="property">title</span> = to.<span class="property">meta</span>.<span class="property">title</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (to.<span class="property">meta</span>.<span class="property">icon</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> link = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;link[rel=&#x27;icon&#x27;]&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!link) &#123;</span><br><span class="line">            link = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;link&#x27;</span>);</span><br><span class="line">            link.<span class="property">rel</span> = <span class="string">&#x27;icon&#x27;</span>;</span><br><span class="line">            <span class="variable language_">document</span>.<span class="property">head</span>.<span class="title function_">appendChild</span>(link);</span><br><span class="line">        &#125;</span><br><span class="line">        link.<span class="property">href</span> = to.<span class="property">meta</span>.<span class="property">icon</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">next</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>指定路由显示入口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-view/&gt;</span><br></pre></td></tr></table></figure></li><li><p>指定路由跳转</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link to=&quot;/index&quot;&gt;主页&lt;/router-link&gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">push</span>(<span class="string">&#x27;/index&#x27;</span>) <span class="comment">// 导航</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="路由传递参数"><a href="#路由传递参数" class="headerlink" title="路由传递参数"></a>路由传递参数</h2><ol><li><p>在路由配置中指定参数的<code>key</code></p><p>[<code>router/index.js</code>]</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/list/:key&quot;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;list&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;../views/ListView.vue&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在跳转过程中携带参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;li&gt;&lt;router-link to=&quot;/list/A&quot;&gt;AAA&lt;/router-link&gt;&lt;/li&gt;</span><br><span class="line">&lt;li&gt;&lt;router-link to=&quot;/list/B&quot;&gt;BBB&lt;/router-link&gt;&lt;/li&gt;</span><br><span class="line">&lt;li&gt;&lt;router-link to=&quot;/list/C&quot;&gt;CCC&lt;/router-link&gt;&lt;/li&gt;</span><br></pre></td></tr></table></figure></li><li><p>在详情页面读取路由携带的参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;&#123;&#123; $route.params.key &#125;&#125;&lt;/p&gt;</span><br></pre></td></tr></table></figure></li></ol><h1 id="Element-plus"><a href="#Element-plus" class="headerlink" title="Element-plus"></a>Element-plus</h1><p><img src="/../images/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/04%20Vue-2.jpg"></p><p>官网：<a href="https://element-plus.org/zh-CN/">https://element-plus.org/zh-CN/</a></p><h2 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install element-plus --save</span><br></pre></td></tr></table></figure><h2 id="完整引用"><a href="#完整引用" class="headerlink" title="完整引用"></a>完整引用</h2><p>如果对打包后的文件大小不是很在乎，那么使用完整导入会更方便</p><p>[<code>main.js</code>]</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ElementPlus</span> <span class="keyword">from</span> <span class="string">&#x27;element-plus&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-plus/dist/index.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title class_">ElementPlus</span>)</span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="按需导入"><a href="#按需导入" class="headerlink" title="按需导入"></a>按需导入</h2><p>首先需要安装<code>unplugin-vue-components</code>和<code>unplugin-auto-import</code>这两款插件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -D unplugin-vue-components unplugin-auto-import</span><br></pre></td></tr></table></figure><p>然后修改配置文件</p><p>[<code>vue.config.js</code>]</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; defineConfig &#125; = <span class="built_in">require</span>(<span class="string">&#x27;@vue/cli-service&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">AutoImport</span> = <span class="built_in">require</span>(<span class="string">&#x27;unplugin-auto-import/webpack&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Components</span> = <span class="built_in">require</span>(<span class="string">&#x27;unplugin-vue-components/webpack&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">ElementPlusResolver</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;unplugin-vue-components/resolvers&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">    <span class="attr">transpileDependencies</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">configureWebpack</span>: &#123;</span><br><span class="line">        <span class="attr">plugins</span>: [</span><br><span class="line">            <span class="title class_">AutoImport</span>(&#123;</span><br><span class="line">                <span class="attr">resolvers</span>: [<span class="title class_">ElementPlusResolver</span>()]</span><br><span class="line">            &#125;),</span><br><span class="line">            <span class="title class_">Components</span>(&#123;</span><br><span class="line">                <span class="attr">resolvers</span>: [<span class="title class_">ElementPlusResolver</span>()]</span><br><span class="line">            &#125;)</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>最后，可以直接在组件中使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-button</span>&gt;</span><span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="字体图标"><a href="#字体图标" class="headerlink" title="字体图标"></a>字体图标</h2><p><img src="/../images/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/04%20Vue-3.jpg"></p><h3 id="安装-3"><a href="#安装-3" class="headerlink" title="安装"></a>安装</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install @element-plus/icons-vue</span><br></pre></td></tr></table></figure><h3 id="全局注册"><a href="#全局注册" class="headerlink" title="全局注册"></a>全局注册</h3><p>创建文件</p><p>[<code>plugins/icons.js</code>]</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> components <span class="keyword">from</span> <span class="string">&quot;@element-plus/icons-vue&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">install</span>: <span class="function">(<span class="params">app</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> components) &#123;</span><br><span class="line">            <span class="keyword">const</span> componentConfig = components[key];</span><br><span class="line">            app.<span class="title function_">component</span>(componentConfig.<span class="property">name</span>, componentConfig);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="引入文件"><a href="#引入文件" class="headerlink" title="引入文件"></a>引入文件</h3><p>在主文件中引入<code>icons.js</code>文件</p><p>[<code>index.js</code>]</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> elementIcon <span class="keyword">from</span> <span class="string">&quot;./plugins/icons&quot;</span>;</span><br><span class="line">app.<span class="title function_">use</span>(elementIcon)</span><br></pre></td></tr></table></figure><h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><p>接下来就可以直接在组件中引入使用了</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-icon</span> <span class="attr">class</span>=<span class="string">&quot;expand&quot;</span> <span class="attr">color</span>=<span class="string">&quot;#409EFC&quot;</span> <span class="attr">:size</span>=<span class="string">&quot;30&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">expand</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-icon</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> 语法 </tag>
            
            <tag> 事件 </tag>
            
            <tag> Vue </tag>
            
            <tag> Axios </tag>
            
            <tag> 组件 </tag>
            
            <tag> 监听器 </tag>
            
            <tag> Vuex </tag>
            
            <tag> router </tag>
            
            <tag> Element-plus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis 数据库</title>
      <link href="/2024/02/20/04%20Redis%20%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2024/02/20/04%20Redis%20%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h1><p>切换数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> [序号]</span><br></pre></td></tr></table></figure><p>关闭服务器</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shutdown</span><br></pre></td></tr></table></figure><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><p>添加</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> [k] [v]</span><br><span class="line"><span class="keyword">set</span> [k] [v] EX [秒] # 设置过期时间</span><br><span class="line"><span class="keyword">set</span> [k] [v] PX [毫秒] # 设置过期时间</span><br><span class="line">mset [[k] [v]]...</span><br></pre></td></tr></table></figure><p>获取</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">get</span> [k]</span><br></pre></td></tr></table></figure><p>删除</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">del [k]</span><br><span class="line">del [k]...</span><br></pre></td></tr></table></figure><p>移动</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">move [k] [序号]</span><br></pre></td></tr></table></figure><p>查看所有键值对</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keys <span class="operator">*</span></span><br></pre></td></tr></table></figure><p>查询键是否存在</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">exists</span> [k]</span><br><span class="line"><span class="keyword">exists</span> [k]...</span><br></pre></td></tr></table></figure><p>修改键的名称</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rename [k] [新的名称]</span><br><span class="line">renamex [k] [新的名称] # 会检查新的名称是否已经存在</span><br></pre></td></tr></table></figure><p>设置过期时间</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">expire [k] [秒]</span><br><span class="line">persist [k] # 永久不过期</span><br></pre></td></tr></table></figure><p>查看距离过期时间还剩多少</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ttl [k] # 秒</span><br><span class="line">pttl [k] # 毫秒</span><br></pre></td></tr></table></figure><p>随机拿取一个键</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">randomkey</span><br></pre></td></tr></table></figure><p>自增自减</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">incr [k] # 等价于 a <span class="operator">=</span> a <span class="operator">+</span> <span class="number">1</span></span><br><span class="line">incrby [k] b # 等价于 a <span class="operator">=</span> a <span class="operator">+</span> b</span><br><span class="line">decr [k] # 等价于 a <span class="operator">=</span> a <span class="operator">-</span> <span class="number">1</span></span><br><span class="line">decrby [k] b # 等价于 a <span class="operator">=</span> a <span class="operator">-</span> b</span><br></pre></td></tr></table></figure><p>查看键的数据类型</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type [k]</span><br></pre></td></tr></table></figure><h2 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h2><p>添加</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hset [key] [[k] [v]]...</span><br></pre></td></tr></table></figure><p>获取</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hget [key] [k]</span><br><span class="line">hgetall [key] # 获取所有的键值对</span><br></pre></td></tr></table></figure><p>删除</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hdel [key] [k]</span><br><span class="line">hdel [key] [k]...</span><br></pre></td></tr></table></figure><p>查询有多少个键值对</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hlen [key]</span><br></pre></td></tr></table></figure><p>判断某个键是否存在</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexists [key] [k]</span><br></pre></td></tr></table></figure><p>一次性获取所有的值</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hvals [key]</span><br></pre></td></tr></table></figure><h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><p>添加</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lpush [k] [v]... # 头部添加</span><br><span class="line">rpush [k] [v]... # 尾部添加</span><br><span class="line">linsert [k] [before] [指定元素] [v] # 在指定元素的前面插入元素</span><br><span class="line">linsert [k] [after] [指定元素] [v] # 在指定元素的后面插入元素</span><br></pre></td></tr></table></figure><p>获取 &#x2F; 移除</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lindex [k] [下标] # 根据下标获取元素</span><br><span class="line">lpop [k] # 获取并移除头部元素</span><br><span class="line">rpop [k] # 获取并移除尾部元素</span><br><span class="line">lrange [k] [a] [b] # 获取指定下标范围内（闭区间）的元素</span><br></pre></td></tr></table></figure><p>查看大小</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">llen [k]</span><br></pre></td></tr></table></figure><p>阻塞操作</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">blpop [k]... [时间上限（秒）]</span><br></pre></td></tr></table></figure><h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><p>添加</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sadd [k] [v]...</span><br></pre></td></tr></table></figure><p>获取</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smembers [k]</span><br></pre></td></tr></table></figure><p>移除</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">srem [k] [v]...</span><br><span class="line">spop [k] # 随机移除一个元素</span><br></pre></td></tr></table></figure><p>移动</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smove [k] [目标] [v]</span><br></pre></td></tr></table></figure><p>查看大小</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scard [k]</span><br></pre></td></tr></table></figure><p>判断是否包含指定的值</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sismember [k] [v]</span><br></pre></td></tr></table></figure><p>集合运算</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sdiff [k1] [k2] # 差集</span><br><span class="line">sinter [k1] [k2] # 交集</span><br><span class="line">sunion [k1] [k2] # 并集</span><br><span class="line">sdiffstore [目标] [k1] [k2] # 集合之间的差集存到目标集合中</span><br><span class="line">sinterstore [目标] [k1] [k2] # 集合之间的交集存到目标集合中</span><br><span class="line">sunionstore [目标] [k1] [k2] # 集合之间的并集存到目标集合中</span><br></pre></td></tr></table></figure><h2 id="SortedSet"><a href="#SortedSet" class="headerlink" title="SortedSet"></a>SortedSet</h2><p>添加</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zadd [k] [[v] [权重]]...</span><br></pre></td></tr></table></figure><p>获取</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zrange [k] [a] [b] # 获取指定下标范围内（闭区间）的元素</span><br><span class="line">zrange [k] [a] [b] withscores # 获取指定下标范围内（闭区间）的元素，包括其对应的分数</span><br></pre></td></tr></table></figure><p>移除</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zrem [k] [v]...</span><br></pre></td></tr></table></figure><p>查看大小</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zcard [k]</span><br></pre></td></tr></table></figure><p>查看指定值的排名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zrank [k] [v]</span><br></pre></td></tr></table></figure><p>统计分数段内的数量</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zcount [k] [a] [b]</span><br></pre></td></tr></table></figure><h1 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h1><h2 id="RDB"><a href="#RDB" class="headerlink" title="RDB"></a>RDB</h2><blockquote><p>定期创建数据快照并将其保存到磁盘上的 RDB 文件中</p></blockquote><p>保存数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">save</span><br><span class="line">bgsave # 以子进程的方式进行保存</span><br></pre></td></tr></table></figure><p>在配置文件中设置自动保存</p><p>在一段时间内写入多少数据时，执行一次保存操作</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">save [秒] [写入数量]</span><br></pre></td></tr></table></figure><h2 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h2><blockquote><p>将每一个写操作追加到 AOF 文件中，实时记录所有的写操作</p></blockquote><p>在配置文件中设置保存策略</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">appendonly yes # 需要修改这个为 yes</span><br><span class="line"></span><br><span class="line"># appendfsync always</span><br><span class="line">appendfsync everysec</span><br><span class="line"># appendfsync no</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">保存策略</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center"><code>always</code></td><td align="center">每次执行一次写操作都会保存</td></tr><tr><td align="center"><code>everysec</code></td><td align="center">每秒保存一次【默认配置】</td></tr><tr><td align="center"><code>no</code></td><td align="center">看系统心情保存</td></tr></tbody></table><p>重写数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bgrewriteaof</span><br></pre></td></tr></table></figure><p>在配置文件中设置自动重写</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">auto-aof-rewrite-min-size [大小（例：64mb）] # 达到指定大小时自动重写</span><br></pre></td></tr></table></figure><h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><p>开启事务</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">multi</span><br></pre></td></tr></table></figure><p>提交事务</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">exec</span></span><br></pre></td></tr></table></figure><p>取消事务</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">discard</span><br></pre></td></tr></table></figure><h1 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h1><p>监视一个目标</p><p>如果执行事务之前被监视目标发生了修改，则取消本次事务</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">watch</span><br></pre></td></tr></table></figure><p>取消监视</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unwatch</span><br></pre></td></tr></table></figure><h1 id="交互"><a href="#交互" class="headerlink" title="交互"></a>交互</h1><h2 id="Java-与-Redis"><a href="#Java-与-Redis" class="headerlink" title="Java 与 Redis"></a>Java 与 Redis</h2><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>连接<code>Redis</code>数据库</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> (<span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jedis</span>(<span class="string">&quot;localhost&quot;</span>, <span class="number">6379</span>) &#123;</span><br><span class="line">        <span class="comment">// 通过 jedis 访问 redis 同名方法即可完成交互</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="SpringBoot-与-Redis"><a href="#SpringBoot-与-Redis" class="headerlink" title="SpringBoot 与 Redis"></a>SpringBoot 与 Redis</h2><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置配置文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.10</span><span class="number">.3</span> <span class="comment"># 服务器地址</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span> <span class="comment"># 服务器端口</span></span><br><span class="line">    <span class="attr">database:</span> <span class="number">0</span> <span class="comment"># 数据库序号</span></span><br></pre></td></tr></table></figure><p>连接<code>Redis</code>数据库</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SpringBootTestApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    StringRedisTemplate template; <span class="comment">// 自动注入</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">        ValueOperations&lt;String, String&gt; operations = template.opsForValue();</span><br><span class="line">        <span class="comment">// 通过 operations 访问 redis 同名方法即可完成交互</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<code>SpringBoot</code>完成事务操作</p><p>需要导入以下依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    StringRedisTemplate template; <span class="comment">// 自动注入</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span> <span class="comment">// 在依赖注入完成后被自动调用</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        template.setEnableTransactionSupport(<span class="literal">true</span>); <span class="comment">// 需要开启事务</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span> <span class="comment">// 注解此方法为事务操作</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        template.multi();</span><br><span class="line">        template.opsForValue().set(<span class="string">&quot;d&quot;</span>, <span class="string">&quot;xxxxx&quot;</span>);</span><br><span class="line">        template.exec();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="使用-Redis-做-Mybatis-二级缓存"><a href="#使用-Redis-做-Mybatis-二级缓存" class="headerlink" title="使用 Redis 做 Mybatis 二级缓存"></a>使用 Redis 做 Mybatis 二级缓存</h1><p>编写缓存类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisMybatisCache</span> <span class="keyword">implements</span> <span class="title class_">Cache</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String id;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> RedisTemplate&lt;Object, Object&gt; template;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RedisMybatisCache</span><span class="params">(String id)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setTemplate</span><span class="params">(RedisTemplate&lt;Object, Object&gt; template)</span> &#123;</span><br><span class="line">        RedisMybatisCache.template = template;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">putObject</span><span class="params">(Object o, Object o1)</span> &#123;</span><br><span class="line">        template.opsForValue().set(o, o1, <span class="number">60</span>, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getObject</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> template.opsForValue().get(o);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">removeObject</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> template.delete(o);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span> &#123;</span><br><span class="line">        template.execute((RedisCallback&lt;Void&gt;) connection -&gt; &#123;</span><br><span class="line">            connection.flushDb();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getSize</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> template.execute(RedisServerCommands::dbSize).intValue();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainConfiguration</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    RedisTemplate&lt;Object, Object&gt; template;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        RedisMybatisCache.setTemplate(template);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>Mapper</code>上启用此缓存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CacheNamespace(implementation = RedisMybatisCache.class)</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MainMapper</span> &#123;</span><br><span class="line">    <span class="meta">@Select(&quot;select name from student where sid = 1&quot;)</span></span><br><span class="line">    String <span class="title function_">getSid</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 中间件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 锁 </tag>
            
            <tag> 数据库 </tag>
            
            <tag> 事务 </tag>
            
            <tag> 数据类型 </tag>
            
            <tag> Redis </tag>
            
            <tag> 持久化 </tag>
            
            <tag> 交互 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 设计模式</title>
      <link href="/2024/02/01/04%20Java%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/2024/02/01/04%20Java%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="面向对象设计原则"><a href="#面向对象设计原则" class="headerlink" title="面向对象设计原则"></a>面向对象设计原则</h1><blockquote><p>一组指导设计良好、可维护和可扩展软件的准则</p></blockquote><h2 id="单一职责原则"><a href="#单一职责原则" class="headerlink" title="单一职责原则"></a>单一职责原则</h2><blockquote><p>一个对象应该只包含单一的职责，并且该职责被完整地封装在一个类中</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">People</span> &#123; <span class="comment">// 一个人类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">coding</span><span class="params">()</span> &#123;&#125; <span class="comment">// 人类会编程</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">work</span><span class="params">()</span> &#123;&#125; <span class="comment">// 还会打螺丝</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ride</span><span class="params">()</span> &#123;&#125; <span class="comment">// 送外卖也会</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要进行更明确的划分</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Coder</span> &#123; <span class="comment">// 程序员会编程</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">coding</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Worker</span> &#123; <span class="comment">// 工人会打螺丝</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">work</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Rider</span> &#123; <span class="comment">// 骑手会送外卖</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ride</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="开闭原则"><a href="#开闭原则" class="headerlink" title="开闭原则"></a>开闭原则</h2><blockquote><p>软件实体应当对扩展开放，对修改关闭</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Coder</span> &#123; <span class="comment">// 敲代码</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">coding</span><span class="params">()</span>; <span class="comment">// 对顶层行为抽象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对扩展开放，对修改关闭</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">JavaCoder</span> <span class="keyword">extends</span> <span class="title class_">Coder</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">coding</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Java太卷了T_T，快去学Go吧！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PHPCoder</span> <span class="keyword">extends</span> <span class="title class_">Coder</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">coding</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;PHP是世界上最好的语言&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span>艹Coder <span class="keyword">extends</span> <span class="title class_">Coder</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">coding</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;笑死，Java再牛逼底层不还得找我？&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="里氏替换原则"><a href="#里氏替换原则" class="headerlink" title="里氏替换原则"></a>里氏替换原则</h2><blockquote><p>子类可以扩展父类的功能，但不能改变父类原有的功能</p></blockquote><ol><li>子类可以实现父类的抽象方法，但不能覆盖父类的非抽象方法</li><li>子类可以增加自己特有的方法</li><li>当子类的方法重载父类的方法时，方法的输入要比父类方法的输入更为宽松</li><li>当子类的方法实现父类的方法时，方法的输出要比父类方法的输出更为严格</li></ol><p>以下例子是符合里氏替换原则的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Coder</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">coding</span><span class="params">()</span> &#123;&#125; <span class="comment">// 父类会打代码</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">JavaCoder</span> <span class="keyword">extends</span> <span class="title class_">Coder</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">game</span><span class="params">()</span> &#123;&#125; <span class="comment">// 子类除了会打代码之外，还会打游戏</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下例子违背了里氏替换原则，因为覆盖了父类的非抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Coder</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">coding</span><span class="params">()</span> &#123;&#125; <span class="comment">// 父类会打代码</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">JavaCoder</span> <span class="keyword">extends</span> <span class="title class_">Coder</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">game</span><span class="params">()</span> &#123;&#125; <span class="comment">// 子类除了会打代码之外，还会打游戏</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">coding</span><span class="params">()</span> &#123;&#125; <span class="comment">// 子类特有的打代码方式</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时应该需要将<code>coding</code>抽离到上一层中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">People</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">coding</span><span class="params">()</span> &#123;&#125; <span class="comment">// 顶层抽象</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Coder</span> <span class="keyword">extends</span> <span class="title class_">People</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">coding</span><span class="params">()</span> &#123;&#125; <span class="comment">// Coder 会打代码</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">JavaCoder</span> <span class="keyword">extends</span> <span class="title class_">People</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">game</span><span class="params">()</span> &#123;&#125; <span class="comment">// JavaCoder 会打游戏</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">coding</span><span class="params">()</span> &#123;&#125; <span class="comment">// JavaCoder 会打代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="依赖倒转原则"><a href="#依赖倒转原则" class="headerlink" title="依赖倒转原则"></a>依赖倒转原则</h2><blockquote><p>高层模块不应依赖于底层模块，它们都应该依赖抽象。抽象不应依赖于细节，细节应该依赖于抽象</p></blockquote><p>以下例子中，<code>A</code>和<code>B</code>都用到了<code>C</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;C&gt; list;</span><br><span class="line">    <span class="keyword">public</span> C <span class="title function_">test</span><span class="params">(C c)</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">B</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">B</span><span class="params">(C c)</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">C</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>但是有一天，<code>C</code>突然换成了<code>D</code>，就会发生大面积的报错</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;C&gt; list;</span><br><span class="line">    <span class="keyword">public</span> C <span class="title function_">test</span><span class="params">(C c)</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">B</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">B</span><span class="params">(C c)</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">D</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>可以用接口，做一个顶层抽象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Service</span>&#123;&#125; <span class="comment">// 使用 Service 做一个顶层抽象</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Service&gt; list;</span><br><span class="line">    <span class="keyword">public</span> Service <span class="title function_">test</span><span class="params">(Service c)</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">B</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">B</span><span class="params">(Service c)</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">C</span> <span class="keyword">implements</span> <span class="title class_">Service</span>&#123;&#125; <span class="comment">// C 实现了 Service</span></span><br></pre></td></tr></table></figure><p>现在就算是<code>C</code>突然换成了<code>D</code>，也不会发生大面积的报错</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Service</span>&#123;&#125; <span class="comment">// 使用 Service 做一个顶层抽象</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Service&gt; list;</span><br><span class="line">    <span class="keyword">public</span> Service <span class="title function_">test</span><span class="params">(Service c)</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">B</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">B</span><span class="params">(Service c)</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">D</span> <span class="keyword">implements</span> <span class="title class_">Service</span>&#123;&#125; <span class="comment">// 换成 D 实现了 Service</span></span><br></pre></td></tr></table></figure><h2 id="接口隔离原则"><a href="#接口隔离原则" class="headerlink" title="接口隔离原则"></a>接口隔离原则</h2><blockquote><p>客户端不应依赖那些它不需要的接口</p></blockquote><p>现定义了一个接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Device</span> &#123; <span class="comment">// 电子设备</span></span><br><span class="line">    String <span class="title function_">getCpu</span><span class="params">()</span>; <span class="comment">// CPU</span></span><br><span class="line">    String <span class="title function_">getType</span><span class="params">()</span>; <span class="comment">// 类型</span></span><br><span class="line">    String <span class="title function_">getMemory</span><span class="params">()</span>; <span class="comment">// 内存</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>电脑是一种电子设备</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Computer</span> <span class="keyword">implements</span> <span class="title class_">Device</span> &#123; <span class="comment">// 电脑</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCpu</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;i9-12900K&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getType</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;电脑&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMemory</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;32G DDR5&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>电风扇也算是一种电子设备，但是它没有 CPU 和内存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Fan</span> <span class="keyword">implements</span> <span class="title class_">Device</span> &#123; <span class="comment">// 电风扇</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCpu</span><span class="params">()</span> &#123; <span class="comment">// 就一个破风扇，还需要CPU？</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getType</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;风扇&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMemory</span><span class="params">()</span> &#123; <span class="comment">// 风扇也不需要内存吧？？？</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实可以对电子设备进行细分</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SmartDevice</span> &#123; <span class="comment">// 智能设备</span></span><br><span class="line">    String <span class="title function_">getCpu</span><span class="params">()</span>; <span class="comment">// CPU</span></span><br><span class="line">    String <span class="title function_">getType</span><span class="params">()</span>; <span class="comment">// 类型</span></span><br><span class="line">    String <span class="title function_">getMemory</span><span class="params">()</span>; <span class="comment">// 内存</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">NormalDevice</span> &#123; <span class="comment">// 普通设备</span></span><br><span class="line">    String <span class="title function_">getType</span><span class="params">()</span>; <span class="comment">// 类型</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，不同类型的电子设备就可以根据划分去实现不同的接口了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Computer</span> <span class="keyword">implements</span> <span class="title class_">SmartDevice</span> &#123; <span class="comment">// 电脑</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCpu</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;i9-12900K&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getType</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;电脑&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMemory</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;32G DDR5&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Fan</span> <span class="keyword">implements</span> <span class="title class_">NormalDevice</span> &#123; <span class="comment">// 电风扇</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getType</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;风扇&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="合成复用原则"><a href="#合成复用原则" class="headerlink" title="合成复用原则"></a>合成复用原则</h2><blockquote><p>优先使用对象组合，而不是通过继承来达到复用的目的</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">connectDatabase</span><span class="params">()</span> &#123;&#125; <span class="comment">// A 具有连接数据库操作</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">A</span> &#123; <span class="comment">// 直接通过继承的方式，以得到 A 的数据库连接逻辑</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>.connectDatabase(); <span class="comment">// 直接调用父类方法就行</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但没必要直接继承，而是可以在需要的时候传入一个对象过来</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">connectDatabase</span><span class="params">()</span> &#123;&#125; <span class="comment">// A 具有连接数据库操作</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">A</span> &#123; <span class="comment">// 不通过继承，而是在用的时候给拿一个 A</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(A a)</span>&#123;</span><br><span class="line">        a.connectDatabase(); <span class="comment">// 通过传入的对象去执行</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="迪米特法则"><a href="#迪米特法则" class="headerlink" title="迪米特法则"></a>迪米特法则</h2><blockquote><p>每一个软件单位对其他单位都只有最少的知识，而且局限于那些与本单位密切相关的软件单位</p></blockquote><p>引用翻译：<strong>降低耦合度。追求高内聚，低耦合</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(Socket socket)</span> &#123; <span class="comment">// 该方法需要获得 socket 的本地地址</span></span><br><span class="line">        System.out.println(<span class="string">&quot;IP地址：&quot;</span> + socket.getLocalAddress());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但实际上，可以直接传一个字符串进来，保证<code>只有最少的知识</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(String localAddress)</span> &#123; <span class="comment">// 直接传一个字符串进来</span></span><br><span class="line">        System.out.println(<span class="string">&quot;IP地址：&quot;</span> + localAddress);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="创建型设计模式"><a href="#创建型设计模式" class="headerlink" title="创建型设计模式"></a>创建型设计模式</h1><blockquote><p> 关注对象的创建</p></blockquote><h2 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h2><blockquote><p>用于定义创建对象的接口，但将实际创建工作延迟到子类中，以便子类决定要实例化的类</p></blockquote><p>以下例子，只能使用普通的<code>new</code>方法来创建对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Fruit</span> &#123; <span class="comment">// 水果抽象类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Fruit</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Apple</span> <span class="keyword">extends</span> <span class="title class_">Fruit</span> &#123; <span class="comment">// 苹果，继承自水果</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Apple</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(<span class="string">&quot;苹果&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Orange</span> <span class="keyword">extends</span> <span class="title class_">Fruit</span> &#123; <span class="comment">// 橘子，也是继承自水果</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Orange</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(<span class="string">&quot;橘子&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在来创建一个水果工厂</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">FruitFactory</span>&lt;T <span class="keyword">extends</span> <span class="title class_">Fruit</span>&gt; &#123; <span class="comment">// 将水果工厂抽象为抽象类，添加泛型 T 由子类指定水果类型</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> T <span class="title function_">getFruit</span><span class="params">()</span>; <span class="comment">// 不同的水果工厂，通过此方法生产不同的水果</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每种水果实现一个对应类型的工厂</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppleFactory</span> <span class="keyword">extends</span> <span class="title class_">FruitFactory</span>&lt;Apple&gt; &#123; <span class="comment">// 苹果工厂，直接返回 Apple</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Apple <span class="title function_">getFruit</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Apple</span>(); <span class="comment">// 使用工厂的 get 方法来获取对象</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>于是就可以通过工厂方法来获取一个苹果对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Apple</span> <span class="variable">apple</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AppleFactory</span>().getFruit();</span><br></pre></td></tr></table></figure><h2 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h2><blockquote><p>用于提供一个创建一系列相关或相互依赖对象的接口，而无需指定其具体类</p></blockquote><p><img src="/../images/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/04%20Java%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-1.jpg"></p><p>以产品生产线为例，如果按照简单工厂模式，则需要创建 9 个工厂</p><p>但实际上，可以按不同的产品族进行划分，这样仅需创建 3 个流水线</p><p>创建一个流水线抽象类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Phone</span> &#123;&#125; <span class="comment">// 手机</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Table</span> &#123;&#125; <span class="comment">// 平板</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Router</span> &#123;&#125; <span class="comment">// 路由器</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractFactory</span> &#123; <span class="comment">// 将生产线进行抽象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> Phone <span class="title function_">getPhone</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> Table <span class="title function_">getTable</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> Router <span class="title function_">getRouter</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h2><blockquote><p>用于将一个复杂对象的构建过程与其表示相分离，以便可以使用相同的构建过程来创建不同的表示</p></blockquote><p>现有一个学生类，有非常多的字段</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="type">int</span> id; <span class="comment">// id</span></span><br><span class="line">    <span class="type">int</span> age; <span class="comment">// 年龄</span></span><br><span class="line">    <span class="type">int</span> grade; <span class="comment">// 年级</span></span><br><span class="line">    String name; <span class="comment">// 姓名</span></span><br><span class="line">    String college; <span class="comment">// 学院</span></span><br><span class="line">    String profession; <span class="comment">// 专业</span></span><br><span class="line">    List&lt;String&gt; awards; <span class="comment">// 奖项</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(<span class="type">int</span> id, <span class="type">int</span> age, <span class="type">int</span> grade, String name, String college, String profession, List&lt;String&gt; awards)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.grade = grade;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.college = college;</span><br><span class="line">        <span class="built_in">this</span>.profession = profession;</span><br><span class="line">        <span class="built_in">this</span>.awards = awards;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用普通的<code>new</code>方法来创建对象，需要一次性填写全部字段</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">1</span>, <span class="number">18</span>, <span class="number">3</span>, <span class="string">&quot;小明&quot;</span>, <span class="string">&quot;计算机学院&quot;</span>, <span class="string">&quot;计算机科学与技术&quot;</span>, Arrays.asList(<span class="string">&quot;ICPC-ACM 区域赛 金牌&quot;</span>, <span class="string">&quot;LPL 2022春季赛 冠军&quot;</span>));</span><br></pre></td></tr></table></figure><p>创建一个<code>StudentBuilder</code>内部类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="type">int</span> id; <span class="comment">// id</span></span><br><span class="line">    <span class="type">int</span> age; <span class="comment">// 年龄</span></span><br><span class="line">    <span class="type">int</span> grade; <span class="comment">// 年级</span></span><br><span class="line">    String name; <span class="comment">// 姓名</span></span><br><span class="line">    String college; <span class="comment">// 学院</span></span><br><span class="line">    String profession; <span class="comment">// 专业</span></span><br><span class="line">    List&lt;String&gt; awards; <span class="comment">// 奖项</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Student</span><span class="params">(<span class="type">int</span> id, <span class="type">int</span> age, <span class="type">int</span> grade, String name, String college, String profession, List&lt;String&gt; awards)</span> &#123;&#125; <span class="comment">// 将构造器设为私有</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> StudentBuilder <span class="title function_">builder</span><span class="params">()</span> &#123; <span class="comment">// 通过 builder 方法获取建造者</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">StudentBuilder</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">StudentBuilder</span> &#123; <span class="comment">// 创建一个内部类，字段跟 Student 相同</span></span><br><span class="line">        <span class="type">int</span> id; <span class="comment">// id</span></span><br><span class="line">        <span class="type">int</span> age; <span class="comment">// 年龄</span></span><br><span class="line">        <span class="type">int</span> grade; <span class="comment">// 年级</span></span><br><span class="line">        String name; <span class="comment">// 姓名</span></span><br><span class="line">        String college; <span class="comment">// 学院</span></span><br><span class="line">        String profession; <span class="comment">// 专业</span></span><br><span class="line">        List&lt;String&gt; awards; <span class="comment">// 奖项</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> StudentBuilder <span class="title function_">id</span> <span class="params">(<span class="type">int</span> id)</span> &#123; <span class="comment">// 直接调用建造者对应的方法，为对应的属性赋值</span></span><br><span class="line">            <span class="built_in">this</span>.id = id;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>; <span class="comment">// 为了支持链式调用，这里直接返回建造者本身，下同</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> StudentBuilder <span class="title function_">age</span> <span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.age = age;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> StudentBuilder <span class="title function_">grade</span> <span class="params">(<span class="type">int</span> grade)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.grade = grade;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> StudentBuilder <span class="title function_">name</span> <span class="params">(String name)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> StudentBuilder <span class="title function_">college</span> <span class="params">(String college)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.college = college;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> StudentBuilder <span class="title function_">profession</span> <span class="params">(String profession)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.profession = profession;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> StudentBuilder <span class="title function_">awards</span> <span class="params">(List&lt;String&gt; awards)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.awards = awards;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Student <span class="title function_">build</span><span class="params">()</span> &#123; <span class="comment">// 最后我们只需要调用建造者提供的 build 方法即可根据我们的配置返回一个对象</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Student</span>(id, age, grade, name, college, profession, awards);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在就可以通过建造者来逐步构造对象了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> Student.builder() <span class="comment">// 获取建造者</span></span><br><span class="line">        .id(<span class="number">1</span>) <span class="comment">// 逐步配置各个参数</span></span><br><span class="line">        .age(<span class="number">19</span>)</span><br><span class="line">        .grade(<span class="number">2</span>)</span><br><span class="line">        .name(<span class="string">&quot;小星&quot;</span>)</span><br><span class="line">        .college(<span class="string">&quot;数学与系统科学学院&quot;</span>)</span><br><span class="line">        .profession(<span class="string">&quot;信息与计算科学&quot;</span>)</span><br><span class="line">        .awards(<span class="string">&quot;ICPC-ACM 区域赛 金牌&quot;</span>, <span class="string">&quot;LPL 2022春季赛 冠军&quot;</span>)</span><br><span class="line">        .build(); <span class="comment">// 最后直接建造我们想要的对象</span></span><br></pre></td></tr></table></figure><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><blockquote><p>用于确保类只有一个实例，并提供全局访问点</p></blockquote><h3 id="简单单例模式"><a href="#简单单例模式" class="headerlink" title="简单单例模式"></a>简单单例模式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">Singleton</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>(); <span class="comment">// 用于引用全局唯一的单例对象，在一开始就创建好</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;&#125; <span class="comment">// 不允许随便new，需要对象直接找 getInstance</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123; <span class="comment">// 获取全局唯一的单例对象</span></span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="懒汉式单例模式"><a href="#懒汉式单例模式" class="headerlink" title="懒汉式单例模式"></a>懒汉式单例模式</h3><ol><li>基于多线程的实现方式</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton INSTANCE; <span class="comment">// 用于引用全局唯一的单例对象，设置 volatile 以对其他线程可见</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;&#125; <span class="comment">// 不允许随便new，需要对象直接找 getInstance</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123; <span class="comment">// 获取全局唯一的单例对象</span></span><br><span class="line">        <span class="keyword">if</span>(INSTANCE == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class) &#123; <span class="comment">// 加锁</span></span><br><span class="line">                <span class="keyword">if</span>(INSTANCE == <span class="literal">null</span>) INSTANCE = <span class="keyword">new</span> <span class="title class_">Singleton</span>(); <span class="comment">// 内层还要进行一次检查，双重检查锁定</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>基于静态内部类的实现方式</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;&#125; <span class="comment">// 不允许随便new，需要对象直接找 getInstance</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Holder</span> &#123; <span class="comment">// 由静态内部类持有单例对象，但是根据类加载特性，我们仅使用 Singleton 类时，不会对静态内部类进行初始化</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">Singleton</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123; <span class="comment">// 只有真正使用内部类时，才会进行类初始化</span></span><br><span class="line">        <span class="keyword">return</span> Holder.INSTANCE; <span class="comment">// 直接获取内部类中的</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h2><blockquote><p>用于通过复制现有对象来创建新对象，而不是通过实例化新对象的方式</p></blockquote><p>Java 自带的<code>clone</code>方法是浅拷贝的，需要我们自己实现深拷贝</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">Cloneable</span> &#123; <span class="comment">// 注意需要实现 Cloneable 接口</span></span><br><span class="line"></span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException &#123; <span class="comment">// 针对成员变量也要进行拷贝</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> (Student) <span class="built_in">super</span>.clone(); <span class="comment">// 要返回的对象</span></span><br><span class="line">        student.name = <span class="keyword">new</span> <span class="title class_">String</span>(name); <span class="comment">// 深拷贝，改变引用</span></span><br><span class="line">        <span class="keyword">return</span> student; <span class="comment">// 成员拷贝完成后，再返回</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="结构型设计模式"><a href="#结构型设计模式" class="headerlink" title="结构型设计模式"></a>结构型设计模式</h1><blockquote><p>关注类和对象之间的结构组织</p></blockquote><h2 id="类-对象适配器模式"><a href="#类-对象适配器模式" class="headerlink" title="类&#x2F;对象适配器模式"></a>类&#x2F;对象适配器模式</h2><blockquote><p>用于将一个类的接口转换成客户端所期望的另一个接口，从而使得原本因接口不兼容而无法在一起工作的类能够协同工作</p></blockquote><p>以前有一个手机供应商</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestSupplier</span> &#123; <span class="comment">// 以前的手机供应商</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">doSupply</span><span class="params">()</span> &#123; <span class="comment">// 供应 iPhone 14 Pro</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;iPhone 14 Pro&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是现在换成了另一个供应商</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Target</span> &#123; <span class="comment">// 现在的手机供应商</span></span><br><span class="line">    String <span class="title function_">supply</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>供应商更换之后，<code>test</code>方法参数也更换为了现在的手机供应商</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">TestSupplier</span> <span class="variable">supplier</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestSupplier</span>();</span><br><span class="line">        test( ? ); <span class="comment">// 我们没有 Target 类型的手机供应商，只有其他的，那这里该填个啥</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(Target target)</span> &#123;&#125; <span class="comment">// test 方法需要 Target 类型的手机供应商</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以创建一个适配器类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestAdapter</span> <span class="keyword">implements</span> <span class="title class_">Target</span> &#123; <span class="comment">// 适配器类，实现 Target</span></span><br><span class="line"></span><br><span class="line">    TestSupplier supplier;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TestAdapter</span><span class="params">(TestSupplier supplier)</span> &#123; <span class="comment">// 传入以前的手机供应商</span></span><br><span class="line">        <span class="built_in">this</span>.supplier = supplier;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">supply</span><span class="params">()</span> &#123; <span class="comment">// 实现 Target 中的接口方法</span></span><br><span class="line">        <span class="keyword">return</span> supplier.doSupply();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在就可以使用该适配器执行<code>test</code>方法了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">TestAdapter</span> <span class="variable">adapter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestAdapter</span>();</span><br><span class="line">        test(adapter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(Target target)</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h2><blockquote><p>用于将抽象部分与其实现部分分离，以便两者可以独立变化，从而实现更大的灵活性和可扩展性</p></blockquote><p>以奶茶举例，假设奶茶有两种属性</p><ol><li>大小</li><li>类型</li></ol><p>那么我们可以这样去实现一个奶茶类：</p><p>先将<strong>奶茶的大小</strong>和<strong>奶茶的类型</strong>声明为接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Size</span> &#123; <span class="comment">// 奶茶的大小</span></span><br><span class="line">    String <span class="title function_">getSize</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Type</span> &#123; <span class="comment">// 奶茶的类型</span></span><br><span class="line">    String <span class="title function_">getType</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果现在我们需要一杯<em>大杯的芋圆啵啵奶茶</em>，我们可以这样实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LargeKissTea</span> <span class="keyword">implements</span> <span class="title class_">Type</span>, Size &#123; <span class="comment">// 实现这两个接口</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSize</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;大杯&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getType</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;芋圆啵啵奶茶&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是假如现在有很多种大小和类型的奶茶，由于二维的性质，我们需要创建出很多对象</p><p>我们可以通过桥接方法，使得它变成是一维的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractTea</span> &#123; <span class="comment">// 奶茶作为抽象类（抽象的奶茶）</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Size size; <span class="comment">// 尺寸作为桥接属性，存放在类中</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">AbstractTea</span><span class="params">(Size size)</span> &#123; <span class="comment">// 在构造时就需要知道尺寸属性</span></span><br><span class="line">        <span class="built_in">this</span>.size = size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title function_">getType</span><span class="params">()</span>; <span class="comment">// 具体类型依然是由子类去决定</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">RefinedAbstractTea</span> <span class="keyword">extends</span> <span class="title class_">AbstractTea</span> &#123; <span class="comment">// 编写其子类，以实现 getSize 方法</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">RefinedAbstractTea</span><span class="params">(Size size)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(size);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSize</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> size.getSize();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果现在我们需要一杯<em>大杯的芋圆啵啵奶茶</em>，我们可以这样实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Large</span> <span class="keyword">implements</span> <span class="title class_">Size</span> &#123; <span class="comment">// 大杯类</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSize</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;大杯&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">KissTea</span> <span class="keyword">extends</span> <span class="title class_">RefinedAbstractTea</span> &#123; <span class="comment">// 创建一个啵啵芋圆奶茶</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">KissTea</span><span class="params">(Size size)</span> &#123; <span class="comment">// 在构造时需要指定具体的大小实现</span></span><br><span class="line">        <span class="built_in">super</span>(size);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getType</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;啵啵芋圆奶茶&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">KissTea</span> <span class="variable">tea</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">KissTea</span>(<span class="keyword">new</span> <span class="title class_">Large</span>()); <span class="comment">// 大杯的芋圆啵啵奶茶</span></span><br></pre></td></tr></table></figure><h2 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h2><blockquote><p>用于将对象组合成树形结构以表示“部分-整体”的层次结构，使得用户对单个对象和组合对象的使用具有一致性</p></blockquote><p>比较简单，力扣上的树都刷穿了，就不举例演示了</p><h2 id="装饰模式"><a href="#装饰模式" class="headerlink" title="装饰模式"></a>装饰模式</h2><blockquote><p>用于动态地将责任附加到对象上，以扩展其功能，而无需修改其原始类</p></blockquote><p>现在有一个业务实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Base</span> &#123; <span class="comment">// 顶层抽象类，定义了一个 test 方法执行业务</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BaseImpl</span> <span class="keyword">extends</span> <span class="title class_">Base</span> &#123; <span class="comment">// 普通的业务实现类</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;&#125; <span class="comment">// 具体的业务方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以通过装饰者，为其添加新的行为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Decorator</span> <span class="keyword">extends</span> <span class="title class_">Base</span> &#123; <span class="comment">// 装饰者</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Base base; <span class="comment">// 需要将装饰目标组合到类中</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Decorator</span><span class="params">(Base base)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.base = base;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        base.test(); <span class="comment">// 这里暂时还是使用目标的原本方法实现</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DecoratorImpl</span> <span class="keyword">extends</span> <span class="title class_">Decorator</span> &#123; <span class="comment">// 装饰实现</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DecoratorImpl</span><span class="params">(Base base)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(base);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123; <span class="comment">// 对原本的方法进行装饰，我们可以在前后都去添加额外操作</span></span><br><span class="line">        System.out.println(<span class="string">&quot;装饰方法：我是操作前逻辑&quot;</span>);</span><br><span class="line">        <span class="built_in">super</span>.test();</span><br><span class="line">        System.out.println(<span class="string">&quot;装饰方法：我是操作后逻辑&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><blockquote><p>用于控制对其他对象的访问，为其提供一个代理以控制对这个对象的访问</p></blockquote><p>现在有一个目标类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Subject</span> &#123; <span class="comment">// 目标抽象类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SubjectImpl</span> <span class="keyword">extends</span> <span class="title class_">Subject</span> &#123; <span class="comment">// 目标实现类，假设此类无法直接使用，需要我们进行代理</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建代理类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Proxy</span> <span class="keyword">extends</span> <span class="title class_">Subject</span> &#123; <span class="comment">// 代理类</span></span><br><span class="line"></span><br><span class="line">    Subject target; <span class="comment">// 被代理的对象（甚至可以多重代理）</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Proxy</span><span class="params">(Subject subject)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.target = subject;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123; <span class="comment">// 由代理去执行被代理对象的方法，并且我们还可以在前后添油加醋</span></span><br><span class="line">        System.out.println(<span class="string">&quot;代理前绕方法&quot;</span>);</span><br><span class="line">        target.test();</span><br><span class="line">        System.out.println(<span class="string">&quot;代理后绕方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来我们就可以用这个代理类去访问<code>test</code>方法了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Proxy</span>(<span class="keyword">new</span> <span class="title class_">SubjectImpl</span>()).test();</span><br></pre></td></tr></table></figure><h2 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a>外观模式</h2><blockquote><p>用于为复杂系统提供一个简单的统一接口，隐藏其复杂性，使得客户端可以更轻松地与系统交互</p></blockquote><p>假如我们现在要去结婚领证，需要经历三个步骤：<code>排队，结婚，领证...</code></p><p>要是一件一件事去办的话，未免有些过于复杂</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SubSystemA</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;排队&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SubSystemB</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;结婚&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SubSystemC</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;领证&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以添加一个门面，直接一条龙服务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Facade</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">SubSystemA</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SubSystemA</span>();</span><br><span class="line">    <span class="type">SubSystemB</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SubSystemB</span>();</span><br><span class="line">    <span class="type">SubSystemC</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SubSystemC</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">marry</span><span class="params">()</span> &#123; <span class="comment">// 红白喜事一条龙服务</span></span><br><span class="line">        a.test1();</span><br><span class="line">        b.test2();</span><br><span class="line">        c.test3();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Facade</span> <span class="variable">facade</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Facade</span>();</span><br><span class="line">    facade.marry();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="享元模式"><a href="#享元模式" class="headerlink" title="享元模式"></a>享元模式</h2><blockquote><p>用于尽可能减少系统中的重复对象，通过共享已经存在的相似对象来最大程度地节省内存空间和提高性能</p></blockquote><p>以数据库操作为例，将<code>UTIL</code>作为享元对象，可以被用户服务端重复使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DBUtil</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">selectDB</span><span class="params">()</span> &#123;&#125; <span class="comment">// 数据库操作</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DBUtilFactory</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">DBUtil</span> <span class="variable">UTIL</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DBUtil</span>(); <span class="comment">// 享元对象被存放在工厂中</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> DBUtil <span class="title function_">getFlyweight</span><span class="params">()</span> &#123; <span class="comment">// 获取享元对象</span></span><br><span class="line">        <span class="keyword">return</span> UTIL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123; <span class="comment">// 用户服务端</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">DBUtil</span> <span class="variable">util</span> <span class="operator">=</span> DBUtilFactory.getFlyweight(); <span class="comment">// 通过享元工厂拿到 DBUtil 对象</span></span><br><span class="line">        util.selectDB();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="行为型设计模式"><a href="#行为型设计模式" class="headerlink" title="行为型设计模式"></a>行为型设计模式</h1><blockquote><p> 关注系统中对象之间的交互，研究系统在运行时对象之间的相互通信与协作</p></blockquote><h2 id="解释器模式"><a href="#解释器模式" class="headerlink" title="解释器模式"></a>解释器模式</h2><blockquote><p>用于定义语言的文法，并解释语言中的句子</p></blockquote><p>用的比较少，不说了</p><h2 id="模板方法模式"><a href="#模板方法模式" class="headerlink" title="模板方法模式"></a>模板方法模式</h2><blockquote><p>用于定义一个算法的骨架，而将一些步骤延迟到子类中</p></blockquote><p>假如生病了要去医院看病，一般都需要经历这几个流程：</p><p><code>发现身体不舒服 -&gt; 去医院看病 -&gt; 挂号 -&gt; 等待叫号 -&gt; 医生看病开药 -&gt; 拿着处方去拿药</code></p><p>而我们发现，不管是什么病，前四个步骤都是相同的，而后两个步骤医生会因不同的病症，而开不同的药</p><p>那我们就可以将前四个步骤封装为一个模板方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractDiagnosis</span> &#123; <span class="comment">// 抽象诊断方法</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;1. 发现身体不舒服&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;2. 去医院看病&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;3. 挂号&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;4. 等待叫号&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.prescribe(); <span class="comment">// 开处方</span></span><br><span class="line">        <span class="built_in">this</span>.medicine(); <span class="comment">// 拿药</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">prescribe</span><span class="params">()</span>; <span class="comment">// 后两步根据不同的病症有不同的实现</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">medicine</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假如是感冒的病症，就只需要创建子类实现后两个步骤即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ColdDiagnosis</span> <span class="keyword">extends</span> <span class="title class_">AbstractDiagnosis</span> &#123; <span class="comment">// 感冒</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">prescribe</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;5. 一眼丁真，鉴定为假，你这不是感冒，纯粹是想摆烂！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">medicine</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;6. 开点头孢回去吃吧&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">AbstractDiagnosis</span> <span class="variable">diagnosis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ColdDiagnosis</span>();</span><br><span class="line">diagnosis.test();</span><br></pre></td></tr></table></figure><h2 id="责任链模式"><a href="#责任链模式" class="headerlink" title="责任链模式"></a>责任链模式</h2><blockquote><p>用于将请求沿着处理者链传递，直到有一个处理者能够处理该请求为止，实现请求发送者与接收者的解耦</p></blockquote><p>以下使用责任链模式来模拟一个简单的面试过程：<code>一面 -&gt; 二面 -&gt; 三面</code></p><p>先定义一个面试抽象类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Handler</span> &#123; <span class="comment">// 面试抽象类</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Handler successor; <span class="comment">// 这里我们就设计责任链以单链表形式存在，这里存放后继节点</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Handler <span class="title function_">connect</span><span class="params">(Handler successor)</span> &#123; <span class="comment">// 拼接后续节点</span></span><br><span class="line">        <span class="built_in">this</span>.successor = successor;</span><br><span class="line">        <span class="keyword">return</span> successor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handle</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.doHandle(); <span class="comment">// 由不同的子类实现具体处理过程</span></span><br><span class="line">        Optional</span><br><span class="line">                .ofNullable(successor)</span><br><span class="line">                .ifPresent(Handler::handle); <span class="comment">// 责任链上如果还有后继节点，就继续向下传递</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">doHandle</span><span class="params">()</span>; <span class="comment">// 交给子类实现</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现一面，二面，三面这三个子类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FirstHandler</span> <span class="keyword">extends</span> <span class="title class_">Handler</span> &#123; <span class="comment">// 一面</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doHandle</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;============= 白马程序员一面 ==========&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;1. 谈谈你对static关键字的理解？&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;2. 内部类可以调用外部的数据吗？如果是静态的呢？&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;3. hashCode()方法是所有的类都有吗？默认返回的是什么呢？&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecondHandler</span> <span class="keyword">extends</span> <span class="title class_">Handler</span> &#123; <span class="comment">// 二面</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doHandle</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;============= 白马程序员二面 ==========&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;1. 如果我们自己创建一个java.lang包并且编写一个String类，能否实现覆盖JDK默认的？&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;2. HashMap的负载因子有什么作用？变化规律是什么？&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;3. 线程池的运作机制是什么？&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;4. ReentrantLock公平锁和非公平锁的区别是什么？&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThirdHandler</span> <span class="keyword">extends</span> <span class="title class_">Handler</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doHandle</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;============= 白马程序员三面 ==========&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;1. synchronized关键字了解吗？如何使用？底层是如何实现的？&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;2. IO和NIO的区别在哪里？NIO三大核心组件？&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;3. TCP握手和挥手流程？少一次握手可以吗？为什么？&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;4. 操作系统中PCB是做什么的？运行机制是什么？&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>开始面试！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Handler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FirstHandler</span>(); <span class="comment">// 一面首当其冲</span></span><br><span class="line">    handler</span><br><span class="line">            .connect(<span class="keyword">new</span> <span class="title class_">SecondHandler</span>()) <span class="comment">// 继续连接二面和三面</span></span><br><span class="line">            .connect(<span class="keyword">new</span> <span class="title class_">ThirdHandler</span>());</span><br><span class="line">    handler.handle(); <span class="comment">// 开始面试</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h2><blockquote><p>用于将请求封装成对象，以便将其参数化、队列化、操作化，并支持可撤销操作</p></blockquote><p>以遥控器开空调举例</p><p>先创建<code>接收者接口</code>和<code>命令抽象类</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Receiver</span> &#123; <span class="comment">// 命令接受者接口</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">action</span><span class="params">()</span>; <span class="comment">// 具体行为</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Command</span> &#123; <span class="comment">// 命令抽象类</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Receiver receiver;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">Command</span><span class="params">(Receiver receiver)</span> &#123; <span class="comment">// 指定此命令对应的接收者</span></span><br><span class="line">        <span class="built_in">this</span>.receiver = receiver;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">()</span> &#123;</span><br><span class="line">        receiver.action(); <span class="comment">// 执行命令，实际上就是让接收者开始干活</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再分别创建<code>遥控器</code>，<code>空调</code>，<code>命令</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Controller</span> &#123; <span class="comment">// 遥控器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">call</span><span class="params">(Command command)</span> &#123;</span><br><span class="line">        command.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AirConditioner</span> <span class="keyword">implements</span> <span class="title class_">Receiver</span> &#123; <span class="comment">// 空调（接收者）</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">action</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;空调已开启，呼呼呼！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OpenCommand</span> <span class="keyword">extends</span> <span class="title class_">Command</span> &#123; <span class="comment">// 命令：开启空调</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">OpenCommand</span><span class="params">(AirConditioner airConditioner)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(airConditioner);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>开空调：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">AirConditioner</span> <span class="variable">airConditioner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AirConditioner</span>();</span><br><span class="line">    Controller.call(<span class="keyword">new</span> <span class="title class_">OpenCommand</span>(airConditioner)); <span class="comment">// 直接通过遥控器来发送空调开启命令</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h2><blockquote><p>用于提供一种顺序访问集合对象元素的方法，而无需暴露其内部表示</p></blockquote><p>将自己的集合类实现<code>Iterable</code>接口，就可以支持迭代遍历了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayCollection</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">Iterable</span>&lt;T&gt; &#123; <span class="comment">// 实现 Iterable 接口以支持迭代</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> T[] array; <span class="comment">// 底层使用一个数组来存放数据</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">ArrayCollection</span><span class="params">(T[] array)</span> &#123; <span class="comment">// 构造器不对外开放</span></span><br><span class="line">        <span class="built_in">this</span>.array = array;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; ArrayCollection&lt;T&gt; <span class="title function_">of</span><span class="params">(T[] array)</span> &#123; <span class="comment">// 开个静态方法直接把数组转换成 ArrayCollection</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayCollection</span>&lt;&gt;(array);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Iterator&lt;T&gt; <span class="title function_">iterator</span><span class="params">()</span> &#123; <span class="comment">// 需要实现 iterator 方法，此方法会返回一个迭代器，用于迭代我们集合中的元素</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayIterator</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayIterator</span> <span class="keyword">implements</span> <span class="title class_">Iterator</span>&lt;T&gt; &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> <span class="variable">cur</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">// 当前的迭代位置</span></span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span> &#123; <span class="comment">// 判断是否还有下一个元素</span></span><br><span class="line">            <span class="keyword">return</span> cur &lt; array.length;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> T <span class="title function_">next</span><span class="params">()</span> &#123; <span class="comment">// 返回当前指针位置的元素并向后移动一位</span></span><br><span class="line">            <span class="keyword">return</span> array[cur++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>尝试使用<code>for in</code>语法去遍历一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    String[] arr = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;AAA&quot;</span>, <span class="string">&quot;BBB&quot;</span>, <span class="string">&quot;CCC&quot;</span>, <span class="string">&quot;DDD&quot;</span>&#125;;</span><br><span class="line">    ArrayCollection&lt;String&gt; collection = ArrayCollection.of(arr);</span><br><span class="line">    <span class="keyword">for</span> (String s: collection) &#123;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="中介者模式"><a href="#中介者模式" class="headerlink" title="中介者模式"></a>中介者模式</h2><blockquote><p>用于减少对象之间的直接通信，通过引入中介者对象来集中处理对象间的交互，降低耦合度</p></blockquote><p>以用户<code>租房</code>和<code>出租房</code>为例，可以引入一个<code>房产中介</code>，来协调<code>租房</code>和<code>出租房</code>这两种行为</p><p>创建<code>房产中介</code>和<code>用户</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Mediator</span> &#123; <span class="comment">// 房产中介</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, User&gt; userMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(); <span class="comment">// 目前在出租的房子地址和房子主人</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">register</span><span class="params">(String address, User user)</span> &#123; <span class="comment">// 出租房屋的人，需要告诉中介他的房屋在哪里</span></span><br><span class="line">        userMap.put(address, user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">find</span><span class="params">(String address)</span> &#123; <span class="comment">// 通过此方法来看看有没有对应的房源</span></span><br><span class="line">        <span class="keyword">return</span> userMap.get(address);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123; <span class="comment">// 用户可以是出售房屋的一方，也可以是寻找房屋的一方</span></span><br><span class="line">    String name; <span class="comment">// 姓名</span></span><br><span class="line">    String tel; <span class="comment">// 电话</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String name, String tel)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.tel = tel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">find</span><span class="params">(String address, Mediator mediator)</span> &#123; <span class="comment">// 找房子的话，需要一个中介和你具体想找的地方</span></span><br><span class="line">        <span class="keyword">return</span> mediator.find(address);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>模拟用户租房和出租房行为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user0</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;刘女士&quot;</span>, <span class="string">&quot;10086&quot;</span>); <span class="comment">// 出租人</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;李先生&quot;</span>, <span class="string">&quot;10010&quot;</span>); <span class="comment">// 找房人</span></span><br><span class="line">    <span class="type">Mediator</span> <span class="variable">mediator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Mediator</span>(); <span class="comment">// 黑心中介</span></span><br><span class="line"></span><br><span class="line">    mediator.register(<span class="string">&quot;成都市武侯区天府五街白马程序员&quot;</span>, user0); <span class="comment">// 先把房子给中介挂上去</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> user1.find(<span class="string">&quot;成都市武侯区天府五街下硅谷&quot;</span>, mediator);  <span class="comment">// 开始找房子</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="备忘录模式"><a href="#备忘录模式" class="headerlink" title="备忘录模式"></a>备忘录模式</h2><blockquote><p>用于在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态，以便在需要时恢复对象到之前的状态</p></blockquote><p>创建一个学生类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String currentWork; <span class="comment">// 当前正在做的事情</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> percentage; <span class="comment">// 当前的工作完成百分比</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">work</span><span class="params">(String currentWork)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.currentWork = currentWork;</span><br><span class="line">        <span class="built_in">this</span>.percentage = <span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建一个保存类，以支持保存和回滚操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">State</span> &#123; <span class="comment">// 保存类</span></span><br><span class="line">    String currentWork;</span><br><span class="line">    <span class="type">int</span> percentage;</span><br><span class="line"></span><br><span class="line">    State(String currentWork, <span class="type">int</span> percentage) &#123; <span class="comment">// 仅开放给同一个包下的 Student 类使用</span></span><br><span class="line">        <span class="built_in">this</span>.currentWork = currentWork;</span><br><span class="line">        <span class="built_in">this</span>.percentage = percentage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> State <span class="title function_">save</span><span class="params">()</span> &#123; <span class="comment">// 保存</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">State</span>(currentWork, percentage);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">restore</span><span class="params">(State state)</span> &#123; <span class="comment">// 回滚</span></span><br><span class="line">        <span class="built_in">this</span>.currentWork = state.currentWork;</span><br><span class="line">        <span class="built_in">this</span>.percentage = state.percentage;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">    student.work(<span class="string">&quot;学 Java&quot;</span>); <span class="comment">// 开始学 Java</span></span><br><span class="line">    <span class="type">State</span> <span class="variable">savedState</span> <span class="operator">=</span> student.save(); <span class="comment">// 保存一下当前的状态</span></span><br><span class="line">    student.work(<span class="string">&quot;打电动&quot;</span>); <span class="comment">// 刚打开B站播放视频，学一半开始摆烂了</span></span><br><span class="line">    student.restore(savedState); <span class="comment">// 两级反转！回到上一个保存的状态</span></span><br><span class="line">    System.out.println(student); <span class="comment">// 回到学 Java 的状态</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h2><blockquote><p>用于定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，其所有依赖对象都会收到通知并自动更新</p></blockquote><p>将自己的类继承自<code>Observable</code>，就可以支持观察者模式了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Subject</span> <span class="keyword">extends</span> <span class="title class_">Observable</span> &#123; <span class="comment">// 继承此抽象类表示支持观察者模式</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">modify</span><span class="params">()</span> &#123; <span class="comment">// 对对象进行修改</span></span><br><span class="line">        <span class="built_in">this</span>.setChanged(); <span class="comment">// 设定为已修改状态</span></span><br><span class="line">        <span class="built_in">this</span>.notifyObservers(<span class="keyword">new</span> <span class="title class_">Date</span>()); <span class="comment">// 通知所有的观察者</span></span><br><span class="line">        <span class="comment">// 注意：只有在已修改状态下通知观察者才会有效，并且可以给观察者传递参数</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Subject</span> <span class="variable">subject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Subject</span>();</span><br><span class="line">    subject.addObserver((o, arg) -&gt; System.out.println(<span class="string">&quot;监听到变化，并得到参数：&quot;</span> + arg));</span><br><span class="line">    subject.modify(); <span class="comment">// 进行修改操作</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="状态模式"><a href="#状态模式" class="headerlink" title="状态模式"></a>状态模式</h2><blockquote><p>用于允许一个对象在其内部状态发生改变时改变其行为，使得对象的状态变化不直接影响其行为</p></blockquote><p>首先定义状态，有<code>正常</code>和<code>摆烂</code>两种状态</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">State</span> &#123; <span class="comment">// 定义状态</span></span><br><span class="line">    NORMAL, LAZY</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建一个学生类来演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> State state; <span class="comment">// 使用一个成员来存储状态</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setState</span><span class="params">(State state)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.state = state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">study</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> (state) &#123; <span class="comment">//根据不同的状态，学习方法会有不同的结果</span></span><br><span class="line">            <span class="keyword">case</span> LAZY:</span><br><span class="line">                System.out.println(<span class="string">&quot;只要我不努力，老板就别想过上想要的生活，开摆！&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> NORMAL:</span><br><span class="line">                System.out.println(<span class="string">&quot;拼搏百天，我要上清华大学！&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">    student.setState(State.NORMAL); <span class="comment">// 正常模式</span></span><br><span class="line">    student.study();</span><br><span class="line">    student.setState(State.LAZY); <span class="comment">// 摆烂模式</span></span><br><span class="line">    student.study();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h2><blockquote><p>用于定义一系列算法，并使其相互之间可以互换，使得算法的变化独立于使用算法的客户端</p></blockquote><p>创建策略接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Strategy</span> &#123; <span class="comment">// 策略接口</span></span><br><span class="line"></span><br><span class="line">    <span class="type">Strategy</span> <span class="variable">SINGLE</span> <span class="operator">=</span> Arrays::sort; <span class="comment">// 单线程排序方案</span></span><br><span class="line">    <span class="type">Strategy</span> <span class="variable">PARALLEL</span> <span class="operator">=</span> Arrays::parallelSort; <span class="comment">// 并行排序方案</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span>[] array)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据不同的策略，执行的算法也会不同</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Sorter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Strategy strategy; <span class="comment">// 策略</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStrategy</span><span class="params">(Strategy strategy)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.strategy = strategy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span>[] array)</span>&#123;</span><br><span class="line">        strategy.sort(array);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Sorter</span> <span class="variable">sorter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Sorter</span>();</span><br><span class="line">    sorter.setStrategy(Strategy.PARALLEL); <span class="comment">// 指定为并行排序方案</span></span><br><span class="line">    sorter.sort(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">9</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">7</span>&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="访问者模式"><a href="#访问者模式" class="headerlink" title="访问者模式"></a>访问者模式</h2><blockquote><p>用于将算法与数据结构分离，使得可以在不改变数据结构的前提下定义新的操作</p></blockquote><p>奖项类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Prize</span> &#123; <span class="comment">// 奖</span></span><br><span class="line">    String name; <span class="comment">// 比赛名称</span></span><br><span class="line">    String level; <span class="comment">// 等级</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Prize</span><span class="params">(String name, String level)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.level = level;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getLevel</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> level;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建一个访问者类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Visitor</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">visit</span><span class="params">(Prize prize)</span>; <span class="comment">// 访问我们的奖项</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不同的访问者会根据访问到的内容，而做出不同的行为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Teacher</span> <span class="keyword">implements</span> <span class="title class_">Visitor</span> &#123; <span class="comment">// 指导老师</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">visit</span><span class="params">(Prize prize)</span> &#123; <span class="comment">// 它只关心你得了什么奖以及是几等奖，这也关乎老师的荣誉</span></span><br><span class="line">        System.out.println(<span class="string">&quot;你得奖是什么奖？&quot;</span> + prize.name);</span><br><span class="line">        System.out.println(<span class="string">&quot;你得了几等奖？&quot;</span> + prize.level);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Boss</span> <span class="keyword">implements</span> <span class="title class_">Visitor</span> &#123; <span class="comment">// 你的公司老板</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">visit</span><span class="params">(Prize prize)</span> &#123; <span class="comment">// 你的老板只关心这些能不能为公司带来什么效益，奖本身并不重要</span></span><br><span class="line">        System.out.println(<span class="string">&quot;你的奖项大么，能够为公司带来什么效益么？&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;还不如老老实实加班给我多干干，别去搞这些没用的&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Classmate</span> <span class="keyword">implements</span> <span class="title class_">Visitor</span> &#123; <span class="comment">// 你的同学</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">visit</span><span class="params">(Prize prize)</span> &#123; <span class="comment">// 你的同学也关心你得了什么奖，不过是因为你是他的奖学金竞争对手，他其实并不希望你得奖</span></span><br><span class="line">        System.out.println(<span class="string">&quot;你得了&quot;</span> + prize.name + <span class="string">&quot;奖啊，还可以&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;不过这个奖没什么含金量，下次别去了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Family</span> <span class="keyword">implements</span> <span class="title class_">Visitor</span> &#123; <span class="comment">// 你的家人</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">visit</span><span class="params">(Prize prize)</span> &#123; <span class="comment">// 你的家人并不是最关心你得了什么奖，而是先关心你自己然后才是奖项，他们才是真正希望你好的人</span></span><br><span class="line">        System.out.println(<span class="string">&quot;孩子，辛苦了，有没有好好照顾自己啊&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;你得了什么奖啊？&quot;</span> + prize.name + <span class="string">&quot;，很不错，要继续加油啊！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lombok 代码简化框架</title>
      <link href="/2024/01/15/03%20Lombok%20%E4%BB%A3%E7%A0%81%E7%AE%80%E5%8C%96%E6%A1%86%E6%9E%B6/"/>
      <url>/2024/01/15/03%20Lombok%20%E4%BB%A3%E7%A0%81%E7%AE%80%E5%8C%96%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="Lombok-代码简化框架"><a href="#Lombok-代码简化框架" class="headerlink" title="Lombok 代码简化框架"></a>Lombok 代码简化框架</h1><blockquote><p>Lombok 是一个 Java 库，旨在通过注解简化 Java 代码的编写，尤其是在处理模型类时</p><p>它通过减少样板代码，使得开发者能够更专注于业务逻辑</p></blockquote><h1 id="安装-Lombok"><a href="#安装-Lombok" class="headerlink" title="安装 Lombok"></a>安装 Lombok</h1><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.34<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="基础功能"><a href="#基础功能" class="headerlink" title="基础功能"></a>基础功能</h1><h2 id="Getter"><a href="#Getter" class="headerlink" title="@Getter"></a>@Getter</h2><blockquote><p>生成所有字段的 <code>getter</code> 方法。使用此注解后，Lombok 会为类中的每个字段自动生成对应的 <code>getter</code> 方法，无需手动编写</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.FIELD, ElementType.TYPE&#125;)</span> <span class="comment">// 该注解可以应用于字段和类型</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.SOURCE)</span> <span class="comment">// 该注解仅在源代码中存在，不会被编译到字节码中</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Getter &#123;</span><br><span class="line"></span><br><span class="line">    AccessLevel <span class="title function_">value</span><span class="params">()</span> <span class="keyword">default</span> AccessLevel.PUBLIC; <span class="comment">// 生成方法的访问级别</span></span><br><span class="line"></span><br><span class="line">    AnyAnnotation[] onMethod() <span class="keyword">default</span> &#123;&#125;; <span class="comment">// 为生成的方法指定其他注解</span></span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">lazy</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">false</span>; <span class="comment">// 是否生成懒加载的方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Setter"><a href="#Setter" class="headerlink" title="@Setter"></a>@Setter</h2><blockquote><p>生成所有字段的 <code>setter</code> 方法。应用此注解后，Lombok 会为类中的每个字段自动生成对应的 <code>setter</code> 方法，无需手动编写</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.FIELD, ElementType.TYPE&#125;)</span> <span class="comment">// 该注解可以应用于字段和类型</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.SOURCE)</span> <span class="comment">// 该注解仅在源代码中存在，不会被编译到字节码中</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Setter &#123;</span><br><span class="line"></span><br><span class="line">    AccessLevel <span class="title function_">value</span><span class="params">()</span> <span class="keyword">default</span> AccessLevel.PUBLIC; <span class="comment">// 生成方法的访问级别</span></span><br><span class="line"></span><br><span class="line">    AnyAnnotation[] onMethod() <span class="keyword">default</span> &#123;&#125;; <span class="comment">// 为生成的方法指定其他注解</span></span><br><span class="line"></span><br><span class="line">    AnyAnnotation[] onParam() <span class="keyword">default</span> &#123;&#125;; <span class="comment">// 为生成的方法参数指定其他注解</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="AllArgsConstructor"><a href="#AllArgsConstructor" class="headerlink" title="@AllArgsConstructor"></a>@AllArgsConstructor</h2><blockquote><p>生成一个包含所有字段的构造函数。这个注解会为类生成一个构造函数，该构造函数包含类中所有字段作为参数</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span> <span class="comment">// 该注解可以应用于类型（类、接口、枚举等）</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.SOURCE)</span> <span class="comment">// 该注解仅在源代码中存在，不会被编译到字节码中</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> AllArgsConstructor &#123;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">staticName</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>; <span class="comment">// 生成的静态构造函数的名称</span></span><br><span class="line"></span><br><span class="line">    AnyAnnotation[] onConstructor() <span class="keyword">default</span> &#123;&#125;; <span class="comment">// 为生成的构造函数指定其他注解</span></span><br><span class="line"></span><br><span class="line">    AccessLevel <span class="title function_">access</span><span class="params">()</span> <span class="keyword">default</span> AccessLevel.PUBLIC; <span class="comment">// 生成构造函数的访问级别</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="NoArgsConstructor"><a href="#NoArgsConstructor" class="headerlink" title="@NoArgsConstructor"></a>@NoArgsConstructor</h2><blockquote><p>生成一个无参构造函数。使用此注解后，Lombok 会自动为类生成一个没有参数的构造函数</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span> <span class="comment">// 该注解可以应用于类型（类、接口、枚举等）</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.SOURCE)</span> <span class="comment">// 该注解仅在源代码中存在，编译后不保留</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> NoArgsConstructor &#123;</span><br><span class="line">    </span><br><span class="line">    String <span class="title function_">staticName</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>; <span class="comment">// 生成的静态构造函数的名称</span></span><br><span class="line"></span><br><span class="line">    AnyAnnotation[] onConstructor() <span class="keyword">default</span> &#123;&#125;; <span class="comment">// 为生成的构造函数指定其他注解</span></span><br><span class="line"></span><br><span class="line">    AccessLevel <span class="title function_">access</span><span class="params">()</span> <span class="keyword">default</span> AccessLevel.PUBLIC; <span class="comment">// 生成构造函数的访问级别</span></span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">force</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">false</span>; <span class="comment">// 是否强制生成构造函数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="RequiredArgsConstructor"><a href="#RequiredArgsConstructor" class="headerlink" title="@RequiredArgsConstructor"></a>@RequiredArgsConstructor</h2><blockquote><p>生成一个包含所有 <code>final</code> 字段和带有 <code>@NonNull</code> 注解字段的构造函数。这个注解会为类生成一个构造函数，参数包括所有 <code>final</code> 字段及 <code>@NonNull</code> 注解的字段</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span> <span class="comment">// 该注解可以应用于类型（类、接口、枚举等）</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.SOURCE)</span> <span class="comment">// 该注解仅在源代码中存在，不会被编译到字节码中</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> RequiredArgsConstructor &#123;</span><br><span class="line">    </span><br><span class="line">    String <span class="title function_">staticName</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>; <span class="comment">// 生成的静态构造函数的名称</span></span><br><span class="line"></span><br><span class="line">    AnyAnnotation[] onConstructor() <span class="keyword">default</span> &#123;&#125;; <span class="comment">// 为生成的构造函数指定其他注解</span></span><br><span class="line"></span><br><span class="line">    AccessLevel <span class="title function_">access</span><span class="params">()</span> <span class="keyword">default</span> AccessLevel.PUBLIC; <span class="comment">// 生成构造函数的访问级别</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ToString"><a href="#ToString" class="headerlink" title="@ToString"></a>@ToString</h2><blockquote><p>生成 <code>toString()</code> 方法。应用此注解后，Lombok 会为类生成一个 <code>toString()</code> 方法，通常包含所有字段的值</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span> <span class="comment">// 该注解可以应用于类型（类、接口、枚举等）</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.SOURCE)</span> <span class="comment">// 该注解仅在源代码中存在，不会被编译到字节码中</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ToString &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">includeFieldNames</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">true</span>; <span class="comment">// 是否包含字段名称</span></span><br><span class="line"></span><br><span class="line">    String[] exclude() <span class="keyword">default</span> &#123;&#125;; <span class="comment">// 要排除的字段名称数组</span></span><br><span class="line"></span><br><span class="line">    String[] of() <span class="keyword">default</span> &#123;&#125;; <span class="comment">// 仅包括指定字段名称的数组</span></span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">callSuper</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">false</span>; <span class="comment">// 是否调用父类的 toString 方法</span></span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">doNotUseGetters</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">false</span>; <span class="comment">// 是否不使用 getter 方法</span></span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">onlyExplicitlyIncluded</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">false</span>; <span class="comment">// 是否仅包括显式包含的字段</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Target(&#123;ElementType.FIELD&#125;)</span> <span class="comment">// 该注解可以应用于字段</span></span><br><span class="line">    <span class="meta">@Retention(RetentionPolicy.SOURCE)</span> <span class="comment">// 该注解仅在源代码中存在，不会被编译到字节码中</span></span><br><span class="line">    <span class="keyword">public</span> <span class="meta">@interface</span> Exclude &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Target(&#123;ElementType.FIELD, ElementType.METHOD&#125;)</span> <span class="comment">// 该注解可以应用于字段和方法</span></span><br><span class="line">    <span class="meta">@Retention(RetentionPolicy.SOURCE)</span> <span class="comment">// 该注解仅在源代码中存在，不会被编译到字节码中</span></span><br><span class="line">    <span class="keyword">public</span> <span class="meta">@interface</span> Include &#123;</span><br><span class="line">        <span class="type">int</span> <span class="title function_">rank</span><span class="params">()</span> <span class="keyword">default</span> <span class="number">0</span>; <span class="comment">// 字段的排名</span></span><br><span class="line">        String <span class="title function_">name</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>; <span class="comment">// 字段的名称</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="EqualsAndHashCode"><a href="#EqualsAndHashCode" class="headerlink" title="@EqualsAndHashCode"></a>@EqualsAndHashCode</h2><blockquote><p>生成 <code>equals()</code> 和 <code>hashCode()</code> 方法。使用此注解后，Lombok 会为类生成 <code>equals()</code> 和 <code>hashCode()</code> 方法，基于类中的字段</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span> <span class="comment">// 该注解可以应用于类型（类、接口、枚举等）</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.SOURCE)</span> <span class="comment">// 该注解仅在源代码中存在，不会被编译到字节码中</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EqualsAndHashCode &#123;</span><br><span class="line"></span><br><span class="line">    String[] exclude() <span class="keyword">default</span> &#123;&#125;; <span class="comment">// 要排除的字段名称数组</span></span><br><span class="line"></span><br><span class="line">    String[] of() <span class="keyword">default</span> &#123;&#125;; <span class="comment">// 仅包括指定字段名称的数组</span></span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">callSuper</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">false</span>; <span class="comment">// 是否调用父类的 equals 和 hashCode 方法</span></span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">doNotUseGetters</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">false</span>; <span class="comment">// 是否不使用 getter 方法</span></span><br><span class="line"></span><br><span class="line">    CacheStrategy <span class="title function_">cacheStrategy</span><span class="params">()</span> <span class="keyword">default</span> EqualsAndHashCode.CacheStrategy.NEVER; <span class="comment">// 缓存策略</span></span><br><span class="line"></span><br><span class="line">    AnyAnnotation[] onParam() <span class="keyword">default</span> &#123;&#125;; <span class="comment">// 为参数指定其他注解</span></span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">onlyExplicitlyIncluded</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">false</span>; <span class="comment">// 是否仅包括显式包含的字段</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">enum</span> <span class="title class_">CacheStrategy</span> &#123;</span><br><span class="line"></span><br><span class="line">        NEVER, <span class="comment">// 不缓存</span></span><br><span class="line">        LAZY; <span class="comment">// 延迟缓存</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="title function_">CacheStrategy</span><span class="params">()</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Target(&#123;ElementType.FIELD&#125;)</span> <span class="comment">// 该注解可以应用于字段</span></span><br><span class="line">    <span class="meta">@Retention(RetentionPolicy.SOURCE)</span> <span class="comment">// 该注解仅在源代码中存在，不会被编译到字节码中</span></span><br><span class="line">    <span class="keyword">public</span> <span class="meta">@interface</span> Exclude &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Target(&#123;ElementType.FIELD, ElementType.METHOD&#125;)</span> <span class="comment">// 该注解可以应用于字段和方法</span></span><br><span class="line">    <span class="meta">@Retention(RetentionPolicy.SOURCE)</span> <span class="comment">// 该注解仅在源代码中存在，不会被编译到字节码中</span></span><br><span class="line">    <span class="keyword">public</span> <span class="meta">@interface</span> Include &#123;</span><br><span class="line"></span><br><span class="line">        String <span class="title function_">replaces</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>; <span class="comment">// 替代的字段名称</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="title function_">rank</span><span class="params">()</span> <span class="keyword">default</span> <span class="number">0</span>; <span class="comment">// 字段的排名</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Data"><a href="#Data" class="headerlink" title="@Data"></a>@Data</h2><blockquote><p>生成 <code>getter</code>、<code>setter</code>、<code>toString()</code>、<code>equals()</code> 和 <code>hashCode()</code> 方法。此注解是 <code>@Getter</code>、<code>@Setter</code>、<code>@ToString</code>、<code>@EqualsAndHashCode</code> 的组合，适用于需要常规数据操作的类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span> <span class="comment">// 该注解可以应用于类型（类、接口、枚举等）</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.SOURCE)</span> <span class="comment">// 该注解仅在源代码中存在，不会被编译到字节码中</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Data &#123;</span><br><span class="line">    String <span class="title function_">staticConstructor</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>; <span class="comment">// 生成的静态构造函数的名称</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Value"><a href="#Value" class="headerlink" title="@Value"></a>@Value</h2><blockquote><p>生成不可变的类（即字段为 <code>final</code> 的类），包括 <code>getter</code>、<code>toString()</code>、<code>equals()</code> 和 <code>hashCode()</code> 方法。此注解会使类的字段都被声明为 <code>final</code>，并且自动生成构造函数</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span> <span class="comment">// 该注解可以应用于类型（类、接口、枚举等）</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.SOURCE)</span> <span class="comment">// 该注解仅在源代码中存在，不会被编译到字节码中</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Value &#123;</span><br><span class="line">    String <span class="title function_">staticConstructor</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>; <span class="comment">// 生成的静态构造函数的名称</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="高级功能"><a href="#高级功能" class="headerlink" title="高级功能"></a>高级功能</h1><h2 id="Builder"><a href="#Builder" class="headerlink" title="@Builder"></a>@Builder</h2><blockquote><p>生成一个建造者模式的实现。应用此注解后，Lombok 会为类生成一个 <code>Builder</code> 类，使得创建实例时可以使用流式 API</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE, ElementType.METHOD, ElementType.CONSTRUCTOR&#125;)</span> <span class="comment">// 该注解可以应用于类型、方法和构造函数</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.SOURCE)</span> <span class="comment">// 该注解仅在源代码中存在，不会被编译到字节码中</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Builder &#123;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">builderMethodName</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;builder&quot;</span>; <span class="comment">// 生成的 builder 方法名称</span></span><br><span class="line"></span><br><span class="line">    String <span class="title function_">buildMethodName</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;build&quot;</span>; <span class="comment">// 生成的 build 方法名称</span></span><br><span class="line"></span><br><span class="line">    String <span class="title function_">builderClassName</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>; <span class="comment">// 生成的 builder 类名称</span></span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">toBuilder</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">false</span>; <span class="comment">// 是否生成 toBuilder 方法</span></span><br><span class="line"></span><br><span class="line">    AccessLevel <span class="title function_">access</span><span class="params">()</span> <span class="keyword">default</span> AccessLevel.PUBLIC; <span class="comment">// 生成的 builder 类的访问级别</span></span><br><span class="line"></span><br><span class="line">    String <span class="title function_">setterPrefix</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>; <span class="comment">// setter 方法的前缀</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Target(&#123;ElementType.FIELD&#125;)</span> <span class="comment">// 该注解可以应用于字段</span></span><br><span class="line">    <span class="meta">@Retention(RetentionPolicy.SOURCE)</span> <span class="comment">// 该注解仅在源代码中存在，不会被编译到字节码中</span></span><br><span class="line">    <span class="keyword">public</span> <span class="meta">@interface</span> Default &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Target(&#123;ElementType.FIELD, ElementType.PARAMETER&#125;)</span> <span class="comment">// 该注解可以应用于字段和参数</span></span><br><span class="line">    <span class="meta">@Retention(RetentionPolicy.SOURCE)</span> <span class="comment">// 该注解仅在源代码中存在，不会被编译到字节码中</span></span><br><span class="line">    <span class="keyword">public</span> <span class="meta">@interface</span> ObtainVia &#123;</span><br><span class="line">        String <span class="title function_">field</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>; <span class="comment">// 通过字段获取的名称</span></span><br><span class="line"></span><br><span class="line">        String <span class="title function_">method</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>; <span class="comment">// 通过方法获取的名称</span></span><br><span class="line"></span><br><span class="line">        <span class="type">boolean</span> <span class="title function_">isStatic</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">false</span>; <span class="comment">// 是否为静态方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Cleanup"><a href="#Cleanup" class="headerlink" title="@Cleanup"></a>@Cleanup</h2><blockquote><p>自动调用资源的 <code>close()</code> 方法来清理资源。使用此注解后，Lombok 会在字段的使用范围结束时自动调用 <code>close()</code> 方法，适用于需要清理的资源</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.LOCAL_VARIABLE&#125;)</span> <span class="comment">// 该注解可以应用于局部变量</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.SOURCE)</span> <span class="comment">// 该注解仅在源代码中存在，不会被编译到字节码中</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Cleanup &#123;</span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;close&quot;</span>; <span class="comment">// 资源清理的方法名称</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="SneakyThrows"><a href="#SneakyThrows" class="headerlink" title="@SneakyThrows"></a>@SneakyThrows</h2><blockquote><p>允许在方法中抛出检查型异常而不需要显式地声明它们。使用此注解后，Lombok 会在编译时将方法中的检查型异常包装成运行时异常，以避免手动处理</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.METHOD, ElementType.CONSTRUCTOR&#125;)</span> <span class="comment">// 该注解可以应用于方法和构造函数</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.SOURCE)</span> <span class="comment">// 该注解仅在源代码中存在，不会被编译到字节码中</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SneakyThrows &#123;</span><br><span class="line">    Class&lt;? <span class="keyword">extends</span> <span class="title class_">Throwable</span>&gt;[] value() <span class="keyword">default</span> &#123;Throwable.class&#125;; <span class="comment">// 指定可能抛出的异常类型</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="NonNull"><a href="#NonNull" class="headerlink" title="@NonNull"></a>@NonNull</h2><blockquote><p>自动生成对字段或方法参数的非空检查。此注解会在类的构造函数、<code>setter</code> 方法或方法参数中自动添加空值检查，以确保字段或参数不为空</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.FIELD, ElementType.METHOD, ElementType.PARAMETER, ElementType.LOCAL_VARIABLE, ElementType.TYPE_USE&#125;)</span> <span class="comment">// 该注解可以应用于字段、方法、参数、局部变量以及类型使用</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.CLASS)</span> <span class="comment">// 该注解在编译时存在，但不会在源代码中存在</span></span><br><span class="line"><span class="meta">@Documented</span> <span class="comment">// 该注解将包含在生成的文档中</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> NonNull &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Synchronized"><a href="#Synchronized" class="headerlink" title="@Synchronized"></a>@Synchronized</h2><blockquote><p>生成线程安全的同步方法。使用此注解后，Lombok 会为方法生成同步代码，以确保在多线程环境下的安全执行</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.METHOD&#125;)</span> <span class="comment">// 该注解可以应用于方法</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.SOURCE)</span> <span class="comment">// 该注解仅在源代码中存在，不会被编译到字节码中</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Synchronized &#123;</span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>; <span class="comment">// 用于指定同步的锁对象或其他相关信息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Locked"><a href="#Locked" class="headerlink" title="@Locked"></a>@Locked</h2><blockquote><p>用于标记锁定的类或方法。此注解的功能是确保在执行方法时对象的锁定，通常与多线程环境相关。请注意，这是一个自定义注解，不属于标准 Lombok 注解集合</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.METHOD&#125;)</span> <span class="comment">// 该注解可以应用于方法</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.SOURCE)</span> <span class="comment">// 该注解仅在源代码中存在，不会被编译到字节码中</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Locked &#123;</span><br><span class="line">    </span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>; <span class="comment">// 用于指定锁的相关信息</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Target(&#123;ElementType.METHOD&#125;)</span> <span class="comment">// 该注解可以应用于方法</span></span><br><span class="line">    <span class="meta">@Retention(RetentionPolicy.SOURCE)</span> <span class="comment">// 该注解仅在源代码中存在，不会被编译到字节码中</span></span><br><span class="line">    <span class="keyword">public</span> <span class="meta">@interface</span> Read &#123;</span><br><span class="line">        String <span class="title function_">value</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>; <span class="comment">// 用于指定读取锁的相关信息</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Target(&#123;ElementType.METHOD&#125;)</span> <span class="comment">// 该注解可以应用于方法</span></span><br><span class="line">    <span class="meta">@Retention(RetentionPolicy.SOURCE)</span> <span class="comment">// 该注解仅在源代码中存在，不会被编译到字节码中</span></span><br><span class="line">    <span class="keyword">public</span> <span class="meta">@interface</span> Write &#123;</span><br><span class="line">        String <span class="title function_">value</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>; <span class="comment">// 用于指定写入锁的相关信息</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Log"><a href="#Log" class="headerlink" title="@Log"></a>@Log</h2><blockquote><p>生成日志记录器字段。应用此注解后，Lombok 会为类生成一个日志记录器字段，支持 <code>java.util.logging</code>、<code>org.slf4j</code> 等日志框架</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention(RetentionPolicy.SOURCE)</span> <span class="comment">// 该注解仅在源代码中存在，不会被编译到字节码中</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span> <span class="comment">// 该注解可以应用于类型（类、接口、枚举等）</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Log &#123;</span><br><span class="line">    String <span class="title function_">topic</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>; <span class="comment">// 用于指定日志主题</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="实验性功能"><a href="#实验性功能" class="headerlink" title="实验性功能"></a>实验性功能</h1><h2 id="Accessors"><a href="#Accessors" class="headerlink" title="@Accessors"></a>@Accessors</h2><blockquote><p>定制生成的 <code>getter</code> 和 <code>setter</code> 方法的行为。使用此注解后，可以控制 <code>getter</code> 和 <code>setter</code> 方法的命名风格，比如链式调用</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE, ElementType.FIELD&#125;)</span> <span class="comment">// 该注解可以应用于类型（类、接口、枚举等）和字段</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.SOURCE)</span> <span class="comment">// 该注解仅在源代码中存在，不会被编译到字节码中</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Accessors &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">fluent</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">false</span>; <span class="comment">// 是否生成流式访问器</span></span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">chain</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">false</span>; <span class="comment">// 是否支持链式调用</span></span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">makeFinal</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">false</span>; <span class="comment">// 是否将生成的访问器设置为 final</span></span><br><span class="line"></span><br><span class="line">    String[] prefix() <span class="keyword">default</span> &#123;&#125;; <span class="comment">// 指定生成访问器的方法名前缀</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ExtensionMethod"><a href="#ExtensionMethod" class="headerlink" title="@ExtensionMethod"></a>@ExtensionMethod</h2><blockquote><p>允许在类中添加扩展方法。这个注解可以让你为现有类添加新的方法，就像它们是该类的一部分一样</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span> <span class="comment">// 该注解可以应用于类型（类、接口、枚举等）</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.SOURCE)</span> <span class="comment">// 该注解仅在源代码中存在，不会被编译到字节码中</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ExtensionMethod &#123;</span><br><span class="line">    </span><br><span class="line">    Class&lt;?&gt;[] value(); <span class="comment">// 指定扩展方法的目标类</span></span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">suppressBaseMethods</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">true</span>; <span class="comment">// 是否抑制基础方法的生成</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="FieldDefaults"><a href="#FieldDefaults" class="headerlink" title="@FieldDefaults"></a>@FieldDefaults</h2><blockquote><p>配置字段的默认访问级别和其他属性。应用此注解后，Lombok 会为类中的字段设置默认的访问级别和其他属性，如是否为 <code>final</code></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span> <span class="comment">// 该注解可以应用于类型（类、接口、枚举等）</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.SOURCE)</span> <span class="comment">// 该注解仅在源代码中存在，不会被编译到字节码中</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> FieldDefaults &#123;</span><br><span class="line">    </span><br><span class="line">    AccessLevel <span class="title function_">level</span><span class="params">()</span> <span class="keyword">default</span> AccessLevel.NONE; <span class="comment">// 字段的访问级别</span></span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">makeFinal</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">false</span>; <span class="comment">// 是否将字段设置为 final</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="UtilityClass"><a href="#UtilityClass" class="headerlink" title="@UtilityClass"></a>@UtilityClass</h2><blockquote><p>标记一个工具类，所有字段和方法都为静态的。使用此注解后，Lombok 会自动将类中的字段和方法标记为 <code>static</code>，并禁止实例化该类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span> <span class="comment">// 该注解可以应用于类型（类、接口、枚举等）</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.SOURCE)</span> <span class="comment">// 该注解仅在源代码中存在，不会被编译到字节码中</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> UtilityClass &#123;</span><br><span class="line">    <span class="comment">// 此注解用于标记工具类，通常工具类包含静态方法和字段</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="StandardException"><a href="#StandardException" class="headerlink" title="@StandardException"></a>@StandardException</h2><blockquote><p>用于标记标准异常类。此注解会生成具有标准构造函数的异常类，并可配置其访问级别</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span> <span class="comment">// 该注解可以应用于类型（类、接口、枚举等）</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.SOURCE)</span> <span class="comment">// 该注解仅在源代码中存在，不会被编译到字节码中</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> StandardException &#123;</span><br><span class="line">    AccessLevel <span class="title function_">access</span><span class="params">()</span> <span class="keyword">default</span> AccessLevel.PUBLIC; <span class="comment">// 异常类的访问级别</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 注解 </tag>
            
            <tag> Lombok </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Matlab</title>
      <link href="/2024/01/05/02%20Matlab/"/>
      <url>/2024/01/05/02%20Matlab/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="变量定义和基本运算"><a href="#变量定义和基本运算" class="headerlink" title="变量定义和基本运算"></a>变量定义和基本运算</h1><h2 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h2><h3 id="整数"><a href="#整数" class="headerlink" title="整数"></a>整数</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>;</span><br></pre></td></tr></table></figure><h3 id="小数"><a href="#小数" class="headerlink" title="小数"></a>小数</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.1</span>;</span><br></pre></td></tr></table></figure><h2 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h2><h3 id="矩阵的生成"><a href="#矩阵的生成" class="headerlink" title="矩阵的生成"></a>矩阵的生成</h3><h4 id="直接生成"><a href="#直接生成" class="headerlink" title="直接生成"></a>直接生成</h4><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>; <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>; <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]; <span class="comment">% 【矩阵】</span></span><br><span class="line"><span class="number">1</span>: <span class="number">1</span>: <span class="number">10</span>; <span class="comment">% 起始值: 步长: 结束值【矩阵】</span></span><br><span class="line"><span class="number">1</span>: <span class="number">10</span>; <span class="comment">% 起始值: 结束值【矩阵】(步长为 1 时可省略，等价于上面)</span></span><br></pre></td></tr></table></figure><h4 id="函数生成"><a href="#函数生成" class="headerlink" title="函数生成"></a>函数生成</h4><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">linspace</span>(<span class="number">0</span>, <span class="number">10</span>, <span class="number">5</span>); <span class="comment">% 起始值，结束值，生成个数(默认 100)【等差生成指定个数的一维矩阵】</span></span><br><span class="line"><span class="built_in">eye</span>(<span class="number">4</span>); <span class="comment">% 维数【单位阵】</span></span><br><span class="line"><span class="built_in">zeros</span>(<span class="number">1</span>, <span class="number">4</span>); <span class="comment">% 行，列【全零阵】</span></span><br><span class="line"><span class="built_in">ones</span>(<span class="number">4</span>, <span class="number">1</span>); <span class="comment">% 行，列【全一阵】</span></span><br><span class="line"><span class="built_in">rand</span>(<span class="number">4</span>); <span class="comment">% 维数【0-1分布随机阵】</span></span><br><span class="line"><span class="built_in">randn</span>(<span class="number">4</span>); <span class="comment">% 维数【高斯分布随机阵】</span></span><br></pre></td></tr></table></figure><h3 id="矩阵的运算"><a href="#矩阵的运算" class="headerlink" title="矩阵的运算"></a>矩阵的运算</h3><h4 id="基本运算"><a href="#基本运算" class="headerlink" title="基本运算"></a>基本运算</h4><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a * b <span class="comment">% 矩阵乘法</span></span><br><span class="line">a .* b <span class="comment">% 点乘</span></span><br><span class="line">a ./ b <span class="comment">% 点除，a / b</span></span><br><span class="line">a .\ b <span class="comment">% 点除，b / a</span></span><br><span class="line">a .^ b <span class="comment">% 点幂</span></span><br></pre></td></tr></table></figure><h4 id="高级运算"><a href="#高级运算" class="headerlink" title="高级运算"></a>高级运算</h4><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">det(a); <span class="comment">% 矩阵【行列式】</span></span><br><span class="line">rank(a); <span class="comment">% 矩阵【矩阵的秩】</span></span><br><span class="line">a&#x27;; <span class="comment">% 矩阵【转置矩阵】</span></span><br><span class="line">inv(a); <span class="comment">% 矩阵【逆矩阵】</span></span><br><span class="line">pinv(a); <span class="comment">% 矩阵【伪逆矩阵】</span></span><br><span class="line"><span class="built_in">compan</span>(a); <span class="comment">% 矩阵【伴随矩阵】</span></span><br><span class="line">eig(a); <span class="comment">% 矩阵【特征向量，特征值对角阵】</span></span><br><span class="line"><span class="built_in">diag</span>(a, <span class="number">0</span>); <span class="comment">% 矩阵，主对角线上方第 k 条斜线【对角矩阵】</span></span><br><span class="line"><span class="built_in">triu</span>(a, <span class="number">0</span>); <span class="comment">% 矩阵，主对角线上方第 k 条斜线【上三角矩阵】</span></span><br><span class="line"><span class="built_in">tril</span>(a, <span class="number">0</span>); <span class="comment">% 矩阵，主对角线上方第 k 条斜线【下三角矩阵】</span></span><br></pre></td></tr></table></figure><h3 id="矩阵的修改"><a href="#矩阵的修改" class="headerlink" title="矩阵的修改"></a>矩阵的修改</h3><h4 id="元素替换"><a href="#元素替换" class="headerlink" title="元素替换"></a>元素替换</h4><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = b; <span class="comment">% 【全局替换】</span></span><br><span class="line">a(<span class="number">2</span>, <span class="number">3</span>) = <span class="number">4</span>; <span class="comment">% 行，列【元素替换】</span></span><br><span class="line">a(<span class="number">1</span>,:) = [<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>]; <span class="comment">% 行，列【替换行】([]表示删除该行)</span></span><br><span class="line">a(: ,<span class="number">1</span>) = []; <span class="comment">% 行，列【替换列】([]表示删除该列)</span></span><br></pre></td></tr></table></figure><h4 id="矩阵拼接"><a href="#矩阵拼接" class="headerlink" title="矩阵拼接"></a>矩阵拼接</h4><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span>(<span class="number">1</span>, a, b); <span class="comment">% 1，矩阵，矩阵【垂直拼接】</span></span><br><span class="line"><span class="built_in">cat</span>(<span class="number">2</span>, a, b); <span class="comment">% 2，矩阵，矩阵【水平拼接】</span></span><br></pre></td></tr></table></figure><h4 id="矩阵变维"><a href="#矩阵变维" class="headerlink" title="矩阵变维"></a>矩阵变维</h4><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">reshape</span>(a, <span class="number">1</span>, <span class="number">9</span>); <span class="comment">% 矩阵，行，列【矩阵变维】</span></span><br></pre></td></tr></table></figure><h3 id="信息获取"><a href="#信息获取" class="headerlink" title="信息获取"></a>信息获取</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">size</span>(a); <span class="comment">% 矩阵【行数，列数】</span></span><br><span class="line"><span class="built_in">length</span>(a); <span class="comment">% 矩阵【max(行数，列数)】</span></span><br></pre></td></tr></table></figure><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]; <span class="comment">% 【行向量】</span></span><br></pre></td></tr></table></figure><h3 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>; <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>; <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]; <span class="comment">% 【矩阵】</span></span><br></pre></td></tr></table></figure><h3 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mul(: ,: ,<span class="number">1</span>) = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>; <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]; <span class="comment">% 前两维设定为给定矩阵，放在第三维的第 1 个位置</span></span><br><span class="line">mul(: ,: ,<span class="number">2</span>) = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>; <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]; <span class="comment">% 前两维设定为给定矩阵，放在第三维的第 2 个位置</span></span><br><span class="line"></span><br><span class="line">mul = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>; <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]; <span class="comment">% 默认放在第三维的第 1 个位置</span></span><br><span class="line">mul(: ,: ,<span class="number">2</span>) = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>; <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]; <span class="comment">% 扩展第三维的第 2 个位置</span></span><br><span class="line"></span><br><span class="line">mul_1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>; <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line">mul_2 = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>; <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line">mul = <span class="built_in">cat</span>(<span class="number">3</span>, mul_1, mul_2); <span class="comment">% 维数，数组，数组【多维数组】</span></span><br></pre></td></tr></table></figure><h2 id="多项式"><a href="#多项式" class="headerlink" title="多项式"></a>多项式</h2><h3 id="多项式的创建"><a href="#多项式的创建" class="headerlink" title="多项式的创建"></a>多项式的创建</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">p = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>] <span class="comment">% 【系数向量】按 x 降幂排列，最右边是常数项</span></span><br><span class="line">f1 = poly2str(p, <span class="string">&#x27;x&#x27;</span>); <span class="comment">% 系数向量，自变量字符【字符串】生成好看的字符串 f1 = x^3 + 2 x^2 + 3 x + 4，不被认可的运算式</span></span><br><span class="line">f2 = poly2sym(p); <span class="comment">% 系数向量【字符串】生成可用的符号函数 f2 = x^3 + 2*x^2 + 3*x + 4</span></span><br></pre></td></tr></table></figure><h3 id="多项式求值"><a href="#多项式求值" class="headerlink" title="多项式求值"></a>多项式求值</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">y1 = polyval(p, <span class="number">4</span>); <span class="comment">% 系数向量，x 的值【数字】代入求值</span></span><br><span class="line">y1 = polyval(p, x); <span class="comment">% 系数向量，向量【向量】对每个值单独求值</span></span><br></pre></td></tr></table></figure><h3 id="多项式求根"><a href="#多项式求根" class="headerlink" title="多项式求根"></a>多项式求根</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">r = roots(p); <span class="comment">% 系数向量【根植矩阵】</span></span><br><span class="line">p0 = poly(r); <span class="comment">% 根植矩阵【系数向量】</span></span><br></pre></td></tr></table></figure><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h3 id="字符串的创建"><a href="#字符串的创建" class="headerlink" title="字符串的创建"></a>字符串的创建</h3><h4 id="直接生成-1"><a href="#直接生成-1" class="headerlink" title="直接生成"></a>直接生成</h4><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;hello world&#x27;</span>;</span><br><span class="line"><span class="string">&#x27;I&#x27;&#x27;m a student&#x27;</span>; <span class="comment">% 字符串中单引号写两遍</span></span><br><span class="line">[<span class="string">&#x27;I&#x27;&#x27;m&#x27;</span> <span class="string">&#x27;a&#x27;</span> <span class="string">&#x27;student&#x27;</span>]; <span class="comment">% 方括号连接多个字符串</span></span><br></pre></td></tr></table></figure><h4 id="函数生成-1"><a href="#函数生成-1" class="headerlink" title="函数生成"></a>函数生成</h4><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">strcat(s1, s2); <span class="comment">% 字符串，字符串【字符串】拼接字符串</span></span><br><span class="line">strvcat(s1, s2); <span class="comment">% 字符串，字符串【多行字符串】拼接多行字符串</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">abs</span>(s); <span class="comment">% 字符串【字符串】取 s 的 ASCII 值</span></span><br><span class="line">double(s); <span class="comment">% 字符串【字符串】取 s 的 ASCII 值</span></span><br><span class="line">char(s); <span class="comment">% 字符串【字符串】将 ASCII 值读取为字符串</span></span><br><span class="line"></span><br><span class="line">num2str(x); <span class="comment">% 整数【字符串】数字转字符串</span></span><br><span class="line">dec2hex(a); <span class="comment">% 整数【字符串】十进制转十六进制</span></span><br></pre></td></tr></table></figure><h3 id="字符串的操作"><a href="#字符串的操作" class="headerlink" title="字符串的操作"></a>字符串的操作</h3><h4 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h4><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">strcmp(s1, s2); <span class="comment">% 字符串，字符串【整数】相等为 1，不等为 0</span></span><br><span class="line">strncmp(s1, s2, n); <span class="comment">% 字符串，字符串，整数【整数】判断前 n 个字符是否相等</span></span><br><span class="line">strcmpi(s1, s2); <span class="comment">% 字符串，字符串【整数】忽略大小写的比较</span></span><br><span class="line">strncmpi(s1, s2, n); <span class="comment">% 字符串，字符串，整数【整数】忽略大小写比较前 n 个字符是否相等</span></span><br></pre></td></tr></table></figure><h4 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h4><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">strfind(s1, s2); <span class="comment">% 字符串，字符串【整数】在 s1 中找 s2 出现的位置</span></span><br><span class="line">strmatch(s1, s2); <span class="comment">% 字符串，字符串数组【整数】在 s2 中找以 s1 为前缀的字符串个数</span></span><br></pre></td></tr></table></figure><h4 id="截取"><a href="#截取" class="headerlink" title="截取"></a>截取</h4><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strtok(s); <span class="comment">% 字符串【字符串】截取 s 第一个分隔符前的部分</span></span><br></pre></td></tr></table></figure><h4 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h4><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strrep(s0, s1, s2); <span class="comment">% 字符串，字符串，字符串【字符串】在 s0 中用 s2 替换 s1</span></span><br></pre></td></tr></table></figure><h4 id="转大小写"><a href="#转大小写" class="headerlink" title="转大小写"></a>转大小写</h4><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lower(s); <span class="comment">% 字符串【字符串】转小写</span></span><br><span class="line">upper(s); <span class="comment">% 字符串【字符串】转大写</span></span><br></pre></td></tr></table></figure><h4 id="对齐"><a href="#对齐" class="headerlink" title="对齐"></a>对齐</h4><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">strjust(s, <span class="string">&#x27;left&#x27;</span>); <span class="comment">% 字符串，&#x27;left&#x27;【字符串】左对齐</span></span><br><span class="line">strjust(s, <span class="string">&#x27;center&#x27;</span>); <span class="comment">% 字符串，&#x27;center&#x27;【字符串】居中对齐</span></span><br><span class="line">strjust(s, <span class="string">&#x27;right&#x27;</span>); <span class="comment">% 字符串，&#x27;right&#x27;【字符串】右对齐</span></span><br></pre></td></tr></table></figure><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">strtrim(s); <span class="comment">% 字符串【字符串】删除 s 中的开头和结尾的空格</span></span><br><span class="line">eval(s); <span class="comment">% 字符串【NULL】将 s 作为代码执行</span></span><br></pre></td></tr></table></figure><h1 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h1><h2 id="选择语句"><a href="#选择语句" class="headerlink" title="选择语句"></a>选择语句</h2><h3 id="if-elseif-else-end"><a href="#if-elseif-else-end" class="headerlink" title="if - elseif - else - end"></a>if - elseif - else - end</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> a &gt; <span class="number">0</span></span><br><span class="line"><span class="built_in">disp</span>(a + <span class="number">1</span>); <span class="comment">% 显示函数</span></span><br><span class="line"><span class="keyword">elseif</span> a == <span class="number">0</span></span><br><span class="line"><span class="built_in">disp</span>(a);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">disp</span>(a - <span class="number">1</span>);</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="switch-case-otherwise-end"><a href="#switch-case-otherwise-end" class="headerlink" title="switch - case - otherwise - end"></a>switch - case - otherwise - end</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> a</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span></span><br><span class="line">        <span class="built_in">disp</span>(a);</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span></span><br><span class="line">        <span class="built_in">disp</span>(a + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">otherwise</span> <span class="comment">% 其他情况</span></span><br><span class="line">        <span class="built_in">disp</span>(<span class="string">&#x27;aaa&#x27;</span>);</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="try-catch"><a href="#try-catch" class="headerlink" title="try - catch"></a>try - catch</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span></span><br><span class="line">    z = x * y;</span><br><span class="line"><span class="keyword">catch</span> <span class="comment">% 若 try 出错，则执行</span></span><br><span class="line">    z = x .* y;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><h3 id="for"><a href="#for" class="headerlink" title="for"></a>for</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">0</span>: <span class="number">1</span>: <span class="number">10</span> <span class="comment">% 初始值:步长:结束值</span></span><br><span class="line"><span class="built_in">disp</span>(<span class="built_in">i</span>); <span class="comment">% 循环体内不可修改循环变量</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="while"><a href="#while" class="headerlink" title="while"></a>while</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">while</span> a &gt; <span class="number">2</span></span><br><span class="line"><span class="built_in">disp</span>(a);</span><br><span class="line">a = a - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="程序控制"><a href="#程序控制" class="headerlink" title="程序控制"></a>程序控制</h2><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">continue</span> <span class="comment">% 跳过本轮循环</span></span><br><span class="line"><span class="keyword">break</span> <span class="comment">% 跳出当前循环</span></span><br><span class="line"><span class="keyword">return</span> <span class="comment">% 跳出程序并返回</span></span><br></pre></td></tr></table></figure><h1 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h1><h2 id="脚本文件"><a href="#脚本文件" class="headerlink" title="脚本文件"></a>脚本文件</h2><blockquote><p>用于执行一系列 MATLAB 命令或语句，通常用于快速执行一组指令而不需要函数接口或参数传递</p></blockquote><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">clear;</span><br><span class="line">r = <span class="number">5</span>;</span><br><span class="line">s = <span class="built_in">pi</span> * r * r;</span><br><span class="line">p = <span class="number">2</span> * <span class="built_in">pi</span> * r;</span><br><span class="line"><span class="built_in">disp</span>(s);</span><br><span class="line"><span class="built_in">disp</span>(p);</span><br></pre></td></tr></table></figure><p>文件名假设为：<code>myexp.m</code></p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myexp; <span class="comment">% 调用格式</span></span><br></pre></td></tr></table></figure><h2 id="函数文件"><a href="#函数文件" class="headerlink" title="函数文件"></a>函数文件</h2><blockquote><p>可以通过输入参数和返回值与其他代码进行交互，并且可以在 MATLAB 程序中多次调用</p></blockquote><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[s, p]</span> = <span class="title">circ</span><span class="params">(r)</span> % 主函数；返回值，参数列表</span></span><br><span class="line">    s = <span class="built_in">pi</span> * r * type0(r);</span><br><span class="line">    p = <span class="number">2</span> * <span class="built_in">pi</span> * type1(r);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">y0</span> = <span class="title">type0</span><span class="params">(a)</span> % 子函数</span></span><br><span class="line">    y0 = a + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">y1</span> = <span class="title">type1</span><span class="params">(a)</span></span></span><br><span class="line">    y1 = a + <span class="number">4</span>;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>文件命名应与函数名一致，文件名<code>circ.m</code></p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[a, b] = circ(<span class="number">5</span>); <span class="comment">% 调用格式</span></span><br></pre></td></tr></table></figure><p>函数输入输出参数可以不确定</p><ul><li><p><code>varargin</code>：输入参数内容的元胞数组</p></li><li><p><code>varargout</code>：输出参数内容的元胞数组</p></li></ul><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">varargout</span> = <span class="title">fun</span><span class="params">(varargin)</span></span></span><br><span class="line">    x = <span class="built_in">length</span>(varargin);</span><br><span class="line">    varargout&#123;<span class="number">1</span>&#125; = x;</span><br><span class="line">    varargout&#123;<span class="number">2</span>&#125; = x + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h1 id="图像绘制"><a href="#图像绘制" class="headerlink" title="图像绘制"></a>图像绘制</h1><p>首先为例子设定一系列散点<code>x</code>和函数<code>y</code></p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">0</span>: <span class="number">0.1</span>: <span class="number">2</span> * <span class="built_in">pi</span>; <span class="comment">% x 轴取样点，实际上是一个向量</span></span><br><span class="line">y1 = <span class="built_in">sin</span>(x); <span class="comment">% 本质是将向量 x 的每一个元素做一个映射，实际上是一个向量</span></span><br><span class="line">y2 = <span class="built_in">cos</span>(x);</span><br></pre></td></tr></table></figure><h2 id="二维曲线"><a href="#二维曲线" class="headerlink" title="二维曲线"></a>二维曲线</h2><h3 id="基本函数"><a href="#基本函数" class="headerlink" title="基本函数"></a>基本函数</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">figure</span>; <span class="comment">% 下一次绘图在新窗口</span></span><br><span class="line"><span class="built_in">plot</span>(y1); <span class="comment">% 向量【绘制函数 y1】</span></span><br><span class="line"><span class="built_in">plot</span>(x, y1); <span class="comment">% 横坐标向量，纵坐标向量【绘制函数 y1】</span></span><br><span class="line"><span class="built_in">plot</span>([y1&#x27;, y2&#x27;]); <span class="comment">% 向量矩阵【同时绘制多个函数】</span></span><br><span class="line"><span class="built_in">plot</span>(x, y1, x, y2); <span class="comment">% 横坐标向量，纵坐标向量...【同时绘制多个函数】</span></span><br></pre></td></tr></table></figure><h3 id="格式设置"><a href="#格式设置" class="headerlink" title="格式设置"></a>格式设置</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">plot</span>(x, y1, <span class="string">&#x27;b:o&#x27;</span>); <span class="comment">% 横坐标向量，纵坐标向量，线性图形格式设置字符串【绘制函数 y1】</span></span><br><span class="line">axis([<span class="number">-1</span> * <span class="built_in">pi</span>, <span class="number">3</span> * <span class="built_in">pi</span>, <span class="number">-1.5</span>, <span class="number">1.5</span>]); <span class="comment">% 横坐标范围，纵坐标范围【设定横纵坐标范围】</span></span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">颜色</th><th align="center">符号</th></tr></thead><tbody><tr><td align="center">黑</td><td align="center">k</td></tr><tr><td align="center">白</td><td align="center">w</td></tr><tr><td align="center">蓝</td><td align="center">b</td></tr><tr><td align="center">绿</td><td align="center">g</td></tr><tr><td align="center">红</td><td align="center">r</td></tr><tr><td align="center">青</td><td align="center">c</td></tr><tr><td align="center">紫</td><td align="center">m</td></tr><tr><td align="center">黄</td><td align="center">y</td></tr></tbody></table><table><thead><tr><th align="center">曲线样式</th><th align="center">符号</th></tr></thead><tbody><tr><td align="center">实线</td><td align="center">-</td></tr><tr><td align="center">虚线</td><td align="center">–</td></tr><tr><td align="center">点线</td><td align="center">:</td></tr><tr><td align="center">点画线</td><td align="center">-.</td></tr></tbody></table><table><thead><tr><th align="center">点样式</th><th align="center">符号</th></tr></thead><tbody><tr><td align="center">实点</td><td align="center">.</td></tr><tr><td align="center">圆圈</td><td align="center">o</td></tr><tr><td align="center">叉</td><td align="center">x</td></tr><tr><td align="center">十字</td><td align="center">+</td></tr><tr><td align="center">星号</td><td align="center">*</td></tr><tr><td align="center">方块</td><td align="center">s</td></tr><tr><td align="center">钻石</td><td align="center">d</td></tr><tr><td align="center">下三角</td><td align="center">v</td></tr><tr><td align="center">上三角</td><td align="center">^</td></tr><tr><td align="center">左三角</td><td align="center">&lt;</td></tr><tr><td align="center">右三角</td><td align="center">&gt;</td></tr><tr><td align="center">五角星</td><td align="center">p</td></tr><tr><td align="center">六角星</td><td align="center">h</td></tr></tbody></table><h3 id="图形修饰"><a href="#图形修饰" class="headerlink" title="图形修饰"></a>图形修饰</h3><h4 id="标题标签"><a href="#标题标签" class="headerlink" title="标题标签"></a>标题标签</h4><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">title(<span class="string">&#x27;a title&#x27;</span>); <span class="comment">% 字符串【图像标题】</span></span><br><span class="line">xlabel(<span class="string">&#x27;this is x&#x27;</span>); <span class="comment">% 字符串【x 轴标记】</span></span><br><span class="line">ylabel(<span class="string">&#x27;this is y&#x27;</span>); <span class="comment">% 字符串【y 轴标记】</span></span><br><span class="line">zlabel(<span class="string">&#x27;this is z&#x27;</span>); <span class="comment">% 字符串【z 轴标记】</span></span><br></pre></td></tr></table></figure><h4 id="图形保持"><a href="#图形保持" class="headerlink" title="图形保持"></a>图形保持</h4><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">plot</span>(x, y1);</span><br><span class="line"><span class="built_in">hold</span> on; <span class="comment">% 在原有窗口 y1 曲线上增加绘制下一个图形</span></span><br><span class="line"><span class="built_in">plot</span>(x, y2); <span class="comment">% y2 在同一窗口内被绘制</span></span><br><span class="line"><span class="built_in">hold</span> off;</span><br></pre></td></tr></table></figure><h4 id="分割绘制"><a href="#分割绘制" class="headerlink" title="分割绘制"></a>分割绘制</h4><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">subplot(<span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>); <span class="comment">% 整数，整数，整数【分割成 2 x 2 的区域，在第 1 块区域绘制下一个图形】</span></span><br><span class="line"><span class="built_in">plot</span>(x, y1); <span class="comment">% y1 被绘制在 4 块区域的第 1 块</span></span><br><span class="line">subplot(<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>); <span class="comment">% 整数，整数，整数【分割成 2 x 2 的区域，在第 2 块区域绘制下一个图形】</span></span><br><span class="line"><span class="built_in">plot</span>(x, y2); <span class="comment">% y2 被绘制在 4 块区域的第 2 块</span></span><br></pre></td></tr></table></figure><h2 id="二维特殊图形"><a href="#二维特殊图形" class="headerlink" title="二维特殊图形"></a>二维特殊图形</h2><h3 id="柱状图"><a href="#柱状图" class="headerlink" title="柱状图"></a>柱状图</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bar(x, y, <span class="number">0.8</span>, <span class="string">&quot;grouped&quot;</span>); <span class="comment">% 横坐标向量，纵坐标向量，宽度，样式【垂直柱状图】</span></span><br><span class="line">barh(x, y, <span class="number">0.8</span>, <span class="string">&quot;grouped&quot;</span>); <span class="comment">% 横坐标向量，纵坐标向量，宽度，样式【水平柱状图】</span></span><br><span class="line">bar3(x, y, <span class="number">0.8</span>, <span class="string">&quot;grouped&quot;</span>); <span class="comment">% 横坐标向量，纵坐标向量，宽度，样式【三维柱状图】</span></span><br><span class="line">barh3(x, y, <span class="number">0.8</span>, <span class="string">&quot;grouped&quot;</span>); <span class="comment">% 横坐标向量，纵坐标向量，宽度，样式【水平三维柱状图】</span></span><br></pre></td></tr></table></figure><ul><li><strong>宽度：</strong>默认为<code>0.8</code>，大于<code>1</code>各条会重叠</li><li><strong>样式：</strong>默认为<code>grouped</code>（分组式），还有另一种<code>stacked</code>（堆栈式）</li></ul><h3 id="饼形图"><a href="#饼形图" class="headerlink" title="饼形图"></a>饼形图</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pie(x, [<span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span>], &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>&#125;); <span class="comment">% 向量，explode 向量，标签数组【二维饼形图】</span></span><br><span class="line">pie3(x, [<span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span>], &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>&#125;); <span class="comment">% 向量，explode 向量，标签数组【三维饼形图】</span></span><br></pre></td></tr></table></figure><ul><li><strong><code>explode</code>向量：</strong>与<code>x</code>同长度，为<code>1</code>表示该元素被分离突出显示，为<code>0</code>表示不分离，默认为<code>0</code></li><li><strong>标签数组：</strong>与<code>x</code>同长度，每个元素的标签</li></ul><h3 id="直方图"><a href="#直方图" class="headerlink" title="直方图"></a>直方图</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hist(y, n); <span class="comment">% 向量，把横坐标分为 n 段绘制【直方图】</span></span><br><span class="line">hist(y, x); <span class="comment">% 向量，用于指定每段中间值的向量【直方图】</span></span><br></pre></td></tr></table></figure><h3 id="离散数据图"><a href="#离散数据图" class="headerlink" title="离散数据图"></a>离散数据图</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">stairs(x, y, <span class="string">&#x27;b-o&#x27;</span>); <span class="comment">% 横坐标向量，纵坐标向量，线性图形格式设置字符串【阶梯图】</span></span><br><span class="line">candle(HI, LO, CL, OP); <span class="comment">% 最高价格向量，最低价格向量，收盘价格向量，开盘价格向量【蜡烛图】</span></span><br></pre></td></tr></table></figure><h2 id="三维曲线曲面"><a href="#三维曲线曲面" class="headerlink" title="三维曲线曲面"></a>三维曲线曲面</h2><h3 id="三维曲线"><a href="#三维曲线" class="headerlink" title="三维曲线"></a>三维曲线</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">0</span>: <span class="number">0.1</span>: <span class="number">2</span> * <span class="built_in">pi</span>;</span><br><span class="line">y = <span class="built_in">sin</span>(x);</span><br><span class="line">z = <span class="built_in">cos</span>(x);</span><br><span class="line"><span class="built_in">plot3</span>(x, y, z, <span class="string">&#x27;b-*&#x27;</span>); <span class="comment">% x 轴向量，y 轴向量，z 轴向量【绘制函数】</span></span><br></pre></td></tr></table></figure><h3 id="三维曲面"><a href="#三维曲面" class="headerlink" title="三维曲面"></a>三维曲面</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">-5</span>: <span class="number">0.1</span>: <span class="number">5</span>; <span class="comment">% x 轴的采样点</span></span><br><span class="line">y = <span class="number">-4</span>: <span class="number">0.1</span>: <span class="number">4</span>; <span class="comment">% y 轴的采样点</span></span><br><span class="line">[X, Y] = <span class="built_in">meshgrid</span>(x, y); <span class="comment">% 得到 xoy 面网格点</span></span><br><span class="line">Z = X .^ <span class="number">2</span> + Y .^ <span class="number">2</span>;</span><br><span class="line">mesh(X, Y, Z); <span class="comment">% 网格点，网格点，网格点【三维网格】</span></span><br><span class="line">surf(X, Y, Z); <span class="comment">% 网格点，网格点，网格点【三维表面图】</span></span><br></pre></td></tr></table></figure><h1 id="数据统计与计算"><a href="#数据统计与计算" class="headerlink" title="数据统计与计算"></a>数据统计与计算</h1><h2 id="数据统计"><a href="#数据统计" class="headerlink" title="数据统计"></a>数据统计</h2><h3 id="最值"><a href="#最值" class="headerlink" title="最值"></a>最值</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">y = <span class="built_in">min</span>(X); <span class="comment">% 向量【向量的最小值】</span></span><br><span class="line">y = <span class="built_in">min</span>(X); <span class="comment">% 矩阵【每一列的最小值的行向量】</span></span><br><span class="line">y = <span class="built_in">min</span>(A, [], <span class="number">2</span>); <span class="comment">% 矩阵【每一行的最小值的列向量】</span></span><br><span class="line">[y, k] = <span class="built_in">min</span>(X); <span class="comment">% 矩阵【每一列的最小值的行向量，该最小值在矩阵中第一次出现的索引】</span></span><br><span class="line"></span><br><span class="line">y = <span class="built_in">max</span>(X); <span class="comment">% 向量【向量的最大值】</span></span><br><span class="line">y = <span class="built_in">max</span>(X); <span class="comment">% 矩阵【每一列的最大值的行向量】</span></span><br><span class="line">y = <span class="built_in">max</span>(A, [], <span class="number">2</span>); <span class="comment">% 矩阵【每一行的最大值的列向量】</span></span><br><span class="line">[y, k] = <span class="built_in">max</span>(X); <span class="comment">% 矩阵【每一列的最大值的行向量，该最大值在矩阵中第一次出现的索引】</span></span><br></pre></td></tr></table></figure><h3 id="均值"><a href="#均值" class="headerlink" title="均值"></a>均值</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">y = <span class="built_in">mean</span>(X); <span class="comment">% 向量【向量的均值】</span></span><br><span class="line">y = <span class="built_in">mean</span>(X); <span class="comment">% 矩阵【每一列的均值的行向量】</span></span><br><span class="line">y = <span class="built_in">mean</span>(A, <span class="number">2</span>); <span class="comment">% 矩阵【每一行的均值的列向量】</span></span><br></pre></td></tr></table></figure><h3 id="中值"><a href="#中值" class="headerlink" title="中值"></a>中值</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">y = median(X); <span class="comment">% 向量【向量的中值】</span></span><br><span class="line">y = median(X); <span class="comment">% 矩阵【每一列的中值的行向量】</span></span><br><span class="line">y = median(A, <span class="number">2</span>); <span class="comment">% 矩阵【每一行的中值的列向量】</span></span><br></pre></td></tr></table></figure><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sort</span>(A, <span class="number">1</span>, <span class="string">&#x27;ascend&#x27;</span>); <span class="comment">% 矩阵，[1|2]，[&#x27;ascend&#x27;|&#x27;descend&#x27;]【排序后的矩阵】</span></span><br></pre></td></tr></table></figure><ul><li><p><strong><code>1</code>：</strong>按列排序，默认选项</p></li><li><p><strong><code>2</code>：</strong>按行排序</p></li><li><p><strong><code>ascend</code>：</strong>升序排序，默认选项</p></li><li><p><strong><code>descend</code>：</strong>逆序排序</p></li></ul><h3 id="求和"><a href="#求和" class="headerlink" title="求和"></a>求和</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sum(X); <span class="comment">% 矩阵【值】求和后的值</span></span><br></pre></td></tr></table></figure><h3 id="求积"><a href="#求积" class="headerlink" title="求积"></a>求积</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">prod(X); <span class="comment">% 矩阵【值】求积后的值</span></span><br></pre></td></tr></table></figure><h3 id="累加"><a href="#累加" class="headerlink" title="累加"></a>累加</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cumsum(X); <span class="comment">% 矩阵【矩阵】累加后的矩阵</span></span><br></pre></td></tr></table></figure><h3 id="累乘"><a href="#累乘" class="headerlink" title="累乘"></a>累乘</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cumprod(X); <span class="comment">% 矩阵【矩阵】累乘后的矩阵</span></span><br></pre></td></tr></table></figure><h2 id="数据计算"><a href="#数据计算" class="headerlink" title="数据计算"></a>数据计算</h2><h3 id="函数极值"><a href="#函数极值" class="headerlink" title="函数极值"></a>函数极值</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = fminsearch(fun, x0); <span class="comment">% 函数，数字【数字】在给定的值附近，寻找最小值点</span></span><br><span class="line">x = fmaxsearch(fun, x0); <span class="comment">% 函数，数字【数字】在给定的值附近，寻找最大值点</span></span><br></pre></td></tr></table></figure><h3 id="函数零点"><a href="#函数零点" class="headerlink" title="函数零点"></a>函数零点</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x = fzero(fun, x0); <span class="comment">% 函数，数字【数字】在给定的值附近，寻找零点</span></span><br></pre></td></tr></table></figure><h1 id="符号对象"><a href="#符号对象" class="headerlink" title="符号对象"></a>符号对象</h1><h2 id="符号对象的创建"><a href="#符号对象的创建" class="headerlink" title="符号对象的创建"></a>符号对象的创建</h2><h3 id="符号常量"><a href="#符号常量" class="headerlink" title="符号常量"></a>符号常量</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p = sym(<span class="built_in">sin</span>(<span class="built_in">pi</span> / <span class="number">3</span>), <span class="string">&#x27;r&#x27;</span>); <span class="comment">% 数字，[&#x27;d&#x27;|&#x27;f&#x27;|&#x27;e&#x27;|&#x27;r&#x27;]【符号常量】</span></span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">符号</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">d</td><td align="center">浮点数</td></tr><tr><td align="center">f</td><td align="center">有理分式的浮点数</td></tr><tr><td align="center">e</td><td align="center">有理数（带估计误差）</td></tr><tr><td align="center">r</td><td align="center">有理数</td></tr></tbody></table><h3 id="符号变量"><a href="#符号变量" class="headerlink" title="符号变量"></a>符号变量</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">syms x; <span class="comment">% 声明符号变量</span></span><br></pre></td></tr></table></figure><h3 id="符号函数"><a href="#符号函数" class="headerlink" title="符号函数"></a>符号函数</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="number">7</span> * x ^ <span class="number">2</span> + <span class="number">2</span> * x + <span class="number">9</span>; <span class="comment">% 创建符号函数</span></span><br></pre></td></tr></table></figure><h2 id="内置的符号函数"><a href="#内置的符号函数" class="headerlink" title="内置的符号函数"></a>内置的符号函数</h2><h3 id="三角函数"><a href="#三角函数" class="headerlink" title="三角函数"></a>三角函数</h3><table><thead><tr><th align="center">三角函数</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">sin</td><td align="center">正弦</td></tr><tr><td align="center">cos</td><td align="center">余弦</td></tr><tr><td align="center">tan</td><td align="center">正切</td></tr><tr><td align="center">asin</td><td align="center">反正弦</td></tr><tr><td align="center">acos</td><td align="center">反余弦</td></tr><tr><td align="center">atan</td><td align="center">反正切</td></tr><tr><td align="center">sinh</td><td align="center">双曲正弦</td></tr><tr><td align="center">cosh</td><td align="center">双曲余弦</td></tr><tr><td align="center">tanh</td><td align="center">双曲正切</td></tr><tr><td align="center">asinh</td><td align="center">反双曲正弦</td></tr><tr><td align="center">acosh</td><td align="center">反双曲余弦</td></tr><tr><td align="center">atanh</td><td align="center">反双曲正切</td></tr></tbody></table><h3 id="虚数函数"><a href="#虚数函数" class="headerlink" title="虚数函数"></a>虚数函数</h3><table><thead><tr><th align="center">虚数函数</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">conj</td><td align="center">复数共轭</td></tr><tr><td align="center">real</td><td align="center">复数实部</td></tr><tr><td align="center">imag</td><td align="center">复数虚部</td></tr><tr><td align="center">abs</td><td align="center">复数模</td></tr><tr><td align="center">angle</td><td align="center">复数幅角</td></tr></tbody></table><h2 id="符号对象精度转换"><a href="#符号对象精度转换" class="headerlink" title="符号对象精度转换"></a>符号对象精度转换</h2><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">digits; <span class="comment">% 显示当前用于计算的精度</span></span><br><span class="line">digits(<span class="number">16</span>); <span class="comment">% 将计算精度改为 16 位</span></span><br><span class="line">a16 = vpa(<span class="built_in">sqrt</span>(<span class="number">2</span>)); <span class="comment">% 使 sqrt(2) 运算按照规定的精度执行</span></span><br><span class="line">a8 = vpa(<span class="built_in">sqrt</span>(<span class="number">2</span>), <span class="number">8</span>); <span class="comment">% 在 vpa 内控制精度，离开这一步精度恢复</span></span><br></pre></td></tr></table></figure><h2 id="符号多项式函数"><a href="#符号多项式函数" class="headerlink" title="符号多项式函数"></a>符号多项式函数</h2><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">finverse(f, x); <span class="comment">% 函数，符号变量【反函数】对 f 中的变量 x 求反函数</span></span><br></pre></td></tr></table></figure><h2 id="符号函数的计算"><a href="#符号函数的计算" class="headerlink" title="符号函数的计算"></a>符号函数的计算</h2><h3 id="极限"><a href="#极限" class="headerlink" title="极限"></a>极限</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">limit(f, x, <span class="number">4</span>); <span class="comment">% 求 f(x), x -&gt; 4</span></span><br><span class="line">limit(f, x, <span class="number">4</span>, <span class="string">&#x27;left&#x27;</span>); <span class="comment">% 求 f(x), x -&gt; 4-</span></span><br><span class="line">limit(f, x, <span class="number">4</span>, <span class="string">&#x27;right&#x27;</span>); <span class="comment">% 求 f(x), x -&gt; 4+</span></span><br><span class="line">limit(f, <span class="number">4</span>); <span class="comment">% 默认变量 -&gt; 4</span></span><br><span class="line">limit(f); <span class="comment">% 默认变量 -&gt; 0</span></span><br></pre></td></tr></table></figure><h3 id="求和-1"><a href="#求和-1" class="headerlink" title="求和"></a>求和</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">symsum(s, x, <span class="number">3</span>, <span class="number">5</span>); <span class="comment">% 计算表达式 s 变量 x 从 3 到 5 的级数和</span></span><br><span class="line">symsum(s, <span class="number">3</span>, <span class="number">5</span>); <span class="comment">% 计算表达式 s 默认变量从 3 到 5 的级数和</span></span><br><span class="line">symsum(s); <span class="comment">% 计算 s 默认变量从 0 到 n - 1 的级数和</span></span><br></pre></td></tr></table></figure><h3 id="求导"><a href="#求导" class="headerlink" title="求导"></a>求导</h3><h4 id="单变量求导"><a href="#单变量求导" class="headerlink" title="单变量求导"></a>单变量求导</h4><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">diff(f, x, n); <span class="comment">% f 对 x 的 n 阶导</span></span><br><span class="line">diff(f, x); <span class="comment">% f 对 x 的 1 阶导</span></span><br><span class="line">diff(f, n); <span class="comment">% f 对默认变量的 n 阶导</span></span><br><span class="line">diff(f); <span class="comment">% 默认变量 1 阶导</span></span><br></pre></td></tr></table></figure><h4 id="多元偏导"><a href="#多元偏导" class="headerlink" title="多元偏导"></a>多元偏导</h4><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">diff(f, x, y); <span class="comment">% 先对 x 求偏导，再对 y 求偏导</span></span><br><span class="line">diff(f, x, y, z); <span class="comment">% 先对 x 求偏导，再对 y 求偏导，再对 z 求偏导</span></span><br></pre></td></tr></table></figure><h3 id="积分"><a href="#积分" class="headerlink" title="积分"></a>积分</h3><h4 id="定积分"><a href="#定积分" class="headerlink" title="定积分"></a>定积分</h4><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int(f, x, <span class="number">1</span>, <span class="number">2</span>); <span class="comment">% 函数 f 变量 x 在 1~2 区间定积分</span></span><br><span class="line">int(f, <span class="number">1</span>, <span class="number">2</span>); <span class="comment">% 函数 f 默认变量在 1~2 区间定积分</span></span><br></pre></td></tr></table></figure><h4 id="不定积分"><a href="#不定积分" class="headerlink" title="不定积分"></a>不定积分</h4><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int(f, x); <span class="comment">% 函数 f 变量 x 的不定积分</span></span><br><span class="line">int(f); <span class="comment">% 函数 f 默认变量的不定积分</span></span><br></pre></td></tr></table></figure><h3 id="一维泰勒展开"><a href="#一维泰勒展开" class="headerlink" title="一维泰勒展开"></a>一维泰勒展开</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">taylor(f, x, <span class="number">4</span>); <span class="comment">% f 在 x = 4 处展开为五阶泰勒级数</span></span><br><span class="line">taylor(f, x); <span class="comment">% f 在 x = 0 处展开为五阶泰勒级数</span></span><br><span class="line">taylor(f); <span class="comment">% f 在默认变量 = 0 处展开为五阶泰勒级数</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 语法 </tag>
            
            <tag> 函数 </tag>
            
            <tag> 数据类型 </tag>
            
            <tag> Matlab </tag>
            
            <tag> 图像绘制 </tag>
            
            <tag> 数据统计与计算 </tag>
            
            <tag> 符号对象 </tag>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 操作系统</title>
      <link href="/2023/11/30/03%20Linux%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
      <url>/2023/11/30/03%20Linux%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="用户和用户组"><a href="#用户和用户组" class="headerlink" title="用户和用户组"></a>用户和用户组</h1><h2 id="Root-用户"><a href="#Root-用户" class="headerlink" title="Root 用户"></a>Root 用户</h2><p>切换至<code>root</code>用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -s</span><br></pre></td></tr></table></figure><p>以<code>root</code>用户执行指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo [指令]</span><br></pre></td></tr></table></figure><h2 id="设置用户"><a href="#设置用户" class="headerlink" title="设置用户"></a>设置用户</h2><p>添加用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd [用户名]</span><br></pre></td></tr></table></figure><p>删除用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">userdel [用户名]</span><br></pre></td></tr></table></figure><p>切换用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su - [用户名]</span><br></pre></td></tr></table></figure><p>退出当前用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure><p>设置用户密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd [用户名]</span><br></pre></td></tr></table></figure><p>修改用户设置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usermod [用户名] [参数]</span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><ul><li><code>-d [登录目录]</code>：指定用户登录时的起始目录</li><li><code>-g [群组]</code>：指定用户所属的群组</li><li><code>-G [群组]</code>：指定用户所属的附加群组</li><li><code>-m</code>：自动建立用户的登入目录</li><li><code>-M</code>：不要自动建立用户的登入目录</li><li><code>-s</code>：指定<code>Shell</code>，一般指定为<code>/bin/bash</code></li></ul><h2 id="查看用户"><a href="#查看用户" class="headerlink" title="查看用户"></a>查看用户</h2><p>查看当前登录账号</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">who</span><br></pre></td></tr></table></figure><p>查看当前操作账号</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">whomi</span><br></pre></td></tr></table></figure><p>查看用户相关信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id</span><br></pre></td></tr></table></figure><p>查看当前用户所有的用户组</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groups</span><br></pre></td></tr></table></figure><h1 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h1><p>打印文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat [文件]</span><br></pre></td></tr></table></figure><p>查看指令的详细参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">man [指令]</span><br></pre></td></tr></table></figure><h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><p>列出当前目录中所有的文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ls [参数] [文件]</span><br><span class="line">la # 等价于 ls -a</span><br><span class="line">ll # 等价于 ls -l</span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><ul><li><code>-a</code>：显示隐藏文件</li><li><code>-l</code>：显示详细信息</li></ul><p><strong>显示示例</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">drwxr-xr-x 4 test test 4096 Jan 24 08:55 .</span><br><span class="line">drwxr-xr-x 4 root root 4096 Jan 24 04:24 ..</span><br><span class="line">-rw------- 1 test test 2124 Jan 24 04:29 .bash_history</span><br><span class="line">-rw-r--r-- 1 test test  220 Feb 25  2020 .bash_logout</span><br><span class="line">-rw-r--r-- 1 test test 3771 Feb 25  2020 .bashrc</span><br><span class="line">drwx------ 2 test test 4096 Jan 21 15:48 .cache</span><br><span class="line">drwx------ 3 test test 4096 Jan 23 14:49 .config</span><br><span class="line">-rw-r--r-- 1 test test  807 Feb 25  2020 .profile</span><br><span class="line">-rw------- 1 test test   34 Jan 24 04:17 .python_history</span><br><span class="line">-rw-r--r-- 1 test test    0 Jan 21 15:52 .sudo_as_admin_successful</span><br><span class="line">-rw------- 1 test test 7201 Jan 24 08:55 .viminfo</span><br></pre></td></tr></table></figure><p><strong>显示格式</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[文件属性] [文件创建的链接文件数量] [文件拥有者] [文件所属组] [文件大小] [文件最后一次修改时间] [文件名称]</span><br></pre></td></tr></table></figure><ul><li><p><strong>文件属性</strong></p><p>是一个长度为<code>10</code>的字符串</p><p>具体可以细分为<code>[文件类型][文件拥有者对该文件的权限][文件所属组内用户对该文件的权限][其他用户对该文件的权限] </code></p></li><li><p><strong>文件创建的链接文件数量</strong></p><p><code>1</code>表示只有当前文件</p></li><li><p><strong>文件大小</strong></p><p>以字节为单位</p></li><li><p><strong>文件名称</strong></p><p><code>..</code>表示上级目录</p><p><code>.</code>表示当前目录</p><p><code>.</code>开头的文件为隐藏文件</p></li></ul><table><thead><tr><th align="center">文件类型</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">-</td><td align="center">普通文件</td></tr><tr><td align="center">l</td><td align="center">链接文件</td></tr><tr><td align="center">d</td><td align="center">文件夹</td></tr><tr><td align="center">c</td><td align="center">字符设备</td></tr><tr><td align="center">b</td><td align="center">块设备</td></tr><tr><td align="center">p</td><td align="center">有名管道</td></tr><tr><td align="center">f</td><td align="center">堆栈文件</td></tr><tr><td align="center">s</td><td align="center">套接字</td></tr></tbody></table><table><thead><tr><th align="center">权限</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">-</td><td align="center">空</td></tr><tr><td align="center">r</td><td align="center">读</td></tr><tr><td align="center">w</td><td align="center">写</td></tr><tr><td align="center">x</td><td align="center">执行</td></tr></tbody></table><p>创建文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch [文件名]...</span><br></pre></td></tr></table></figure><p>创建文件夹</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir [目录名]...</span><br></pre></td></tr></table></figure><p>复制文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp [原文件] [目标目录]</span><br><span class="line">cp -r [原文件] [目标目录] # 递归复制</span><br></pre></td></tr></table></figure><p>移动文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv [原文件] [目标目录]</span><br></pre></td></tr></table></figure><p>文件重命名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv [原文件] [新名称]</span><br></pre></td></tr></table></figure><p>删除文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rm [文件]</span><br><span class="line">rm -r [文件] # 递归删除</span><br><span class="line">rm -rf [正则匹配] # 递归删除匹配成功的文件，忽略不存在的文件</span><br></pre></td></tr></table></figure><p>搜索文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find [文件夹] -name [正则匹配]</span><br></pre></td></tr></table></figure><p>修改文件属性</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod [u|g|o|a] [+|-] [r|w|x] [文件名]</span><br><span class="line">chmod [数字] [文件名]</span><br></pre></td></tr></table></figure><ul><li><p><code>u</code>：文件拥有者对该文件的权限</p></li><li><p><code>g</code>：文件所属组内用户对该文件的权限</p></li><li><p><code>o</code>：其他用户对该文件的权限</p></li><li><p><code>a</code>：全部用户对该文件的权限</p></li><li><p><code>+</code>：添加权限</p></li><li><p><code>-</code>：移除权限</p></li><li><p><code>r</code>：读</p></li><li><p><code>w</code>：写</p></li><li><p><code>x</code>：执行</p></li><li><p><strong>数字</strong></p><p>约定：<code>r = 4，w = 2，x = 1</code></p><p>需要什么权限就让对应权限的数字相加，一个数字表示一个权限状态</p><p>比如想修改为<code>-rw-rw-r--</code>，那么对应的数字就是<code>664</code></p></li></ul><p>修改文件所有者和所属组</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown [新所有者][:新组] [文件]</span><br></pre></td></tr></table></figure><p>修改文件所属组</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chgrp [新组] [文件]</span><br></pre></td></tr></table></figure><p>压缩文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zcvf [压缩包名.gz] [正则匹配]</span><br></pre></td></tr></table></figure><p>解压文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf [压缩包名.gz]</span><br></pre></td></tr></table></figure><ul><li><code>-c</code>：对文件进行压缩</li><li><code>-x</code>：进行解压操作</li><li><code>-z</code>：以<code>gzip</code>格式进行操作</li><li><code>-v</code>：在处理过程中输出一些日志信息</li><li><code>-f</code>：对普通文件进行操作</li></ul><h2 id="系统管理"><a href="#系统管理" class="headerlink" title="系统管理"></a>系统管理</h2><blockquote><p>按 q 键退出监控界面</p></blockquote><p>打开任务管理器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">top</span><br></pre></td></tr></table></figure><p>查看内存使用情况</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">free # 以 kb 为单位</span><br><span class="line">free -m # 以 M 为单位</span><br><span class="line">free -g # 以 G 为单位</span><br></pre></td></tr></table></figure><p>查看所有块设备信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsblk</span><br></pre></td></tr></table></figure><p>查看当前磁盘使用情况</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df</span><br></pre></td></tr></table></figure><p>查看当前运行的一些进程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ps</span><br><span class="line">ps -ef # 查看所有的进程</span><br></pre></td></tr></table></figure><p>结束当前进程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kill -1 [进程ID] # 重新加载进程</span><br><span class="line">kill -9 [进程ID] # 杀死一个进程</span><br><span class="line">kill -15 [进程ID] # 正常停止一个进程</span><br></pre></td></tr></table></figure><p>正常关机</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">shutdown</span><br><span class="line">shutdown now # 立刻关机</span><br></pre></td></tr></table></figure><p>挂载</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount [目标目录] [原目录]</span><br></pre></td></tr></table></figure><p>取消挂载</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">umount [目标目录]</span><br></pre></td></tr></table></figure><h1 id="Vim-文本编辑器"><a href="#Vim-文本编辑器" class="headerlink" title="Vim 文本编辑器"></a>Vim 文本编辑器</h1><p>编辑文件（进入命令模式）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim [文件]</span><br></pre></td></tr></table></figure><h2 id="模式"><a href="#模式" class="headerlink" title="模式"></a>模式</h2><p><code>Vim</code>编辑器默认有三种模式</p><p><img src="/../images/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/03%20Linux%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-1.jpg"></p><ul><li><strong>命令模式</strong>：此模式下可以输入任意的命令进行操作，所有的输入都被看做是命令输入，而不是文本编辑输入</li><li><strong>编辑模式</strong>：此模式下输入的任何内容都会以文本编辑方式写入到文件中，就像直接在<code>Windows</code>的记事本中写内容一样</li><li><strong>末行模式</strong>：此模式下用于输入一些复杂命令，会在最后一行进行复杂命令的输入</li></ul><h2 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h2><ul><li><code>i</code>：切换到编辑模式，进行插入操作，在光标之前继续写</li><li><code>a</code>：切换到编辑模式，进行插入操作，在光标之后继续写</li><li><code>I</code>：切换到编辑模式，进行插入操作，在当前行的开头继续写</li><li><code>A</code>：切换到编辑模式，进行插入操作，在当前行的最后继续写</li><li><code>o</code>：光标跳转到下一行</li><li><code>^</code>：光标跳转到本行最前面</li><li><code>$</code>：光标跳转到本行最后面</li><li><code>gg</code>：光标跳转到第一行</li><li><code>[n]G</code>：光标跳转到第<code>n</code>行</li><li><code>[n]方向键</code>：向一个方向跳转<code>n</code>个字符</li></ul><h2 id="末行模式"><a href="#末行模式" class="headerlink" title="末行模式"></a>末行模式</h2><ul><li><p><code>w</code>：保存</p></li><li><p><code>q</code>：关闭</p></li><li><p><code>q!</code>：强制关闭</p></li><li><p><code>wq</code>：保存并退出</p></li><li><p><code>x</code>：保存并退出</p></li><li><p><code>set number</code>：开启行号</p></li><li><p><code>/[匹配的字符串]</code>：从前向后寻找字符串，按<code>n</code>跳转到下一个搜索结果</p></li><li><p><code>?[匹配的字符串]</code>：从后向前寻找字符串，按<code>n</code>跳转到下一个搜索结果</p></li><li><p><code>s/[原字符串]/[新字符串]/[操作类型]</code>：替换字符串</p></li></ul><table><thead><tr><th align="center">操作类型</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">g</td><td align="center">全局替换</td></tr><tr><td align="center">c</td><td align="center">进行确认</td></tr><tr><td align="center">p</td><td align="center">替代结果逐行显示</td></tr><tr><td align="center">i</td><td align="center">不区分大小写</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 中间件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 命令 </tag>
            
            <tag> Linux </tag>
            
            <tag> Vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript</title>
      <link href="/2023/11/12/03%20JavaSrcipt/"/>
      <url>/2023/11/12/03%20JavaSrcipt/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><blockquote><p>JavaScript 是一种广泛使用的编程语言，主要用于网页开发</p><p>它使得网页能够具有动态功能，如响应用户操作、更新内容、与服务器通信等</p></blockquote><h1 id="保留关键字"><a href="#保留关键字" class="headerlink" title="保留关键字"></a>保留关键字</h1><p><code>JavaScript</code>有一些保留关键字，不能用作标识符</p><blockquote><p>arguments、break、case、catch、class、const、continue、debugger、default、delete、do、else、enum、eval、export、extends、false、finally、for、function、if、implements、import、in、instanceof、interface、let、new、null、package、private、protected、public、return、static、super、switch、this、throw、true、try、typeof、var、void、while、with、yield</p></blockquote><h1 id="引入方式"><a href="#引入方式" class="headerlink" title="引入方式"></a>引入方式</h1><h2 id="嵌入到-HTML-文件中"><a href="#嵌入到-HTML-文件中" class="headerlink" title="嵌入到 HTML 文件中"></a>嵌入到 HTML 文件中</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> age = <span class="number">20</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="引入本地独立-JS-文件"><a href="#引入本地独立-JS-文件" class="headerlink" title="引入本地独立 JS 文件"></a>引入本地独立 JS 文件</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./test.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="引入网络来源文件"><a href="#引入网络来源文件" class="headerlink" title="引入网络来源文件"></a>引入网络来源文件</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/jquery/3.6.0/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span> <span class="comment">// 函数作用域，可重复声明和变量提升</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">1.1</span> <span class="comment">// 同 Java</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="string">&quot;AAA&quot;</span> <span class="comment">// 不可变类型</span></span><br></pre></td></tr></table></figure><h1 id="输出方式"><a href="#输出方式" class="headerlink" title="输出方式"></a>输出方式</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;内容&quot;</span>); <span class="comment">// 控制台</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&quot;内容&quot;</span>); <span class="comment">// 弹出框</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;内容&quot;</span>);  <span class="comment">// 页面</span></span><br></pre></td></tr></table></figure><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><ul><li><code>Number</code>：数字</li><li><code>String</code>：字符串</li><li><code>Boolean</code>：布尔值</li><li><code>Object</code>：对象</li><li><code>Array</code>：数组</li><li><code>Function</code>：函数</li><li><code>Symbol</code>：符号</li><li><code>BigInt</code>：大整数</li></ul><h2 id="typeof-运算符"><a href="#typeof-运算符" class="headerlink" title="typeof 运算符"></a>typeof 运算符</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> [参数] <span class="comment">// 判断参数的数据类型</span></span><br></pre></td></tr></table></figure><h1 id="JS-特有语法"><a href="#JS-特有语法" class="headerlink" title="JS 特有语法"></a>JS 特有语法</h1><h2 id="扩展运算符"><a href="#扩展运算符" class="headerlink" title="扩展运算符"></a>扩展运算符</h2><p>等同于<code>Python</code>的<code>*</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">...[数组]</span><br><span class="line">...[对象]</span><br></pre></td></tr></table></figure><h2 id="for-of-循环"><a href="#for-of-循环" class="headerlink" title="for of 循环"></a>for of 循环</h2><p>等同于<code>Python</code>的<code>for in</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> [迭代器]) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h2><p>用反引号（&#96;）标识</p><p>它可以当作普通字符串使用，也可以用来定义多行字符串，或者在字符串中嵌入变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> url = <span class="string">&#x27;www.AAA.com&#x27;</span></span><br><span class="line"><span class="keyword">let</span> h1 = <span class="string">&quot;&lt;a href=&#x27;&quot;</span>+ url +<span class="string">&quot;&#x27;&gt;AAA&lt;/a&gt;&quot;</span></span><br><span class="line"><span class="keyword">let</span> h2 = <span class="string">`&lt;a href=&#x27;<span class="subst">$&#123;url&#125;</span>&#x27;&gt;AAA&lt;/a&gt;`</span></span><br></pre></td></tr></table></figure><h2 id="对象解构赋值"><a href="#对象解构赋值" class="headerlink" title="对象解构赋值"></a>对象解构赋值</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; age, name &#125; = &#123;<span class="attr">name</span>: <span class="string">&quot;AAA&quot;</span>, <span class="attr">age</span>: <span class="number">20</span>&#125;; <span class="comment">// 取出对象的某些属性</span></span><br><span class="line"><span class="keyword">let</span> &#123; random, floor &#125; = <span class="title class_">Math</span>; <span class="comment">// 取出对象的某些方法</span></span><br></pre></td></tr></table></figure><h2 id="类的构造与继承"><a href="#类的构造与继承" class="headerlink" title="类的构造与继承"></a>类的构造与继承</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> [父类] &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">x, y</span>) &#123; <span class="comment">// 构造方法</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">x</span> = x;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">y</span> = y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> [子类] <span class="keyword">extends</span> [父类] &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">x, y, z</span>) &#123; <span class="comment">// 子类必须在 constructor() 方法中调用 super()</span></span><br><span class="line">        <span class="variable language_">super</span>(x,y);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">z</span> = z;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> [函数名]([参数], [参数]...) &#123;</span><br><span class="line">  <span class="comment">// 函数体</span></span><br><span class="line">    <span class="keyword">return</span> [返回值]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>箭头函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [函数名] = <span class="function">(<span class="params">[参数], [参数]...</span>) =&gt;</span> [返回值]</span><br><span class="line"><span class="keyword">const</span> [函数名] = <span class="function">(<span class="params">[参数], [参数]...</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 函数体</span></span><br><span class="line">    <span class="keyword">return</span> [返回值]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><h2 id="length"><a href="#length" class="headerlink" title="length"></a>length</h2><blockquote><p>返回字符串的大小</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[字符串].<span class="property">length</span></span><br></pre></td></tr></table></figure><h2 id="charAt"><a href="#charAt" class="headerlink" title="charAt()"></a>charAt()</h2><blockquote><p>返回指定位置的字符</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[字符串].<span class="title function_">charAt</span>([下标]) <span class="comment">// 如果下标不合法，返回 &quot;&quot;</span></span><br></pre></td></tr></table></figure><h2 id="at"><a href="#at" class="headerlink" title="at()"></a>at()</h2><blockquote><p>返回指定位置的字符（支持负数索引）</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[字符串].<span class="title function_">at</span>([下标]) <span class="comment">// 如果下标不合法，返回 undefined</span></span><br></pre></td></tr></table></figure><h2 id="substring"><a href="#substring" class="headerlink" title="substring()"></a>substring()</h2><blockquote><p>从原字符串取出子字符串并返回</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[字符串].<span class="title function_">substring</span>([开始位置], [结束位置])</span><br><span class="line">[字符串].<span class="title function_">substring</span>([开始位置]) <span class="comment">// 从开始位置截取到字符串的末尾</span></span><br></pre></td></tr></table></figure><h2 id="substr"><a href="#substr" class="headerlink" title="substr()"></a>substr()</h2><blockquote><p>从原字符串取出子字符串并返回，支持负数索引</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[字符串].<span class="title function_">substr</span>([开始位置], [截取长度])</span><br><span class="line">[字符串].<span class="title function_">substr</span>([开始位置]) <span class="comment">// 从开始位置截取到字符串的末尾</span></span><br></pre></td></tr></table></figure><h2 id="concat"><a href="#concat" class="headerlink" title="concat()"></a>concat()</h2><blockquote><p>连接多个字符串，返回一个新字符串</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[字符串].<span class="title function_">concat</span>([字符串], [字符串], [字符串]...)</span><br></pre></td></tr></table></figure><h2 id="repeat"><a href="#repeat" class="headerlink" title="repeat()"></a>repeat()</h2><blockquote><p>返回一个新字符串，表示将原字符串重复<code>n</code>次</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[字符串].<span class="title function_">repeat</span>([重复次数])</span><br></pre></td></tr></table></figure><h2 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf()"></a>indexOf()</h2><blockquote><p>返回一个字符串在另一个字符串中第一次出现的位置（不存在则返回 -1）</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[字符串].<span class="title function_">indexOf</span>([目标字符串])</span><br><span class="line">[字符串].<span class="title function_">indexOf</span>([目标字符串], [开始位置]) <span class="comment">// 从开始位置向后匹配</span></span><br></pre></td></tr></table></figure><h2 id="includes"><a href="#includes" class="headerlink" title="includes()"></a>includes()</h2><blockquote><p>判断一个字符串是否是其子字符串</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[字符串].<span class="title function_">includes</span>([字符串])</span><br></pre></td></tr></table></figure><h2 id="split"><a href="#split" class="headerlink" title="split()"></a>split()</h2><blockquote><p>按照正则分割字符串，返回一个由分割出来的子字符串组成的数组</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[字符串].<span class="title function_">split</span>([正则字符串])</span><br><span class="line">[字符串].<span class="title function_">split</span>([正则字符串], [最大成员数]) <span class="comment">// 限定返回数组的最大成员数</span></span><br><span class="line">[字符串].<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>) <span class="comment">// 分离每个字符</span></span><br><span class="line">[字符串].<span class="title function_">split</span>() <span class="comment">// 原字符串</span></span><br></pre></td></tr></table></figure><h2 id="startsWith"><a href="#startsWith" class="headerlink" title="startsWith()"></a>startsWith()</h2><blockquote><p>判断一个字符串是否是其前缀字符串</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[字符串].<span class="title function_">startsWith</span>([字符串])</span><br></pre></td></tr></table></figure><h2 id="endsWith"><a href="#endsWith" class="headerlink" title="endsWith()"></a>endsWith()</h2><blockquote><p>判断一个字符串是否是其后缀字符串</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[字符串].<span class="title function_">endsWith</span>([字符串])</span><br></pre></td></tr></table></figure><h2 id="trim"><a href="#trim" class="headerlink" title="trim()"></a>trim()</h2><blockquote><p>去除字符串两端的空格，返回一个新字符串</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[字符串].<span class="title function_">trim</span>()</span><br></pre></td></tr></table></figure><h2 id="trimStart"><a href="#trimStart" class="headerlink" title="trimStart()"></a>trimStart()</h2><blockquote><p>去除字符串左端的空格，返回一个新字符串</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[字符串].<span class="title function_">trimStart</span>()</span><br></pre></td></tr></table></figure><h2 id="trimEnd"><a href="#trimEnd" class="headerlink" title="trimEnd()"></a>trimEnd()</h2><blockquote><p>去除字符串右端的空格，返回一个新字符串</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[字符串].<span class="title function_">trimEnd</span>()</span><br></pre></td></tr></table></figure><h2 id="padStart"><a href="#padStart" class="headerlink" title="padStart()"></a>padStart()</h2><blockquote><p>使用一个字符串头部补全到指定长度</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[字符串].<span class="title function_">padStart</span>([长度], [字符串])</span><br></pre></td></tr></table></figure><h2 id="padEnd"><a href="#padEnd" class="headerlink" title="padEnd()"></a>padEnd()</h2><blockquote><p>使用一个字符串尾部补全到指定长度</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[字符串].<span class="title function_">padEnd</span>([长度], [字符串])</span><br></pre></td></tr></table></figure><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h2 id="length-1"><a href="#length-1" class="headerlink" title="length"></a>length</h2><blockquote><p>返回数组的大小</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[数组].<span class="property">length</span></span><br></pre></td></tr></table></figure><h2 id="Array-of"><a href="#Array-of" class="headerlink" title="Array.of()"></a>Array.of()</h2><blockquote><p>将一组值转换为数组</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="title function_">of</span>([元素]...)</span><br></pre></td></tr></table></figure><h2 id="Array-isArray"><a href="#Array-isArray" class="headerlink" title="Array.isArray()"></a>Array.isArray()</h2><blockquote><p>判断参数是否为数组</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="title function_">isArray</span>([参数])</span><br></pre></td></tr></table></figure><h2 id="Array-from"><a href="#Array-from" class="headerlink" title="Array.from()"></a>Array.from()</h2><blockquote><p>将类数组转为真正的数组</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="title function_">from</span>([类数组])</span><br></pre></td></tr></table></figure><h2 id="push"><a href="#push" class="headerlink" title="push()"></a>push()</h2><blockquote><p>在数组的末端添加一个或多个元素，并返回添加新元素后的数组长度</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[数组].<span class="title function_">push</span>([元素]...)</span><br></pre></td></tr></table></figure><h2 id="pop"><a href="#pop" class="headerlink" title="pop()"></a>pop()</h2><blockquote><p>删除数组的最后一个元素，并返回该元素</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[数组].<span class="title function_">pop</span>()</span><br></pre></td></tr></table></figure><h2 id="unshift"><a href="#unshift" class="headerlink" title="unshift()"></a>unshift()</h2><blockquote><p>在数组的第一个位置添加元素，并返回添加新元素后的数组长度</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[数组].<span class="title function_">unshift</span>([元素]...)</span><br></pre></td></tr></table></figure><h2 id="shift"><a href="#shift" class="headerlink" title="shift()"></a>shift()</h2><blockquote><p>删除数组的第一个元素，并返回该元素</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[数组].<span class="title function_">shift</span>()</span><br></pre></td></tr></table></figure><h2 id="concat-1"><a href="#concat-1" class="headerlink" title="concat()"></a>concat()</h2><blockquote><p>将参数列表添加到原数组成员的后部，然后返回一个新数组</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[数组].<span class="title function_">concat</span>([数组 / 元素]...)</span><br></pre></td></tr></table></figure><h2 id="indexOf-1"><a href="#indexOf-1" class="headerlink" title="indexOf()"></a>indexOf()</h2><blockquote><p>返回给定元素在数组中第一次出现的位置，如果没有出现则返回 -1</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[数组].<span class="title function_">indexOf</span>([元素])</span><br><span class="line">[数组].<span class="title function_">indexOf</span>([元素], [开始位置]) <span class="comment">// 从开始位置向后匹配</span></span><br></pre></td></tr></table></figure><h2 id="join"><a href="#join" class="headerlink" title="join()"></a>join()</h2><blockquote><p>以指定参数作为分隔符，将所有数组成员连接为一个字符串返回</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[数组].<span class="title function_">join</span>([字符串])</span><br><span class="line">[数组].<span class="title function_">join</span>() <span class="comment">// 默认用,分割</span></span><br></pre></td></tr></table></figure><h2 id="reverse"><a href="#reverse" class="headerlink" title="reverse()"></a>reverse()</h2><blockquote><p>翻转原数组</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[数组].<span class="title function_">reverse</span>()</span><br></pre></td></tr></table></figure><h2 id="forEach"><a href="#forEach" class="headerlink" title="forEach()"></a>forEach()</h2><blockquote><p>对每个值执行提供的回调函数</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[数组].<span class="title function_">forEach</span>([函数])</span><br></pre></td></tr></table></figure><h1 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h1><h2 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h2><h3 id="Math-abs"><a href="#Math-abs" class="headerlink" title="Math.abs()"></a>Math.abs()</h3><blockquote><p>返回参数的绝对值</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Math</span>.<span class="title function_">abs</span>([参数])</span><br></pre></td></tr></table></figure><h3 id="Math-min"><a href="#Math-min" class="headerlink" title="Math.min()"></a>Math.min()</h3><blockquote><p>返回参数列表的最小值</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Math</span>.<span class="title function_">min</span>([参数]...)</span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">min</span>() <span class="comment">// Infinity</span></span><br></pre></td></tr></table></figure><h3 id="Math-max"><a href="#Math-max" class="headerlink" title="Math.max()"></a>Math.max()</h3><blockquote><p>返回参数列表的最大值</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Math</span>.<span class="title function_">max</span>([参数]...)</span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">max</span>() <span class="comment">// -Infinity</span></span><br></pre></td></tr></table></figure><h3 id="Math-ceil"><a href="#Math-ceil" class="headerlink" title="Math.ceil()"></a>Math.ceil()</h3><blockquote><p>返回参数向上取整后的值</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Math</span>.<span class="title function_">ceil</span>([参数])</span><br></pre></td></tr></table></figure><h3 id="Math-floor"><a href="#Math-floor" class="headerlink" title="Math.floor()"></a>Math.floor()</h3><blockquote><p>返回参数向下取整后的值</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Math</span>.<span class="title function_">floor</span>([参数])</span><br></pre></td></tr></table></figure><h3 id="Math-random"><a href="#Math-random" class="headerlink" title="Math.random()"></a>Math.random()</h3><blockquote><p>返回一个伪随机数，取值范围为 [0, 1)</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Math</span>.<span class="title function_">random</span>()</span><br></pre></td></tr></table></figure><h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><h3 id="size"><a href="#size" class="headerlink" title="size"></a>size</h3><blockquote><p>返回集合的大小</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[集合].<span class="property">size</span></span><br></pre></td></tr></table></figure><h3 id="add"><a href="#add" class="headerlink" title="add()"></a>add()</h3><blockquote><p>添加一个元素</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[集合].<span class="title function_">add</span>([元素])</span><br></pre></td></tr></table></figure><h3 id="delete"><a href="#delete" class="headerlink" title="delete()"></a>delete()</h3><blockquote><p>删除一个元素</p><p>返回一个布尔值，表示是否删除</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[集合].<span class="title function_">delete</span>([元素])</span><br></pre></td></tr></table></figure><h3 id="has"><a href="#has" class="headerlink" title="has()"></a>has()</h3><blockquote><p>判断是否包含某元素</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[集合].<span class="title function_">has</span>([元素])</span><br></pre></td></tr></table></figure><h3 id="clear"><a href="#clear" class="headerlink" title="clear()"></a>clear()</h3><blockquote><p>清空集合</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[集合].<span class="title function_">clear</span>()</span><br></pre></td></tr></table></figure><h3 id="forEach-1"><a href="#forEach-1" class="headerlink" title="forEach()"></a>forEach()</h3><blockquote><p>对每个值执行提供的回调函数</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[集合].<span class="title function_">forEach</span>([函数])</span><br></pre></td></tr></table></figure><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><h3 id="size-1"><a href="#size-1" class="headerlink" title="size"></a>size</h3><blockquote><p>返回键值对的数量</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[集合].<span class="property">size</span></span><br></pre></td></tr></table></figure><h3 id="set"><a href="#set" class="headerlink" title="set()"></a>set()</h3><blockquote><p>添加 &#x2F; 修改键值对</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[集合].<span class="title function_">set</span>([键], [值])</span><br></pre></td></tr></table></figure><h3 id="get"><a href="#get" class="headerlink" title="get()"></a>get()</h3><blockquote><p>获取值</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[集合].<span class="title function_">get</span>([键])</span><br></pre></td></tr></table></figure><h3 id="delete-1"><a href="#delete-1" class="headerlink" title="delete()"></a>delete()</h3><blockquote><p>删除键值对</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[集合].<span class="title function_">delete</span>([键])</span><br></pre></td></tr></table></figure><h3 id="has-1"><a href="#has-1" class="headerlink" title="has()"></a>has()</h3><blockquote><p>判断是否包含指定的键</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[集合].<span class="title function_">has</span>([键])</span><br></pre></td></tr></table></figure><h3 id="clear-1"><a href="#clear-1" class="headerlink" title="clear()"></a>clear()</h3><blockquote><p>清空键值对</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[集合].<span class="title function_">clear</span>()</span><br></pre></td></tr></table></figure><h3 id="keys"><a href="#keys" class="headerlink" title="keys()"></a>keys()</h3><blockquote><p>返回所有键的迭代器</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[集合].<span class="title function_">keys</span>()</span><br></pre></td></tr></table></figure><h3 id="values"><a href="#values" class="headerlink" title="values()"></a>values()</h3><blockquote><p>返回所有值的迭代器</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[集合].<span class="title function_">values</span>()</span><br></pre></td></tr></table></figure><h3 id="entries"><a href="#entries" class="headerlink" title="entries()"></a>entries()</h3><blockquote><p>返回所有键值对的迭代器</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[集合].<span class="title function_">entries</span>()</span><br></pre></td></tr></table></figure><h3 id="forEach-2"><a href="#forEach-2" class="headerlink" title="forEach()"></a>forEach()</h3><blockquote><p>对每个键值对执行提供的回调函数</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[集合].<span class="title function_">forEach</span>([函数])</span><br></pre></td></tr></table></figure><h2 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h2><p>以<code>1970</code>年<code>1</code>月<code>1</code>日<code>00:00:00</code>作为时间的零点，可以表示的时间范围是前后各1亿天（单位为毫秒）</p><h3 id="Date-now"><a href="#Date-now" class="headerlink" title="Date.now()"></a>Date.now()</h3><blockquote><p>返回当前时间距离时间零点的毫秒数，相当于 Unix 时间戳乘以1000</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Date</span>.<span class="title function_">now</span>()</span><br></pre></td></tr></table></figure><h3 id="getTime"><a href="#getTime" class="headerlink" title="getTime()"></a>getTime()</h3><blockquote><p>返回距离时间零点的毫秒数</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[日期].<span class="title function_">getTime</span>()</span><br></pre></td></tr></table></figure><h3 id="getYear"><a href="#getYear" class="headerlink" title="getYear()"></a>getYear()</h3><blockquote><p>返回距离1900 的年数（已弃用）</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[日期].<span class="title function_">getYear</span>()</span><br></pre></td></tr></table></figure><h3 id="getFullYear"><a href="#getFullYear" class="headerlink" title="getFullYear()"></a>getFullYear()</h3><blockquote><p>返回年份</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[日期].<span class="title function_">getFullYear</span>()</span><br></pre></td></tr></table></figure><h3 id="getMonth"><a href="#getMonth" class="headerlink" title="getMonth()"></a>getMonth()</h3><blockquote><p>返回月份，[0, 11]，1 月份为 0， 12 月份为 11</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[日期].<span class="title function_">getMonth</span>()</span><br></pre></td></tr></table></figure><h3 id="getDay"><a href="#getDay" class="headerlink" title="getDay()"></a>getDay()</h3><blockquote><p>返回星期数，[0, 6]，星期日为 0</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[日期].<span class="title function_">getDay</span>()</span><br></pre></td></tr></table></figure><h3 id="getDate"><a href="#getDate" class="headerlink" title="getDate()"></a>getDate()</h3><blockquote><p>返回日份</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[日期].<span class="title function_">getDate</span>()</span><br></pre></td></tr></table></figure><h3 id="getHours"><a href="#getHours" class="headerlink" title="getHours()"></a>getHours()</h3><blockquote><p>返回小时，[0, 23]</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[日期].<span class="title function_">getHours</span>()</span><br></pre></td></tr></table></figure><h3 id="getMinutes"><a href="#getMinutes" class="headerlink" title="getMinutes()"></a>getMinutes()</h3><blockquote><p>返回分钟，[0, 59]</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[日期].<span class="title function_">getMinutes</span>()</span><br></pre></td></tr></table></figure><h3 id="getSeconds"><a href="#getSeconds" class="headerlink" title="getSeconds()"></a>getSeconds()</h3><blockquote><p>返回秒，[0, 59]</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[日期].<span class="title function_">getSeconds</span>()</span><br></pre></td></tr></table></figure><h3 id="getMilliseconds"><a href="#getMilliseconds" class="headerlink" title="getMilliseconds()"></a>getMilliseconds()</h3><blockquote><p>返回毫秒，[0, 999]</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[日期].<span class="title function_">getMilliseconds</span>()</span><br></pre></td></tr></table></figure><h1 id="网页接口"><a href="#网页接口" class="headerlink" title="网页接口"></a>网页接口</h1><h2 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h2><blockquote><p>DOM 是 JavaScript 操作网页的接口，全称为<code>文档对象模型</code>（Document Object Model）</p><p>它的作用是将网页转为一个 JavaScript 对象，从而可以对元素进行各种操作</p></blockquote><h3 id="节点"><a href="#节点" class="headerlink" title="节点"></a>节点</h3><p><code>DOM</code>的最小组成单位叫做节点</p><p>文档的树形结构（<code>DOM</code>树），就是由各种不同类型的节点组成。每个节点可以看作是文档树的一片叶子</p><p><img src="/../images/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/03%20JavaSrcipt-1.jpg"></p><h4 id="节点类型"><a href="#节点类型" class="headerlink" title="节点类型"></a>节点类型</h4><ul><li><code>Document</code>：根节点。浏览器原生提供节点<code>document</code>，代表整个文档</li><li><code>DocumentType</code>：<code>doctype</code>标签</li><li><code>Element</code>：<code>HTML</code>标签</li><li><code>Attribute</code>：元素属性</li><li><code>Text</code>：标签之间或标签包含的文本</li><li><code>Comment</code>：注释</li><li><code>DocumentFragment</code>：文档的片段</li></ul><h4 id="节点属性"><a href="#节点属性" class="headerlink" title="节点属性"></a>节点属性</h4><p>不同节点的<code>nodeType</code>属性值和对应的常量如下</p><ul><li>文档节点（<code>document</code>）：<code>9</code>，对应常量<code>Node.DOCUMENT_NODE</code></li><li>元素节点（<code>element</code>）：<code>1</code>，对应常量<code>Node.ELEMENT_NODE</code></li><li>属性节点（<code>attr</code>）：<code>2</code>，对应常量<code>Node.ATTRIBUTE_NODE</code></li><li>文本节点（<code>text</code>）：<code>3</code>，对应常量<code>Node.TEXT_NODE</code></li><li>文档片断节点（<code>DocumentFragment</code>）：<code>1</code>，对应常量<code>Node.DOCUMENT_FRAGMENT_NODE</code></li></ul><h3 id="document-getElementsByTagName"><a href="#document-getElementsByTagName" class="headerlink" title="document.getElementsByTagName()"></a>document.getElementsByTagName()</h3><blockquote><p>根据 HTML 标签名搜索符合条件的元素</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>([标签名])</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;*&quot;</span>) <span class="comment">// 返回文档中所有 HTML 元素</span></span><br></pre></td></tr></table></figure><h3 id="document-getElementsByClassName"><a href="#document-getElementsByClassName" class="headerlink" title="document.getElementsByClassName()"></a>document.getElementsByClassName()</h3><blockquote><p>根据类名搜索符合条件的元素</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>([类名])</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&quot;[类名] [类名]...&quot;</span>) <span class="comment">// 支持多个类名，用空格隔开</span></span><br></pre></td></tr></table></figure><h3 id="document-getElementsByName"><a href="#document-getElementsByName" class="headerlink" title="document.getElementsByName()"></a>document.getElementsByName()</h3><blockquote><p>根据名称搜索符合条件的元素，返回一个<code>NodeList</code>对象</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementsByName</span>([名称])</span><br></pre></td></tr></table></figure><h3 id="document-getElementById"><a href="#document-getElementById" class="headerlink" title="document.getElementById()"></a>document.getElementById()</h3><blockquote><p>根据 ID 搜索符合条件的元素</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>([<span class="variable constant_">ID</span>])</span><br></pre></td></tr></table></figure><h3 id="document-querySelector"><a href="#document-querySelector" class="headerlink" title="document.querySelector()"></a>document.querySelector()</h3><blockquote><p>根据 CSS 选择器搜索符合条件的第一个元素</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>([<span class="variable constant_">CSS</span> 选择器])</span><br></pre></td></tr></table></figure><h3 id="document-querySelectorAll"><a href="#document-querySelectorAll" class="headerlink" title="document.querySelectorAll()"></a>document.querySelectorAll()</h3><blockquote><p>根据 CSS 选择器搜索符合条件的元素，返回一个<code>NodeList</code>对象</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>([<span class="variable constant_">CSS</span> 选择器])</span><br></pre></td></tr></table></figure><h3 id="document-createElement"><a href="#document-createElement" class="headerlink" title="document.createElement()"></a>document.createElement()</h3><blockquote><p>生成元素节点，并返回该节点</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">createElement</span>([节点类型])</span><br></pre></td></tr></table></figure><h3 id="document-createTextNode"><a href="#document-createTextNode" class="headerlink" title="document.createTextNode()"></a>document.createTextNode()</h3><blockquote><p>生成文本节点，并返回该节点</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">createTextNode</span>([文本内容])</span><br></pre></td></tr></table></figure><h3 id="document-createAttribute"><a href="#document-createAttribute" class="headerlink" title="document.createAttribute()"></a>document.createAttribute()</h3><blockquote><p>生成属性节点，并返回该节点</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">createAttribute</span>([属性值])</span><br></pre></td></tr></table></figure><h2 id="Element"><a href="#Element" class="headerlink" title="Element"></a>Element</h2><blockquote><p>Element 对象对应网页的 HTML 元素</p><p>每一个 HTML 元素，在 DOM 树上都会转化成一个 Element 节点对象</p></blockquote><h3 id="id"><a href="#id" class="headerlink" title="id"></a>id</h3><blockquote><p>返回指定元素的 ID 属性，该属性可读写</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[节点对象].<span class="property">id</span></span><br></pre></td></tr></table></figure><h3 id="className"><a href="#className" class="headerlink" title="className"></a>className</h3><blockquote><p>返回指定元素的 class 属性</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[节点对象].<span class="property">className</span></span><br></pre></td></tr></table></figure><h3 id="classList"><a href="#classList" class="headerlink" title="classList"></a>classList</h3><blockquote><p>返回指定元素的 classList 对象</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[节点对象].<span class="property">classList</span>.<span class="title function_">add</span>([类名]...) <span class="comment">// 增加 class</span></span><br><span class="line">[节点对象].<span class="property">classList</span>.<span class="title function_">remove</span>([类名]...) <span class="comment">// 移除 class</span></span><br><span class="line">[节点对象].<span class="property">classList</span>.<span class="title function_">contains</span>([类名]) <span class="comment">// 判断是否包含某个 class</span></span><br><span class="line">[节点对象].<span class="property">classList</span>.<span class="title function_">toggle</span>([类名]) <span class="comment">// 将某个 class 移入或移出当前元素（存在则移出，不存在则移入）</span></span><br></pre></td></tr></table></figure><h3 id="innerHTML"><a href="#innerHTML" class="headerlink" title="innerHTML"></a>innerHTML</h3><blockquote><p>返回一个字符串，等同于该元素包含的所有 HTML 代码</p><p>该属性可读写，常用来设置某个节点的内容</p><p>它能改写所有元素节点的内容，包括<code>&lt;HTML&gt;</code>和<code>&lt;body&gt;</code>元素</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[节点对象].<span class="property">innerHTML</span> = <span class="string">&quot;&quot;</span> <span class="comment">// 返回元素的 HTML 内容</span></span><br></pre></td></tr></table></figure><h3 id="innerText"><a href="#innerText" class="headerlink" title="innerText"></a>innerText</h3><blockquote><p>和<code>innerHTML</code>类似。不同的是<code>innerText</code>无法识别元素，会直接渲染成字符串</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[节点对象].<span class="property">innerText</span> = <span class="string">&quot;&quot;</span> <span class="comment">// 返回元素的文本内容</span></span><br></pre></td></tr></table></figure><h3 id="获取元素位置"><a href="#获取元素位置" class="headerlink" title="获取元素位置"></a>获取元素位置</h3><table><thead><tr><th align="center">属性</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>clientHeight</code></td><td align="center">元素高度。包括<code>padding</code>，但是不包括<code>border</code>、<code>margin</code></td></tr><tr><td align="center"><code>clientWidth</code></td><td align="center">元素宽度。包括<code>padding</code>，但是不包括<code>border</code>、<code>margin</code></td></tr><tr><td align="center"><code>scrollHeight</code></td><td align="center">元素总高度。包括<code>padding</code>，但是不包括<code>border</code>、<code>margin</code>，包括溢出的不可见内容</td></tr><tr><td align="center"><code>scrollWidth</code></td><td align="center">元素总宽度。包括<code>padding</code>，但是不包括<code>border</code>、<code>margin</code>，包括溢出的不可见内容</td></tr><tr><td align="center"><code>scrollLeft</code></td><td align="center">元素的水平滚动条向右滚动的像素数量</td></tr><tr><td align="center"><code>scrollTop</code></td><td align="center">元素的垂直滚动条向下滚动的像素数量</td></tr><tr><td align="center"><code>offsetHeight</code></td><td align="center">元素的<code>CSS</code>垂直高度。包括元素本身的高度、<code>padding</code>和<code>border</code></td></tr><tr><td align="center"><code>offsetWidth</code></td><td align="center">元素的<code>CSS</code>水平宽度。包括元素本身的高度、<code>padding</code>和<code>border</code></td></tr><tr><td align="center"><code>offsetLeft</code></td><td align="center">到定位父级左边界的间距</td></tr><tr><td align="center"><code>offsetTop</code></td><td align="center">到定位父级上边界的间距</td></tr></tbody></table><h4 id="Element-clientHeight，Element-clientWidth"><a href="#Element-clientHeight，Element-clientWidth" class="headerlink" title="Element.clientHeight，Element.clientWidth"></a>Element.clientHeight，Element.clientWidth</h4><p><code>Element.clientHeight</code>属性返回一个整数值，表示元素节点的<code>CSS</code>高度，只对块级元素生效，对于行内元素返回<code>0</code></p><p>如果块级元素没有设置<code>CSS</code>高度，则返回其实际高度。除了元素本身的高度，它还包括<code>padding</code>部分，但是不包括<code>border</code>、<code>margin</code></p><p>如果有水平滚动条，还要减去水平滚动条的高度</p><p>注意，这个值始终是整数，如果是小数会被四舍五入</p><p><code>Element.clientWidth</code>属性返回元素节点的<code>CSS</code>宽度，同样只对块级元素有效，也是只包括元素本身的宽度和<code>padding</code></p><p>如果有垂直滚动条，还要减去垂直滚动条的宽度</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientHeight</span> <span class="comment">// 视口高度</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">clientHeight</span> <span class="comment">// 网页总高度</span></span><br></pre></td></tr></table></figure><h4 id="Element-scrollHeight，Element-scrollWidth"><a href="#Element-scrollHeight，Element-scrollWidth" class="headerlink" title="Element.scrollHeight，Element.scrollWidth"></a>Element.scrollHeight，Element.scrollWidth</h4><p><code>Element.scrollHeight</code>属性返回一个整数值（小数会四舍五入）</p><p>表示当前元素的总高度，它包括<code>padding</code>，但是不包括<code>border</code>、<code>margin</code>以及水平滚动条的高度</p><p><code>Element.scrollWidth</code>属性表示当前元素的总宽度，其他地方都与<code>scrollHeight</code>属性类似。这两个属性只读</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollHeight</span> <span class="comment">// 返回网页的总高度</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">scrollHeight</span> <span class="comment">// 返回网页的总高度</span></span><br></pre></td></tr></table></figure><h4 id="Element-scrollLeft，Element-scrollTop"><a href="#Element-scrollLeft，Element-scrollTop" class="headerlink" title="Element.scrollLeft，Element.scrollTop"></a>Element.scrollLeft，Element.scrollTop</h4><p><code>Element.scrollLeft</code>属性表示当前元素的水平滚动条向右侧滚动的像素数量</p><p><code>Element.scrollTop</code>属性表示当前元素的垂直滚动条向下滚动的像素数量</p><p>对于那些没有滚动条的网页元素，这两个属性总是等于<code>0</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollLeft</span> <span class="comment">// 整张网页的水平滚动距离</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollTop</span> <span class="comment">// 整张网页的垂直滚动距离</span></span><br></pre></td></tr></table></figure><h4 id="Element-offsetHeight，Element-offsetWidth"><a href="#Element-offsetHeight，Element-offsetWidth" class="headerlink" title="Element.offsetHeight，Element.offsetWidth"></a>Element.offsetHeight，Element.offsetWidth</h4><p><code>Element.offsetHeight</code>属性返回一个整数，表示元素的<code>CSS</code>垂直高度</p><p>包括元素本身的高度、<code>padding</code>和<code>border</code>，以及水平滚动条的高度</p><p><code>Element.offsetWidth</code>属性表示元素的<code>CSS</code>水平宽度，其他都与<code>Element.offsetHeight</code>一致</p><p>这两个属性都是只读属性，只比<code>Element.clientHeight</code>和<code>Element.clientWidth</code>多了边框的高度或宽度</p><p>如果元素的<code>CSS</code>设为不可见（比如<code>display: none;</code>），则返回<code>0</code></p><h4 id="Element-offsetLeft，Element-offsetTop"><a href="#Element-offsetLeft，Element-offsetTop" class="headerlink" title="Element.offsetLeft，Element.offsetTop"></a>Element.offsetLeft，Element.offsetTop</h4><p><code>Element.offsetLeft</code>返回当前元素左上角相对于<code>Element.offsetParent</code>节点的水平位移</p><p><code>Element.offsetTop</code>返回当前元素左上角相对于<code>Element.offsetParent</code>节点的垂直位移</p><p>通常，这两个值是指相对于父节点的位移</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;parent&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background</span>: yellow;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> box = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;box&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(box.<span class="property">offsetLeft</span>); <span class="comment">// 水平位移</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(box.<span class="property">offsetTop</span>); <span class="comment">// 垂直位移</span></span><br></pre></td></tr></table></figure><h1 id="CSS-操作"><a href="#CSS-操作" class="headerlink" title="CSS 操作"></a>CSS 操作</h1><h2 id="setAttribute"><a href="#setAttribute" class="headerlink" title="setAttribute"></a>setAttribute</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line"></span><br><span class="line">div.<span class="property">setAttribute</span> (</span><br><span class="line">    <span class="string">&#x27;style&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;background-color: red; border: 1px solid black;&#x27;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="style"><a href="#style" class="headerlink" title="style"></a>style</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> divStyle = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>).<span class="property">style</span>;</span><br><span class="line"></span><br><span class="line">divStyle.<span class="property">backgroundColor</span> = <span class="string">&#x27;red&#x27;</span>;</span><br><span class="line">divStyle.<span class="property">border</span> = <span class="string">&#x27;1px solid black&#x27;</span>;</span><br><span class="line">divStyle.<span class="property">width</span> = <span class="string">&#x27;100px&#x27;</span>;</span><br><span class="line">divStyle.<span class="property">height</span> = <span class="string">&#x27;100px&#x27;</span>;</span><br><span class="line">divStyle.<span class="property">fontSize</span> = <span class="string">&#x27;10em&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="cssText"><a href="#cssText" class="headerlink" title="cssText"></a>cssText</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> divStyle = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>).<span class="property">style</span>;</span><br><span class="line"></span><br><span class="line">divStyle.<span class="property">cssText</span> = <span class="string">&#x27;background-color: red; border: 1px solid black;&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h1><h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><p>生成<code>Promise</code>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 异步操作</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>() &#123; <span class="comment">// 异步操作成功</span></span><br><span class="line">        <span class="title function_">resolve</span>(value);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// 异步操作失败</span></span><br><span class="line">        <span class="title function_">reject</span>(error);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>用<code>then</code>方法分别指定<code>resolved</code>状态和<code>rejected</code>状态的回调函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">promise.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">value</span>) &#123;</span><br><span class="line"> <span class="comment">// 异步操作成功的处理</span></span><br><span class="line">&#125;, <span class="keyword">function</span>(<span class="params">error</span>) &#123;</span><br><span class="line"><span class="comment">// 异步操作失败的处理</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="Async"><a href="#Async" class="headerlink" title="Async"></a>Async</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> [外部函数名]([参数], [参数]...) &#123;</span><br><span class="line">  <span class="keyword">await</span> [内部函数名]([参数], [参数]...); <span class="comment">// 异步函数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用<code>then</code>方法分别指定<code>resolved</code>状态和<code>rejected</code>状态的回调函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[外部函数名].<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">value</span>) &#123;</span><br><span class="line"> <span class="comment">// 异步操作成功的处理</span></span><br><span class="line">&#125;, <span class="keyword">function</span>(<span class="params">error</span>) &#123;</span><br><span class="line"><span class="comment">// 异步操作失败的处理</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h1><h2 id="export"><a href="#export" class="headerlink" title="export"></a>export</h2><p>导出</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> [变量]; <span class="comment">// 导出变量</span></span><br><span class="line"><span class="keyword">export</span> [函数]; <span class="comment">// 导出函数</span></span><br></pre></td></tr></table></figure><h2 id="import"><a href="#import" class="headerlink" title="import"></a>import</h2><p>导出</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; [变量名 / 函数名] &#125; <span class="keyword">from</span> [<span class="variable constant_">JS</span> 文件];</span><br><span class="line"><span class="keyword">import</span> &#123; [变量名 / 函数名] <span class="keyword">as</span> [别名] &#125; <span class="keyword">from</span> [<span class="variable constant_">JS</span> 文件]; <span class="comment">// 起别名</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> [对象别名] <span class="keyword">from</span> [<span class="variable constant_">JS</span> 文件]; <span class="comment">// 导入全部，封装为一个对象</span></span><br></pre></td></tr></table></figure><h2 id="export-default"><a href="#export-default" class="headerlink" title="export default"></a>export default</h2><p>为模块指定默认导出</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> [变量]; <span class="comment">// 导出变量</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> [函数]; <span class="comment">// 导出函数</span></span><br></pre></td></tr></table></figure><p>其他模块加载该模块时，<code>import</code>命令可以为其指定任意名字</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> [别名] <span class="keyword">from</span> [<span class="variable constant_">JS</span> 文件];</span><br></pre></td></tr></table></figure><h1 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h1><h2 id="事件处理程序"><a href="#事件处理程序" class="headerlink" title="事件处理程序"></a>事件处理程序</h2><h3 id="HTML-事件"><a href="#HTML-事件" class="headerlink" title="HTML 事件"></a>HTML 事件</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;demo()&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">demo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// HTML 事件</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="DOM0-级事件"><a href="#DOM0-级事件" class="headerlink" title="DOM0 级事件"></a>DOM0 级事件</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn&quot;</span>);</span><br><span class="line"></span><br><span class="line">btn1.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// DOM0 级事件</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="DOM2-级事件"><a href="#DOM2-级事件" class="headerlink" title="DOM2 级事件"></a>DOM2 级事件</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn&quot;</span>);</span><br><span class="line"></span><br><span class="line">btn.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, demo1);</span><br><span class="line">btn.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, demo2);</span><br><span class="line">btn.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, demo3);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">demo1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// DOM2 级事件</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">demo2</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// DOM2 级事件</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">demo3</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// DOM2 级事件</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">btn.<span class="title function_">removeEventListener</span>(<span class="string">&quot;click&quot;</span>, demo2);</span><br></pre></td></tr></table></figure><h2 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h2><p>事件发生以后，会产生一个事件对象，作为参数传给监听函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">demo</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    e.<span class="property">target</span></span><br><span class="line">    e.<span class="property">type</span></span><br><span class="line">    e.<span class="property">keyCode</span></span><br><span class="line">    e.<span class="title function_">preventDefault</span>()</span><br><span class="line">    e.<span class="title function_">stopPropagation</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><h4 id="Event-target"><a href="#Event-target" class="headerlink" title="Event.target"></a>Event.target</h4><blockquote><p>返回事件当前所在的节点</p></blockquote><h4 id="Event-type"><a href="#Event-type" class="headerlink" title="Event.type"></a>Event.type</h4><blockquote><p>返回事件的类型，该属性只读</p></blockquote><h4 id="Event-keyCode"><a href="#Event-keyCode" class="headerlink" title="Event.keyCode"></a>Event.keyCode</h4><blockquote><p>返回按下键位的 ID</p></blockquote><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><h4 id="Event-preventDefault"><a href="#Event-preventDefault" class="headerlink" title="Event.preventDefault"></a>Event.preventDefault</h4><blockquote><p>取消浏览器对当前事件的默认行为</p><p>比如点击链接后，浏览器默认会跳转到另一个页面，使用这个方法以后，就不会跳转了</p></blockquote><h4 id="Event-stopPropagation"><a href="#Event-stopPropagation" class="headerlink" title="Event.stopPropagation"></a>Event.stopPropagation</h4><blockquote><p>阻止事件在 DOM 中继续传播，防止再触发定义在别的节点上的监听函数，但是不包括在当前节点上其他的事件监听函数</p></blockquote><h2 id="事件类型"><a href="#事件类型" class="headerlink" title="事件类型"></a>事件类型</h2><blockquote><p><strong>温馨提示</strong></p><p>这些方法在使用的时候，除了 DOM2 级事件，都需要添加前缀<code>on</code></p></blockquote><h3 id="鼠标事件"><a href="#鼠标事件" class="headerlink" title="鼠标事件"></a>鼠标事件</h3><table><thead><tr><th align="center">鼠标事件</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center"><code>click</code></td><td align="center">单击</td></tr><tr><td align="center"><code>dblclick</code></td><td align="center">双击</td></tr><tr><td align="center"><code>mousedown</code></td><td align="center">按下</td></tr><tr><td align="center"><code>mouseup</code></td><td align="center">松开</td></tr><tr><td align="center"><code>mousemove</code></td><td align="center">移动</td></tr><tr><td align="center"><code>wheel</code></td><td align="center">滚动</td></tr><tr><td align="center"><code>mouseenter</code></td><td align="center">进入节点，进入子节点不会触发这个事件</td></tr><tr><td align="center"><code>mouseleave</code></td><td align="center">离开节点，离开父节点不会触发这个事件</td></tr><tr><td align="center"><code>mouseover</code></td><td align="center">进入节点，进入子节点也会触发这个事件</td></tr><tr><td align="center"><code>mouseout</code></td><td align="center">离开节点，离开父节点也会触发这个事件</td></tr></tbody></table><h3 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h3><table><thead><tr><th align="center">键盘事件</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center"><code>keydown</code></td><td align="center">按下</td></tr><tr><td align="center"><code>keypress</code></td><td align="center">按下（功能键不触发）</td></tr><tr><td align="center"><code>keyup</code></td><td align="center">松开</td></tr></tbody></table><h3 id="表单事件"><a href="#表单事件" class="headerlink" title="表单事件"></a>表单事件</h3><h4 id="input-事件"><a href="#input-事件" class="headerlink" title="input 事件"></a>input 事件</h4><blockquote><p>当<code>&lt;input&gt;、&lt;select&gt;、&lt;textarea&gt;</code>的值发生变化时触发</p></blockquote><h4 id="select-事件"><a href="#select-事件" class="headerlink" title="select 事件"></a>select 事件</h4><blockquote><p>当在<code>&lt;input&gt;、&lt;textarea&gt;</code>里面选中文本时触发</p></blockquote><h4 id="change-事件"><a href="#change-事件" class="headerlink" title="change 事件"></a>change 事件</h4><blockquote><p>当<code>&lt;input&gt;、&lt;select&gt;、&lt;textarea&gt;</code>的值全部修改完成时触发</p></blockquote><h4 id="reset-事件"><a href="#reset-事件" class="headerlink" title="reset 事件"></a>reset 事件</h4><blockquote><p>当重置表单时触发</p></blockquote><h4 id="submit-事件"><a href="#submit-事件" class="headerlink" title="submit 事件"></a>submit 事件</h4><blockquote><p>当表单数据向服务器提交时触发</p></blockquote><h2 id="事件代理"><a href="#事件代理" class="headerlink" title="事件代理"></a>事件代理</h2><blockquote><p>父节点的监听函数统一处理多个子元素的事件</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ul = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;ul&#x27;</span>);</span><br><span class="line"></span><br><span class="line">ul.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (e.<span class="property">target</span>.<span class="property">tagName</span>.<span class="title function_">toLowerCase</span>() === <span class="string">&#x27;li&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h1><h2 id="setTimeout"><a href="#setTimeout" class="headerlink" title="setTimeout"></a>setTimeout</h2><blockquote><p>用来指定某个函数在多少毫秒之后执行</p><p>它返回一个整数，表示定时器的编号</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> timerId = <span class="built_in">setTimeout</span>([函数], [延时时间]);</span><br><span class="line"><span class="built_in">clearTimeout</span>(timerId); <span class="comment">// 取消定时器</span></span><br></pre></td></tr></table></figure><h2 id="setInterval"><a href="#setInterval" class="headerlink" title="setInterval"></a>setInterval</h2><blockquote><p>用来指定某个函数每间隔多少毫秒执行一次</p><p>它返回一个整数，表示定时器的编号</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> timerId = <span class="built_in">setInterval</span>([函数], [间隔时间]);</span><br><span class="line"><span class="built_in">clearTimeout</span>(timerId); <span class="comment">// 取消定时器</span></span><br></pre></td></tr></table></figure><h1 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h1><h2 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h2><blockquote><p>是一种控制函数调用频率的技术</p><p>它确保在特定时间内只有最后一次触发的函数调用会被执行，常用于处理用户输入、窗口调整等频繁触发的事件，以提高性能</p></blockquote><p><strong>优化前代码：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">showTop</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> scrollTop = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollTop</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;滚动条位置：&#x27;</span> + scrollTop);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">onscroll</span> = showTop <span class="comment">// 监听滚动条滚动事件</span></span><br></pre></td></tr></table></figure><p><strong>优化思路：</strong></p><ol><li>如果在<code>200ms</code>内没有再次触发滚动事件，那么就执行函数</li><li>如果在<code>200ms</code>内再次触发滚动事件，那么当前的计时取消，重新开始计时</li></ol><p>效果：如果短时间内大量触发同一事件，只会执行一次函数</p><p><strong>优化后代码：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">f, delay</span>) &#123; <span class="comment">// 闭包函数</span></span><br><span class="line">    <span class="keyword">let</span> timer = <span class="literal">null</span> <span class="comment">// 多次调用都是同一个实例</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(timer) &#123;</span><br><span class="line">            <span class="built_in">clearTimeout</span>(timer) </span><br><span class="line">        &#125;</span><br><span class="line">        timer = <span class="built_in">setTimeout</span>(f, delay)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">showTop</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> scrollTop = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollTop</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;滚动条位置：&#x27;</span> + scrollTop);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">onscroll</span> = <span class="title function_">debounce</span>(showTop, <span class="number">200</span>) <span class="comment">// 监听滚动条滚动事件</span></span><br></pre></td></tr></table></figure><h2 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h2><blockquote><p>是一种控制函数调用频率的技术</p><p>它的目的是限制函数在一定时间内的执行次数，从而避免在短时间内频繁触发相同的函数</p></blockquote><p><strong>优化前代码：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">showTop</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> scrollTop = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollTop</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;滚动条位置：&#x27;</span> + scrollTop);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">onscroll</span> = showTop <span class="comment">// 监听滚动条滚动事件</span></span><br></pre></td></tr></table></figure><p><strong>优化思路：</strong></p><p>设计一种类似控制阀门一样定期开放的函数</p><p>也就是让函数执行一次后，在某个时间段内暂时失效，过了这段时间后再重新激活</p><p>效果：如果短时间内大量触发同一事件，那么在函数执行一次之后，该函数在指定的时间期限内不再工作，直至过了这段时间才重新生效</p><p><strong>优化后代码：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">f, delay</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> valid = <span class="literal">true</span> <span class="comment">// 函数开启状态</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!valid) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span> <span class="comment">// 关闭状态，不响应函数</span></span><br><span class="line">        &#125;</span><br><span class="line">        valid = <span class="literal">false</span> <span class="comment">// 设置为关闭状态</span></span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="title function_">f</span>() <span class="comment">// 执行原函数</span></span><br><span class="line">            valid = <span class="literal">true</span>; <span class="comment">// 原函数执行完成后，设置为开启状态</span></span><br><span class="line">        &#125;, delay)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">showTop</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> scrollTop = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollTop</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;滚动条位置：&#x27;</span> + scrollTop);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">onscroll</span> = <span class="title function_">throttle</span>(showTop, <span class="number">200</span>) <span class="comment">// 监听滚动条滚动事件</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 定时器 </tag>
            
            <tag> Web </tag>
            
            <tag> 函数 </tag>
            
            <tag> 数据类型 </tag>
            
            <tag> 模块 </tag>
            
            <tag> JavaScript </tag>
            
            <tag> Document </tag>
            
            <tag> Element </tag>
            
            <tag> Promise </tag>
            
            <tag> 事件 </tag>
            
            <tag> 性能优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git 版本控制</title>
      <link href="/2023/10/28/02%20Git%20%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
      <url>/2023/10/28/02%20Git%20%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="安装-Git"><a href="#安装-Git" class="headerlink" title="安装 Git"></a>安装 Git</h1><p>进入<code>Git</code>官网：<a href="https://git-scm.com/download/win">https://git-scm.com/download/win</a></p><p>下载安装包</p><p><img src="/../images/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/02%20Git%20%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6-1.jpg"><br>打开命令行窗口<br><img src="/../images/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/02%20Git%20%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6-2.jpg"></p><p>设定用户名和邮箱</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;Kokoa_Chino&quot;</span><br><span class="line">git config --global user.email &quot;2178740980@qq.com&quot;</span><br></pre></td></tr></table></figure><h1 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h1><h2 id="创建本地仓库"><a href="#创建本地仓库" class="headerlink" title="创建本地仓库"></a>创建本地仓库</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><h2 id="查询当前状态"><a href="#查询当前状态" class="headerlink" title="查询当前状态"></a>查询当前状态</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure><h2 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h2><p>添加文件至暂存区</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add [文件名]</span><br><span class="line">git add . # 一次性添加目录下所有的文件</span><br></pre></td></tr></table></figure><h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><p>提交文件至本地仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &#x27;[描述信息]&#x27;</span><br></pre></td></tr></table></figure><h2 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h2><p>查看提交记录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git log # 显示当前分支的提交记录</span><br><span class="line">git log --graph # 用图形化方式显示当前分支的提交记录</span><br><span class="line">git log --all --graph # 用图形化方式显示所有分支的提交记录</span><br><span class="line">git log --all --oneline --graph # 用图形化方式一行显示所有分支的提交记录</span><br></pre></td></tr></table></figure><p>查看变更内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git show # 查看最近一次的变更内容</span><br><span class="line">git show commit [ID] # 查看指定 ID 的变更内容</span><br></pre></td></tr></table></figure><p>查看所有分支</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure><p>查看所有分支的操作记录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reflog</span><br></pre></td></tr></table></figure><p>查看合并分支的冲突</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff</span><br></pre></td></tr></table></figure><h2 id="回滚"><a href="#回滚" class="headerlink" title="回滚"></a>回滚</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard [ID] # 回退到指定 ID 的提交</span><br></pre></td></tr></table></figure><h1 id="忽略列表"><a href="#忽略列表" class="headerlink" title="忽略列表"></a>忽略列表</h1><p>创建一个<code>.gitignore</code>文件来确定一个文件忽略列表</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">*.txt</span> <span class="comment"># 匹配所有以 .txt 结尾的文件</span></span><br><span class="line"><span class="type">!666.txt</span> <span class="comment"># 不匹配指定文件</span></span><br><span class="line"><span class="string">test/</span> <span class="comment"># 匹配该文件夹下的所有文件</span></span><br><span class="line"><span class="string">test/*.txt</span> <span class="comment"># 匹配该文件夹中所有以 .txt 结尾的文件，但不包括子目录</span></span><br><span class="line"><span class="string">test/**/*.txt</span> <span class="comment"># 匹配该文件夹中所有以 .txt 结尾的文件，包括子目录</span></span><br></pre></td></tr></table></figure><h1 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h1><h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch [分支名]</span><br></pre></td></tr></table></figure><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d [分支名]</span><br></pre></td></tr></table></figure><h2 id="切换"><a href="#切换" class="headerlink" title="切换"></a>切换</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout [分支名]</span><br></pre></td></tr></table></figure><h2 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge [分支名]</span><br></pre></td></tr></table></figure><h2 id="变基"><a href="#变基" class="headerlink" title="变基"></a>变基</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase [分支名]</span><br></pre></td></tr></table></figure><h2 id="优选"><a href="#优选" class="headerlink" title="优选"></a>优选</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git cherry-pick [id] # 单独合并一个提交</span><br></pre></td></tr></table></figure><h1 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h1><p>登录 <a href="https://github.com/">github</a></p><h2 id="创建-1"><a href="#创建-1" class="headerlink" title="创建"></a>创建</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add [名称] [远程仓库地址]</span><br></pre></td></tr></table></figure><h2 id="推送"><a href="#推送" class="headerlink" title="推送"></a>推送</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git push [远程仓库名称] [本地分支名称] # 本地分支和远程分支相同</span><br><span class="line">git push [远程仓库名称] [本地分支名称:远程分支名称] # 本地分支和远程分支不同</span><br></pre></td></tr></table></figure><h2 id="绑定"><a href="#绑定" class="headerlink" title="绑定"></a>绑定</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git push --set-upstream [远程仓库名称] [本地分支名称:远程分支名称]</span><br><span class="line">git push [远程仓库名称] # 绑定后就不需要指定分支名称了</span><br></pre></td></tr></table></figure><h2 id="克隆"><a href="#克隆" class="headerlink" title="克隆"></a>克隆</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone [远程仓库地址]</span><br></pre></td></tr></table></figure><h2 id="抓取"><a href="#抓取" class="headerlink" title="抓取"></a>抓取</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch [远程仓库名称] # 只获取但不合并远端分支，后面需要手动合并才能提交</span><br></pre></td></tr></table></figure><h2 id="拉取"><a href="#拉取" class="headerlink" title="拉取"></a>拉取</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull [远程仓库名称] # 获取 + 合并</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 中间件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> 远程仓库 </tag>
            
            <tag> 分支 </tag>
            
            <tag> 命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaSE 新特性</title>
      <link href="/2023/10/10/02%20JavaSE%20%E6%96%B0%E7%89%B9%E6%80%A7/"/>
      <url>/2023/10/10/02%20JavaSE%20%E6%96%B0%E7%89%B9%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="Java-8"><a href="#Java-8" class="headerlink" title="Java 8"></a>Java 8</h1><h2 id="Lambda-表达式"><a href="#Lambda-表达式" class="headerlink" title="Lambda 表达式"></a>Lambda 表达式</h2><p><strong><code>Lambda</code>表达式：</strong>实现接口中的抽象方法的简易写法</p><ol><li>格式：<code>(参数列表) -&gt; &#123;代码块&#125;</code></li><li>仅支持接口</li><li>接口内部有且仅有一个抽象方法，或者其他方法有默认实现</li></ol><h2 id="Optional"><a href="#Optional" class="headerlink" title="Optional"></a>Optional</h2><blockquote><p>用于安全地表示和处理可能为 null 的值，避免显式的空值检查</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">empty()：返回一个空的 Optional 实例</span><br><span class="line">of(值)：将该值封装为一个 Optional 实例，为空抛出 NullPointerException 异常</span><br><span class="line">ofNullable(值)：将该值封装为一个 Optional 实例，为空返回一个空的 Optional 实例</span><br><span class="line"></span><br><span class="line">get()：返回值，为空抛出 NoSuchElementException 异常</span><br><span class="line">map(函数型函数)：将该函数作用于该值上</span><br><span class="line">filter(断言型函数)：如果与给定的谓词匹配，则返回本身。否则返回一个空的 Optional 实例</span><br><span class="line">stream()：将该 Optional 实例转换为 stream 流</span><br><span class="line"></span><br><span class="line">isPresent()：判断是否存在值</span><br><span class="line">ifPresent(消费型函数)：如果值不为空，则对它进行消费</span><br><span class="line">ifPresentOrElse(消费型函数，函数)：如果值不为空，则对它进行消费。否则对它进行默认操作</span><br><span class="line"></span><br><span class="line">or(供给型函数)：如果值不为空，则返回该值。否则，返回值由该供给型函数提供</span><br><span class="line">orElseGet(供给型函数)：如果值不为空，则返回该值。否则，返回值由该供给型函数提供</span><br><span class="line">orElse(值)：如果值不为空，则返回该值。否则，返回设定值</span><br><span class="line">orElseThrow()：如果值不为空，则返回该值。否则，抛出 NoSuchElementException 异常</span><br><span class="line">orElseThrow(供给型函数)：如果值不为空，则返回该值。否则，抛出由该供给型函数提供的异常</span><br></pre></td></tr></table></figure><h1 id="Java-9"><a href="#Java-9" class="headerlink" title="Java 9"></a>Java 9</h1><h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> 模块名 &#123;</span><br><span class="line">    <span class="keyword">requires</span> java.util <span class="comment">// 导入包</span></span><br><span class="line">    <span class="keyword">requires</span> <span class="keyword">static</span> java.util <span class="comment">// 使用 static 来表示仅在编译时添加该包，运行时不添加</span></span><br><span class="line">    <span class="keyword">requires</span> transitive java.util <span class="comment">// 使用 transitive 来向其他模块传递此依赖</span></span><br><span class="line">    <span class="keyword">exports</span> com.test <span class="comment">// 将该包下的所有内容全部暴露出去</span></span><br><span class="line">    <span class="keyword">exports</span> com.test to 模块名 <span class="comment">// 可以只暴露给特定的模块</span></span><br><span class="line">    uses com.test.Test <span class="comment">// 使用 uses 指定，Test 是一个接口</span></span><br><span class="line">    provides com.test.Test with com.main.TestImpl <span class="comment">// 声明此模块提供了 Test 的实现类</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">open <span class="keyword">module</span> 模块名 &#123; <span class="comment">// 直接添加 open 关键字开放整个模块的反射权限</span></span><br><span class="line">    opens com.test <span class="comment">// 通过使用 opens 关键字开放该包的反射权限</span></span><br><span class="line">    opens com.test to 模块名 <span class="comment">// 也可以指定目标</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="集合类新增工厂方法"><a href="#集合类新增工厂方法" class="headerlink" title="集合类新增工厂方法"></a>集合类新增工厂方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = List.of(<span class="string">&quot;AAA&quot;</span>, <span class="string">&quot;CCC&quot;</span>, <span class="string">&quot;BBB&quot;</span>)</span><br><span class="line">Map&lt;String, Integer&gt; map = Map.of(<span class="string">&quot;AAA&quot;</span>, <span class="number">18</span>, <span class="string">&quot;BBB&quot;</span>, <span class="number">20</span>)</span><br><span class="line">Set&lt;String&gt; set = Set.of(<span class="string">&quot;BBB&quot;</span>, <span class="string">&quot;CCC&quot;</span>, <span class="string">&quot;AAA&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>通过这种方式生成的集合都是不可变类型！！！</strong></p><h1 id="Java-10"><a href="#Java-10" class="headerlink" title="Java 10"></a>Java 10</h1><h2 id="局部变量类型推断"><a href="#局部变量类型推断" class="headerlink" title="局部变量类型推断"></a>局部变量类型推断</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">var</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span> <span class="comment">// int</span></span><br><span class="line"><span class="type">var</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">1.0</span> <span class="comment">// double</span></span><br><span class="line"><span class="type">var</span> <span class="variable">c</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span> <span class="comment">// String</span></span><br></pre></td></tr></table></figure><p>通常用于<code>for in</code>语法中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> x: H.getXXX()) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>仅适用于局部变量！！！</strong></p><h1 id="Java-11"><a href="#Java-11" class="headerlink" title="Java 11"></a>Java 11</h1><h2 id="HttpClient"><a href="#HttpClient" class="headerlink" title="HttpClient"></a>HttpClient</h2><blockquote><p>用于简化和增强 HTTP 请求和响应的处理，支持异步操作和 HTTP&#x2F;2 协议</p></blockquote><p>取代之前比较老旧的<code>HttpURLConnection</code></p><p>以下是一个基于<code>HttpClient</code>的壁纸爬虫项目</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>(<span class="type">HttpClient</span> <span class="variable">client</span> <span class="operator">=</span> HttpClient.newHttpClient()) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="type">HttpRequest</span> <span class="variable">request</span> <span class="operator">=</span> HttpRequest.newBuilder().uri(<span class="keyword">new</span> <span class="title class_">URI</span>(<span class="string">&quot;https://pic.netbian.com/tupian/&quot;</span> + (<span class="number">29327</span> + i) + <span class="string">&quot;.html&quot;</span>)).build();</span><br><span class="line">        HttpResponse&lt;String&gt; response = client.send(request, HttpResponse.BodyHandlers.ofString());</span><br><span class="line">        <span class="type">String</span> <span class="variable">html</span> <span class="operator">=</span> response.body();</span><br><span class="line">        <span class="type">String</span> <span class="variable">prefix</span> <span class="operator">=</span> <span class="string">&quot;&lt;a href=\&quot;\&quot; id=\&quot;img\&quot;&gt;&lt;img src=\&quot;&quot;</span>, suffix = <span class="string">&quot;\&quot; data-pic=&quot;</span>;</span><br><span class="line">        html = html.substring(html.indexOf(prefix) + prefix.length());</span><br><span class="line">        html = html.substring(<span class="number">0</span>, html.indexOf(suffix));</span><br><span class="line">        <span class="type">HttpRequest</span> <span class="variable">imageRequest</span> <span class="operator">=</span> HttpRequest.newBuilder().uri(<span class="keyword">new</span> <span class="title class_">URI</span>(<span class="string">&quot;https://pic.netbian.com&quot;</span> + html)).build();</span><br><span class="line">        HttpResponse&lt;InputStream&gt; imageResponse = client.send(imageRequest, HttpResponse.BodyHandlers.ofInputStream());</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">imageInput</span> <span class="operator">=</span> imageResponse.body();</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">stream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(i + <span class="string">&quot;.jpg&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> (stream; imageInput)&#123;</span><br><span class="line">            <span class="type">int</span> size;</span><br><span class="line">            <span class="type">byte</span>[] data = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">while</span> ((size = imageInput.read(data)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                stream.write(data, <span class="number">0</span>, size);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Java-14"><a href="#Java-14" class="headerlink" title="Java 14"></a>Java 14</h1><h2 id="switch-表达式"><a href="#switch-表达式" class="headerlink" title="switch 表达式"></a>switch 表达式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">var</span> <span class="variable">val</span> <span class="operator">=</span> <span class="keyword">switch</span> (score) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">10</span>, <span class="number">9</span> -&gt; <span class="string">&quot;优秀&quot;</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">8</span>, <span class="number">7</span> -&gt; <span class="string">&quot;良好&quot;</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">6</span> -&gt; <span class="string">&quot;及格&quot;</span></span><br><span class="line">    <span class="keyword">default</span> -&gt; &#123;</span><br><span class="line">        代码块</span><br><span class="line">        <span class="keyword">yield</span> <span class="string">&quot;不及格&quot;</span> <span class="comment">// 通过 yield 返回其值</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Java-15"><a href="#Java-15" class="headerlink" title="Java 15"></a>Java 15</h1><h2 id="三引号文本块"><a href="#三引号文本块" class="headerlink" title="三引号文本块"></a>三引号文本块</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">                文本块</span></span><br><span class="line"><span class="string">                文本块</span></span><br><span class="line"><span class="string">                文本块</span></span><br><span class="line"><span class="string">            &quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h1 id="Java-16"><a href="#Java-16" class="headerlink" title="Java 16"></a>Java 16</h1><h2 id="模式变量"><a href="#模式变量" class="headerlink" title="模式变量"></a>模式变量</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(obj <span class="keyword">instanceof</span> Student student) &#123; <span class="comment">// 断言通过的话，student = (Student) obj</span></span><br><span class="line">    <span class="keyword">return</span> student.name.equals(<span class="built_in">this</span>.name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="记录类型"><a href="#记录类型" class="headerlink" title="记录类型"></a>记录类型</h2><p>官方的<code>Lombok</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">record</span> <span class="title class_">Test</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="title function_">getSum</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>支持多实现，不支持继承</li><li>成员字段写在括号内</li><li>自动生成<code>Get</code>，<code>Set</code>，<code>Equals</code>等<code>Lombok </code>支持的所有方法</li></ol><h1 id="Java-17"><a href="#Java-17" class="headerlink" title="Java 17"></a>Java 17</h1><h2 id="密封类型"><a href="#密封类型" class="headerlink" title="密封类型"></a>密封类型</h2><p>限制类的继承</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title class_">A</span> <span class="keyword">permits</span> B &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">密封类型</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center"><code>final</code></td><td align="center">任何类不能再继承当前类</td></tr><tr><td align="center"><code>sealed</code></td><td align="center">需要指定由哪些类继承，通过 permits 来指定</td></tr><tr><td align="center"><code>non-sealed</code></td><td align="center">重新开放为普通类，任何类都可以继承</td></tr></tbody></table><ol><li>可以基于普通类、抽象类、接口</li><li>必须有子类继承，且不能是匿名内部类或是<code>lambda</code>的形式</li><li>继承的子类必须显式标记为<code>final</code>、<code>sealed</code>或是<code>non-sealed</code></li></ol>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 新特性 </tag>
            
            <tag> Optional </tag>
            
            <tag> Lambda </tag>
            
            <tag> HttpClient </tag>
            
            <tag> 模块 </tag>
            
            <tag> switch </tag>
            
            <tag> 文本块 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS</title>
      <link href="/2023/09/18/02%20CSS/"/>
      <url>/2023/09/18/02%20CSS/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><blockquote><p>CSS（层叠样式表）是一种用于描述 HTML 或 XML 文档呈现样式的样式表语言</p></blockquote><h1 id="CSS-语法"><a href="#CSS-语法" class="headerlink" title="CSS 语法"></a>CSS 语法</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">选择器 &#123;</span><br><span class="line">    属性名称: 属性值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    <span class="selector-tag">h1</span> &#123;</span><br><span class="line">        <span class="attribute">color</span>: blue;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>选择器通常是需要改变样式的<code>HTML</code>元素</p><p>属性是您希望设置的样式属性</p><h1 id="引入方式"><a href="#引入方式" class="headerlink" title="引入方式"></a>引入方式</h1><h2 id="内联样式"><a href="#内联样式" class="headerlink" title="内联样式"></a>内联样式</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;[CSS 样式]&quot;</span>&gt;</span>CSS<span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="内部样式"><a href="#内部样式" class="headerlink" title="内部样式"></a>内部样式</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        选择器 &#123;</span></span><br><span class="line"><span class="language-css">            属性名称: 属性值;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="外部样式（推荐）"><a href="#外部样式（推荐）" class="headerlink" title="外部样式（推荐）"></a>外部样式（推荐）</h2><p>每个页面使用<code>&lt;link&gt;</code>标签链接到样式表。 <code>&lt;link&gt;</code>标签在文档的头部</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;xxx.css&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h1><h2 id="选择器的种类"><a href="#选择器的种类" class="headerlink" title="选择器的种类"></a>选择器的种类</h2><h3 id="全局选择器"><a href="#全局选择器" class="headerlink" title="全局选择器"></a>全局选择器</h3><p>可以与任何元素匹配，优先级最低。一般做样式初始化</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">    属性名称: 属性值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="标签选择器"><a href="#标签选择器" class="headerlink" title="标签选择器"></a>标签选择器</h3><p><code>HTML</code>文档中的标签，<code>p、b、div、a、img、body</code>等</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">标签名称 &#123;</span><br><span class="line">    属性名称: 属性值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h3><p>规定用圆点<code>.</code>来定义，针对想要的所有标签使用</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.类名 &#123;</span><br><span class="line">    属性名称: 属性值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;A&quot;</span>&gt;</span>AAA<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">.A &#123;</span><br><span class="line">width: 800px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ID-选择器"><a href="#ID-选择器" class="headerlink" title="ID 选择器"></a>ID 选择器</h3><p>针对某一个特定的标签来使用，<code>ID</code>名称唯一</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># ID名 &#123;</span><br><span class="line">    属性名称: 属性值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">id</span>=<span class="string">&quot;id&quot;</span>&gt;</span>AAA<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line"># id &#123;</span><br><span class="line">    border: 3px dashed green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="合并选择器"><a href="#合并选择器" class="headerlink" title="合并选择器"></a>合并选择器</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">选择器<span class="number">1</span>, 选择器<span class="number">2</span>... &#123;</span><br><span class="line">    属性名称: 属性值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.header</span>, <span class="selector-class">.footer</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="关系选择器"><a href="#关系选择器" class="headerlink" title="关系选择器"></a>关系选择器</h2><h3 id="后代选择器"><a href="#后代选择器" class="headerlink" title="后代选择器"></a>后代选择器</h3><p><strong>语法</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">E F &#123;&#125;</span><br></pre></td></tr></table></figure><p><strong>定义</strong></p><p>选择所有被<code>E</code>元素包含的<code>F</code>元素</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>AAA<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>BBB<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="子代选择器"><a href="#子代选择器" class="headerlink" title="子代选择器"></a>子代选择器</h3><p><strong>语法</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">E&gt;F &#123;&#125;</span><br></pre></td></tr></table></figure><p><strong>定义</strong></p><p>选择所有作为<code>E</code>元素的直接子元素<code>F</code>，对更深一层的元素不起作用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>子元素 1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>孙元素<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>子元素 2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&gt;<span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="相邻兄弟选择器"><a href="#相邻兄弟选择器" class="headerlink" title="相邻兄弟选择器"></a>相邻兄弟选择器</h3><p><strong>语法</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">E+F &#123;&#125;</span><br></pre></td></tr></table></figure><p><strong>定义</strong></p><p>选择紧跟<code>E</code>元素后的<code>F</code>元素，也就是选择相邻的第一个兄弟元素</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>h1 元素<span class="tag">&lt;/<span class="name">h1</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>第一个元素<span class="tag">&lt;/<span class="name">p</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>第二个元素<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span>+<span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="通用兄弟选择器"><a href="#通用兄弟选择器" class="headerlink" title="通用兄弟选择器"></a>通用兄弟选择器</h3><p><strong>语法</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">E~F &#123;&#125;</span><br></pre></td></tr></table></figure><p><strong>定义</strong></p><p>选择<code>E</code>元素之后的所有兄弟元素<code>F</code>，作用于多个元素</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>h1 元素<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>第一个元素<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>第二个元素<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span>~<span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="选择器的优先级"><a href="#选择器的优先级" class="headerlink" title="选择器的优先级"></a>选择器的优先级</h2><p><strong>优先级从高到低：内联样式 &gt; ID 选择器 &gt; 类选择器 &gt; 元素选择器</strong></p><p>可以通过在选择器前添加<code>!important</code>来大幅度提高优先级</p><h1 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h1><h2 id="尺寸"><a href="#尺寸" class="headerlink" title="尺寸"></a>尺寸</h2><table><thead><tr><th align="left">用法</th><th align="left">讲解</th></tr></thead><tbody><tr><td align="left">width [大小]</td><td align="left">设置元素的宽度</td></tr><tr><td align="left">height [大小]</td><td align="left">设置元素的高度</td></tr><tr><td align="left">min-width [大小]</td><td align="left">设置元素的最小宽度</td></tr><tr><td align="left">min-height [大小]</td><td align="left">设置元素的最小高度</td></tr><tr><td align="left">max-width [大小]</td><td align="left">设置元素的最大宽度</td></tr><tr><td align="left">max-height [大小]</td><td align="left">设置元素的最大高度</td></tr><tr><td align="left">padding [大小]</td><td align="left">设置所有四个方向的内边距</td></tr><tr><td align="left">padding [大小] [大小]</td><td align="left">第一个值设置上下内边距，第二个值设置左右内边距</td></tr><tr><td align="left">padding [大小] [大小] [大小]</td><td align="left">第一个值设置上内边距，第二个值设置左右内边距，第三个值设置下内边距</td></tr><tr><td align="left">padding [大小] [大小] [大小] [大小]</td><td align="left">第一个值设置上内边距，第二个值设置右内边距，第三个值设置下内边距，第四个值设置左内边距</td></tr><tr><td align="left">margin [大小]</td><td align="left">设置所有四个方向的外边距</td></tr><tr><td align="left">margin [大小] [大小]</td><td align="left">第一个值设置上下外边距，第二个值设置左右外边距</td></tr><tr><td align="left">margin [大小] [大小] [大小]</td><td align="left">第一个值设置上外边距，第二个值设置左右外边距，第三个值设置下外边距</td></tr><tr><td align="left">margin [大小] [大小] [大小] [大小]</td><td align="left">第一个值设置上外边距，第二个值设置右外边距，第三个值设置下外边距，第四个值设置左外边距</td></tr><tr><td align="left">border [大小] [样式] [颜色]</td><td align="left">设置元素的边框</td></tr><tr><td align="left">border [大小] [样式] [颜色] [颜色]</td><td align="left">设置元素的边框（有时颜色可能指定多个值）</td></tr><tr><td align="left">border-radius [大小]</td><td align="left">设置元素的圆角半径</td></tr><tr><td align="left">border-radius [大小] [大小]</td><td align="left">第一个值设置上左和下右角半径，第二个值设置上右和下左角半径</td></tr><tr><td align="left">border-radius [大小] [大小] [大小]</td><td align="left">第一个值设置上左角半径，第二个值设置上右角半径，第三个值设置下右角半径</td></tr><tr><td align="left">border-radius [大小] [大小] [大小] [大小]</td><td align="left">逐个设置四个角的半径</td></tr><tr><td align="left">box-sizing border-box</td><td align="left">设置盒子模型的计算方式，包括内边距和边框在内计算总宽度和高度</td></tr></tbody></table><p>演示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">    Test</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">20px</span> auto;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">5px</span> solid <span class="number">#0056b3</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/../images/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/02%20CSS-1.jpg"></p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><table><thead><tr><th>用法</th><th>讲解</th></tr></thead><tbody><tr><td>background-color [颜色]</td><td>设置元素的背景颜色</td></tr><tr><td>background-image [图片]</td><td>设置元素的背景图片</td></tr><tr><td>background-size [尺寸]</td><td>设置背景图像的尺寸</td></tr><tr><td>background-position [位置]</td><td>设置背景图像的位置</td></tr><tr><td>background-repeat [重复]</td><td>设置背景图像的重复方式</td></tr><tr><td>box-shadow [水平偏移] [垂直偏移] [模糊半径] [颜色]</td><td>设置元素的阴影效果</td></tr><tr><td>box-shadow [水平偏移] [垂直偏移] [模糊半径] [颜色] [颜色]</td><td>设置元素的阴影效果（颜色可能指定多个值）</td></tr></tbody></table><p>演示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">    Test</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&quot;https://ts1.cn.mm.bing.net/th/id/R-C.6b5df1bfe0e4778a44dba0753cd169c8?rik=QRQIMqvjWRCO5Q&amp;riu=http%3a%2f%2fpic39.nipic.com%2f20140321%2f8857347_232251363165_2.jpg&amp;ehk=7oAaMo6LCHJc%2bqpQ0IPvcH7v69jGRQhb2vDz%2fOd5720%3d&amp;risl=&amp;pid=ImgRaw&amp;r=0&quot;</span>);</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">5px</span> <span class="number">5px</span> <span class="number">10px</span> burlywood;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/../images/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/02%20CSS-2.jpg"></p><h2 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h2><table><thead><tr><th>用法</th><th>讲解</th></tr></thead><tbody><tr><td>color [颜色]</td><td>设置文本的颜色</td></tr><tr><td>font-size [大小]</td><td>设置文本的字体大小</td></tr><tr><td>font-family [字体]</td><td>设置文本的字体系列</td></tr><tr><td>font-weight [粗细]</td><td>设置文本的粗细</td></tr><tr><td>line-height [大小]</td><td>设置文本的行高</td></tr><tr><td>text-align [对齐方式]</td><td>设置文本的对齐方式</td></tr><tr><td>text-shadow [水平偏移] [垂直偏移] [模糊半径] [颜色]</td><td>设置文本的阴影效果</td></tr><tr><td>text-decoration [样式]</td><td>设置文本的装饰（如下划线、删除线等）</td></tr><tr><td>text-decoration [样式] [颜色]</td><td>设置文本的装饰和颜色</td></tr><tr><td>text-transform [变形]</td><td>设置文本的大小写变换，如全大写、全小写等</td></tr><tr><td>text-indent [缩进]</td><td>设置文本的首行缩进距离</td></tr><tr><td>writing-mode [模式]</td><td>设置文本的书写模式（如横向或纵向）</td></tr><tr><td>text-orientation [方向]</td><td>设置文本的方向（如正常、竖直等）</td></tr></tbody></table><p>演示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>鸡汤文案<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>人生如行路，每一步都是一次积累，无论经历多少坎坷，都是在赚取宝贵的经验<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>竖直的字母：ABC<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: skyblue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span> <span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: lighter;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">25px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">text-shadow</span>: <span class="number">5px</span> <span class="number">5px</span> <span class="number">5px</span> black;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">text-indent</span>: <span class="number">2em</span>;</span><br><span class="line">    <span class="attribute">color</span>: darkcyan;</span><br><span class="line">    <span class="attribute">font-family</span>: 楷体;</span><br><span class="line">    <span class="attribute">text-decoration</span>: underline green;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">writing-mode</span>: vertical-rl;</span><br><span class="line">    <span class="attribute">text-orientation</span>: upright;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/../images/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/02%20CSS-3.jpg"></p><h2 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h2><table><thead><tr><th>用法</th><th>讲解</th></tr></thead><tbody><tr><td>position [定位方式]</td><td>设置元素的定位方式（如绝对定位、相对定位等）</td></tr><tr><td>top [大小]</td><td>设置元素的顶部位置</td></tr><tr><td>bottom [大小]</td><td>设置元素的底部位置</td></tr><tr><td>left [大小]</td><td>设置元素的左侧位置</td></tr><tr><td>right [大小]</td><td>设置元素的右侧位置</td></tr><tr><td>z-index [堆叠顺序]</td><td>设置元素的堆叠顺序。拥有更高堆叠顺序的元素总是会处于堆叠顺序较低的元素的前面</td></tr></tbody></table><h3 id="相对定位"><a href="#相对定位" class="headerlink" title="相对定位"></a>相对定位</h3><p>演示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/../images/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/02%20CSS-4.jpg"></p><h3 id="绝对定位"><a href="#绝对定位" class="headerlink" title="绝对定位"></a>绝对定位</h3><p>演示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box1</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box2</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/../images/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/02%20CSS-5.jpg"></p><h3 id="固定定位"><a href="#固定定位" class="headerlink" title="固定定位"></a>固定定位</h3><p>演示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box1</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box2</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/../images/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/02%20CSS-6.jpg"></p><h3 id="Z-index"><a href="#Z-index" class="headerlink" title="Z-index"></a>Z-index</h3><p>演示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box1</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box2</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: green;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/../images/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/02%20CSS-7.jpg"></p><h2 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h2><table><thead><tr><th>用法</th><th>讲解</th></tr></thead><tbody><tr><td>display [布局模式]</td><td>设置元素的显示类型（如块级、内联、弹性布局等）</td></tr><tr><td>overflow [溢出处理]</td><td>设置如何处理超出元素框的内容</td></tr></tbody></table><h3 id="流式布局"><a href="#流式布局" class="headerlink" title="流式布局"></a>流式布局</h3><table><thead><tr><th>用法</th><th>讲解</th></tr></thead><tbody><tr><td>flex-direction [方向]</td><td>设置弹性容器内项目的主轴方向</td></tr><tr><td>flex [缩写]</td><td>设置弹性项目的伸缩属性</td></tr><tr><td>align-items [对齐方式]</td><td>设置弹性容器内项目的交叉轴对齐方式</td></tr><tr><td>justify-content [对齐方式]</td><td>设置弹性容器内项目的主轴对齐方式</td></tr></tbody></table><p>演示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            @BeforeAll：添加测试用例开始之前的前置操作，对于全部的测试用例，只会执行一次</span><br><span class="line">            @BeforeEach：添加测试用例开始之前的前置操作，对于每个测试用例，都会执行一次</span><br><span class="line">            @AfterAll：添加测试用例开始之后的收尾操作，对于全部的测试用例，只会执行一次</span><br><span class="line">            @AfterEach：添加测试用例开始之后的收尾操作，对于每个测试用例，都会执行一次</span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            @BeforeAll：添加测试用例开始之前的前置操作，对于全部的测试用例，只会执行一次</span><br><span class="line">            @BeforeEach：添加测试用例开始之前的前置操作，对于每个测试用例，都会执行一次</span><br><span class="line">            @AfterAll：添加测试用例开始之后的收尾操作，对于全部的测试用例，只会执行一次</span><br><span class="line">            @AfterEach：添加测试用例开始之后的收尾操作，对于每个测试用例，都会执行一次</span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            @BeforeAll：添加测试用例开始之前的前置操作，对于全部的测试用例，只会执行一次</span><br><span class="line">            @BeforeEach：添加测试用例开始之前的前置操作，对于每个测试用例，都会执行一次</span><br><span class="line">            @AfterAll：添加测试用例开始之后的收尾操作，对于全部的测试用例，只会执行一次</span><br><span class="line">            @AfterEach：添加测试用例开始之后的收尾操作，对于每个测试用例，都会执行一次</span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.flex</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: skyblue;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">align-items</span>: flex-start;</span><br><span class="line">    <span class="attribute">justify-content</span>: flex-end;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/../images/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/02%20CSS-8.jpg"></p><h3 id="网格布局"><a href="#网格布局" class="headerlink" title="网格布局"></a>网格布局</h3><table><thead><tr><th>用法</th><th>讲解</th></tr></thead><tbody><tr><td>grid-template-columns [大小]</td><td>定义网格容器的列轨道的大小</td></tr><tr><td>grid-template-columns [重复模式]</td><td>定义网格容器的列轨道大小并使用重复模式</td></tr><tr><td>grid-template-rows [大小]</td><td>定义网格容器的行轨道的大小</td></tr><tr><td>grid-template-rows [重复模式]</td><td>定义网格容器的行轨道大小并使用重复模式</td></tr></tbody></table><p>演示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;grid&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            @BeforeAll：添加测试用例开始之前的前置操作，对于全部的测试用例，只会执行一次</span><br><span class="line">            @BeforeEach：添加测试用例开始之前的前置操作，对于每个测试用例，都会执行一次</span><br><span class="line">            @AfterAll：添加测试用例开始之后的收尾操作，对于全部的测试用例，只会执行一次</span><br><span class="line">            @AfterEach：添加测试用例开始之后的收尾操作，对于每个测试用例，都会执行一次</span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            @BeforeAll：添加测试用例开始之前的前置操作，对于全部的测试用例，只会执行一次</span><br><span class="line">            @BeforeEach：添加测试用例开始之前的前置操作，对于每个测试用例，都会执行一次</span><br><span class="line">            @AfterAll：添加测试用例开始之后的收尾操作，对于全部的测试用例，只会执行一次</span><br><span class="line">            @AfterEach：添加测试用例开始之后的收尾操作，对于每个测试用例，都会执行一次</span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            @BeforeAll：添加测试用例开始之前的前置操作，对于全部的测试用例，只会执行一次</span><br><span class="line">            @BeforeEach：添加测试用例开始之前的前置操作，对于每个测试用例，都会执行一次</span><br><span class="line">            @AfterAll：添加测试用例开始之后的收尾操作，对于全部的测试用例，只会执行一次</span><br><span class="line">            @AfterEach：添加测试用例开始之后的收尾操作，对于每个测试用例，都会执行一次</span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.grid</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    <span class="attribute">grid-template-columns</span>: <span class="number">1</span>fr <span class="number">2</span>fr <span class="number">1</span>fr;</span><br><span class="line">    <span class="attribute">grid-template-rows</span>: <span class="built_in">repeat</span>(<span class="number">2</span>, <span class="number">1</span>fr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.center</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#0056b3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.center</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>n+<span class="number">1</span>) &#123;</span><br><span class="line">     <span class="attribute">color</span>: orange;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/../images/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/02%20CSS-9.jpg"></p><h2 id="过渡"><a href="#过渡" class="headerlink" title="过渡"></a>过渡</h2><table><thead><tr><th>用法</th><th>讲解</th></tr></thead><tbody><tr><td>transform [属性] [时间]</td><td>定义元素的变形动画（如宽度、高度等），并指定动画持续时间</td></tr><tr><td>transition [属性] [时间] [过渡效果]</td><td>定义元素的过渡效果，包括过渡的属性、持续时间和缓动函数</td></tr><tr><td>transform-origin [位置]</td><td>设置元素变形的基点位置</td></tr><tr><td>transform translate([大小], [大小])</td><td>移动元素在水平和垂直方向上的位置</td></tr><tr><td>transition [属性] [时间]</td><td>定义元素的过渡效果（通常是针对变形动画）</td></tr><tr><td>transform rotate([角度])</td><td>旋转元素指定的角度</td></tr><tr><td>transform rotate3d([x轴], [y轴], [z轴], [角度])</td><td>沿指定的3D轴旋转元素</td></tr><tr><td>transform scale([缩放比例], [缩放比例])</td><td>缩放元素在水平和垂直方向上的尺寸</td></tr><tr><td>transform skew([水平倾斜角度], [垂直倾斜角度])</td><td>倾斜元素在水平和垂直方向上的角度</td></tr><tr><td>transform translate3d([x轴], [y轴], [z轴])</td><td>移动元素在3D空间中的位置</td></tr><tr><td>transform-style preserve-3d</td><td>使元素保持3D空间中的层叠效果</td></tr><tr><td>perspective [距离]</td><td>定义3D空间中的透视效果距离</td></tr></tbody></table><p>演示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box4&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>123456789<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box5&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box6&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>123456789<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box7&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;a&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;b&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;c&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box1</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span><br><span class="line">    <span class="attribute">background-color</span>: green;</span><br><span class="line">    <span class="attribute">transition</span>: all <span class="number">1s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box1</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: yellowgreen;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box2</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span><br><span class="line">    <span class="attribute">background-color</span>: blue;</span><br><span class="line">    <span class="attribute">transition</span>: all <span class="number">1s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box2</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">100px</span>, <span class="number">20px</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box3</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span><br><span class="line">    <span class="attribute">background-color</span>: black;</span><br><span class="line">    <span class="attribute">transition</span>: all <span class="number">1s</span>;</span><br><span class="line">    <span class="attribute">transform-origin</span>: right bottom;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box3</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">60deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box4</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span><br><span class="line">    <span class="attribute">background-color</span>: yellow;</span><br><span class="line">    <span class="attribute">transition</span>: all <span class="number">1s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box4</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate3d</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">120deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box5</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span><br><span class="line">    <span class="attribute">background-color</span>: blueviolet;</span><br><span class="line">    <span class="attribute">transition</span>: all <span class="number">1s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box5</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">2</span>, .<span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box6</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">    <span class="attribute">transition</span>: all <span class="number">1s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box6</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">skew</span>(<span class="number">120deg</span>, <span class="number">45deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box7</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span><br><span class="line">    <span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</span><br><span class="line">    <span class="attribute">perspective</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">transition</span>: all <span class="number">1s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box7</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate3d</span>(<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">180deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.a</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: yellowgreen;</span><br><span class="line">    <span class="attribute">transition</span>: all <span class="number">1s</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.b</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: blue;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateZ</span>(-<span class="number">100px</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box8</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span><br><span class="line">    <span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</span><br><span class="line">    <span class="attribute">perspective</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">transition</span>: all <span class="number">1s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.c</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: tomato;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span><br><span class="line">    <span class="attribute">transition</span>: all <span class="number">1s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.c</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate3d</span>(<span class="number">0px</span>, -<span class="number">100px</span>, <span class="number">200px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><h3 id="创建动画"><a href="#创建动画" class="headerlink" title="创建动画"></a>创建动画</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> [名称] &#123;</span><br><span class="line">    <span class="selector-attr">[from|0%]</span> &#123;</span><br><span class="line">    <span class="selector-attr">[CSS 样式]</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-attr">[n%]</span> &#123;</span><br><span class="line">    <span class="selector-attr">[CSS 样式]</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-attr">[to|100%]</span> &#123;</span><br><span class="line">    <span class="selector-attr">[CSS 样式]</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="执行动画"><a href="#执行动画" class="headerlink" title="执行动画"></a>执行动画</h3><table><thead><tr><th>用法</th><th>讲解</th></tr></thead><tbody><tr><td>animation [名称] [持续时间] [速率] [延时时间] [循环次数] [播放方向]</td><td>设置元素的动画</td></tr></tbody></table><table><thead><tr><th align="center">速率</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>ease</code></td><td align="center">逐渐变慢（默认）</td></tr><tr><td align="center"><code>linear</code></td><td align="center">匀速</td></tr><tr><td align="center"><code>ease-in</code></td><td align="center">加速</td></tr><tr><td align="center"><code>ease-out</code></td><td align="center">减速</td></tr><tr><td align="center"><code>ease-in-out</code></td><td align="center">先加速后减速</td></tr></tbody></table><table><thead><tr><th align="center">播放方向</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>normal</code></td><td align="center">向前播放（默认）</td></tr><tr><td align="center"><code>alternate</code></td><td align="center">在第偶数次向前播放，第奇数次向反方向播放</td></tr></tbody></table><p>演示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box9&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box9</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span><br><span class="line">    <span class="attribute">transition</span>: all <span class="number">1s</span>;</span><br><span class="line">    <span class="attribute">animation</span>: changeColor <span class="number">3s</span> linear infinite;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> changeColor &#123;</span><br><span class="line">    <span class="number">0%</span> &#123;</span><br><span class="line">        <span class="attribute">background-color</span>: tomato;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">50%</span> &#123;</span><br><span class="line">        <span class="attribute">background-color</span>: yellow;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">100%</span> &#123;</span><br><span class="line">        <span class="attribute">background-color</span>: tomato;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><video src="../images/笔记图片/02%20CSS-10.mp4"></video></p><h2 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h2><h3 id="创建浮动"><a href="#创建浮动" class="headerlink" title="创建浮动"></a>创建浮动</h3><table><thead><tr><th>用法</th><th>讲解</th></tr></thead><tbody><tr><td>float [left|right]</td><td>设置元素的浮动</td></tr></tbody></table><p>演示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box1</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box2</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/../images/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/02%20CSS-11.jpg"></p><h3 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h3><ol><li><strong>父元素设置高度</strong></li></ol><blockquote><p>如果父元素高度塌陷，可以给父元素设置高度，撑开元素本身大小</p></blockquote><p>演示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">350px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fff176</span>;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/../images/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/02%20CSS-12.jpg"></p><ol start="2"><li><strong>overflow 清除浮动</strong></li></ol><blockquote><p>如果有父级塌陷，并且同级元素也收到了影响，可以使用<code>overflow</code>清除浮动</p><p>父级标签的样式里面加: <code>overflow: hidden; clear: both;</code></p><p>这种情况下，父布局不能设置高度</p></blockquote><p>演示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;nav&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">350px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fff176</span>;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.nav</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/../images/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/02%20CSS-13.jpg"></p><ol start="3"><li><strong>伪对象方式</strong></li></ol><blockquote><p>如果有父级塌陷，并且同级元素也收到了影响，还可以使用伪对象方式处理</p><p>父标签添加伪类<code>after</code>，设置空的内容，并且使用<code>clear:both;</code></p><p>这种情况下，父布局不能设置高度</p></blockquote><p>演示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;nav&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">350px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fff176</span>;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.nav</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/../images/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/02%20CSS-14.jpg"></p><h1 id="字体图标"><a href="#字体图标" class="headerlink" title="字体图标"></a>字体图标</h1><p><img src="/../images/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/02%20CSS-15.jpg"></p><p>常用字体图标库：<a href="https://iconfont.cn/">阿里字体图标库</a></p><p><strong>使用</strong></p><ol><li>注册账号并登录</li><li>选取图标或搜索图标</li><li>添加购物车</li><li>下载代码</li><li>选择<code>font-class</code>引用</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;iconfont icon-add-circle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;./css/iconfont<span class="selector-class">.css</span>&quot;&gt;</span><br><span class="line"><span class="selector-class">.iconfont</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">35px</span>;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="媒体查询"><a href="#媒体查询" class="headerlink" title="媒体查询"></a>媒体查询</h1><p>能使页面在不同在终端设备下达到不同的效果</p><p>会根据设备的大小自动识别加载不同的样式</p><h2 id="设置-meta-标签"><a href="#设置-meta-标签" class="headerlink" title="设置 meta 标签"></a>设置 meta 标签</h2><p>使用设备的宽度作为视图宽度并禁止初始的缩放</p><p>在<code>&lt;head&gt;</code>标签里加入这个<code>meta</code>标签</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name=&quot;viewport&quot; <span class="attribute">content</span>=&quot;<span class="attribute">width</span>=device-<span class="attribute">width</span>, initial-<span class="attribute">scale</span>=<span class="number">1</span>,maximum-<span class="attribute">scale</span>=<span class="number">1</span>, user-scalable=no&quot;&gt;</span><br></pre></td></tr></table></figure><p><strong>参数解释</strong></p><ol><li><code>width = device-width</code>：宽度等于当前设备的宽度</li><li><code>initial-scale</code>：初始的缩放比例（默认设置为 1.0）</li><li><code>maximum-scale</code>：允许用户缩放到的最大比例（默认设置为 1.0）</li><li><code>user-scalable</code>：用户是否可以手动缩放（默认设置为 no）</li></ol><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">768px</span>) &#123;</span><br><span class="line"><span class="comment">/* 设备小于 768px 加载样式 */</span></span><br><span class="line">    <span class="selector-tag">body</span> &#123;</span><br><span class="line">        <span class="attribute">background-color</span>: red;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">992px</span>) <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">768px</span>) &#123;</span><br><span class="line">     <span class="comment">/* 设备小于 768px 但小于 992px 加载样式  */</span></span><br><span class="line">     <span class="selector-tag">body</span> &#123;</span><br><span class="line">     <span class="attribute">background-color</span>: pink;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">992px</span>) &#123;</span><br><span class="line"><span class="comment">/* 设备大于 992px 加载样式 */</span></span><br><span class="line">    <span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: green;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="雪碧图"><a href="#雪碧图" class="headerlink" title="雪碧图"></a>雪碧图</h1><p><img src="/../images/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/02%20CSS-16.jpg"></p><p>是一种网页图片应用处理方式</p><p>它允许你将一个页面涉及到的所有零星图片都包含到一张大图中去</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><ol><li>通过<code>background-image</code>引入背景图片</li><li>通过<code>background-position</code>把背景图片移动到自己需要的位置</li></ol><h2 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;icon1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;icon2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.icon1</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">1.png</span>);</span><br><span class="line">    <span class="attribute">background-position</span>: -<span class="number">20px</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">45px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">70px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.icon2</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">1.png</span>);</span><br><span class="line">    <span class="attribute">background-position</span>: -<span class="number">93px</span> -<span class="number">84px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">45px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">70px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> 语法 </tag>
            
            <tag> CSS </tag>
            
            <tag> 选择器 </tag>
            
            <tag> 属性 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 数据库</title>
      <link href="/2023/09/10/01%20MySQL%20%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2023/09/10/01%20MySQL%20%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><table><thead><tr><th align="center">数据类型</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">char(长度)</td><td align="center">长度固定为设定值。如果插入的长度小于设定长度时，则用空格填充</td></tr><tr><td align="center">varchar(长度)</td><td align="center">长度不固定，但不能超过设定值。不会用空格填充</td></tr><tr><td align="center">tinytext</td><td align="center">极短文本字符串</td></tr><tr><td align="center">text</td><td align="center">短文本字符串</td></tr><tr><td align="center">mediumtext</td><td align="center">中等文本字符串</td></tr><tr><td align="center">longtext</td><td align="center">长文本字符串</td></tr><tr><td align="center">tinyblob</td><td align="center">极短二进制字符串</td></tr><tr><td align="center">blob</td><td align="center">短二进制字符串</td></tr><tr><td align="center">mediumblob</td><td align="center">中等二进制字符串</td></tr><tr><td align="center">longblob</td><td align="center">长二进制字符串</td></tr></tbody></table><h2 id="整数"><a href="#整数" class="headerlink" title="整数"></a>整数</h2><table><thead><tr><th align="center">数据类型</th><th align="center">说明</th><th align="center">占字节数</th></tr></thead><tbody><tr><td align="center">signed</td><td align="center">有符号整数，默认</td><td align="center"></td></tr><tr><td align="center">unsigned</td><td align="center">无符号整数</td><td align="center"></td></tr><tr><td align="center">tinyint</td><td align="center">极小范围整数</td><td align="center">1</td></tr><tr><td align="center">smallint</td><td align="center">小范围整数</td><td align="center">2</td></tr><tr><td align="center">int</td><td align="center">一般范围整数</td><td align="center">4</td></tr><tr><td align="center">bigint</td><td align="center">大范围整数</td><td align="center">8</td></tr></tbody></table><h2 id="小数"><a href="#小数" class="headerlink" title="小数"></a>小数</h2><table><thead><tr><th align="center">数据类型</th><th align="center">说明</th><th align="center">占字节数</th></tr></thead><tbody><tr><td align="center">float</td><td align="center">单精度小数</td><td align="center">4</td></tr><tr><td align="center">double</td><td align="center">双精度小数</td><td align="center">8</td></tr></tbody></table><h2 id="时间"><a href="#时间" class="headerlink" title="时间"></a>时间</h2><table><thead><tr><th align="center">数据类型</th><th align="center">说明</th><th align="center">占字节数</th></tr></thead><tbody><tr><td align="center">date</td><td align="center">日期</td><td align="center">3</td></tr><tr><td align="center">time</td><td align="center">时间</td><td align="center">3</td></tr><tr><td align="center">year</td><td align="center">年份</td><td align="center">1</td></tr><tr><td align="center">datetime</td><td align="center">日期 + 时间</td><td align="center">8</td></tr></tbody></table><h1 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h1><h2 id="查询条件"><a href="#查询条件" class="headerlink" title="查询条件"></a>查询条件</h2><ul><li><strong>一般的比较运算符：</strong><code>=</code> <code>&gt;</code> <code>&lt;</code> <code>&gt;=</code> <code>&lt;=</code> <code>!=</code> </li><li><strong>是否在集合中：</strong><code>in</code> <code>not in</code></li><li><strong>字符模糊匹配：</strong><code>like</code> <code>not like</code></li><li><strong>多重条件连接查询：</strong><code>and </code> <code>or</code> <code>not</code></li></ul><h2 id="约束条件"><a href="#约束条件" class="headerlink" title="约束条件"></a>约束条件</h2><h3 id="列级约束条件"><a href="#列级约束条件" class="headerlink" title="列级约束条件"></a>列级约束条件</h3><table><thead><tr><th align="center">约束条件</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">primary key</td><td align="center">主键</td></tr><tr><td align="center">foreign key</td><td align="center">外键</td></tr><tr><td align="center">unique</td><td align="center">唯一</td></tr><tr><td align="center">check</td><td align="center">检查</td></tr><tr><td align="center">default</td><td align="center">默认</td></tr><tr><td align="center">null</td><td align="center">空值</td></tr><tr><td align="center">not null</td><td align="center">非空</td></tr></tbody></table><h3 id="表级约束条件"><a href="#表级约束条件" class="headerlink" title="表级约束条件"></a>表级约束条件</h3><table><thead><tr><th align="center">约束条件</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">primary key</td><td align="center">主键</td></tr><tr><td align="center">foreign key</td><td align="center">外键</td></tr><tr><td align="center">unique</td><td align="center">唯一</td></tr><tr><td align="center">check</td><td align="center">检查</td></tr></tbody></table><h1 id="数据库语言"><a href="#数据库语言" class="headerlink" title="数据库语言"></a>数据库语言</h1><h2 id="数据库定义语言"><a href="#数据库定义语言" class="headerlink" title="数据库定义语言"></a>数据库定义语言</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">创建数据库：create database 数据库名</span><br><span class="line">删除数据库：drop database 数据库名</span><br><span class="line"></span><br><span class="line">创建表：create table 表名(列名 数据类型 列级约束条件,</span><br><span class="line">                        列名 数据类型 列级约束条件,</span><br><span class="line">                        ...</span><br><span class="line">                        列名 数据类型 列级约束条件)</span><br><span class="line">删除表：drop table 表名 [restrict|cascade]</span><br><span class="line">增加列：alter table 表名 add 新列名 数据类型 列级约束条件</span><br><span class="line">删除列：alter table 表名 drop column 列名 [restrict|cascade]</span><br><span class="line">修改列的数据类型：alter table 表名 alter column 列名 新数据类型</span><br></pre></td></tr></table></figure><ul><li><code>restrict</code>：如果该元素被其他表的约束或视图引用时，将无法删除。默认选项</li><li><code>cascade</code>：强制连带引用该元素的约束、视图一起删除</li></ul><h2 id="数据库操纵语言"><a href="#数据库操纵语言" class="headerlink" title="数据库操纵语言"></a>数据库操纵语言</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">插入数据：insert into 表名 values(值1, 值2, 值3)</span><br><span class="line">         insert into 表名(列名1, 列名2) values(值1, 值2)</span><br><span class="line">         insert into 表名(列名1, 列名2) values(值1, 值2), (值1, 值2), (值1, 值2)</span><br><span class="line">修改数据：update 表名 set 列名1=值1, 列名2=值2, ... where 条件</span><br><span class="line">删除数据：delete from 表名 where 条件</span><br></pre></td></tr></table></figure><h2 id="数据库查询语言"><a href="#数据库查询语言" class="headerlink" title="数据库查询语言"></a>数据库查询语言</h2><h3 id="单表查询"><a href="#单表查询" class="headerlink" title="单表查询"></a>单表查询</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">查询所有列的数据：select * from 表名 where 条件</span><br><span class="line">查询某些列的数据：select 列名1, 列名2 from 表名 where 条件</span><br><span class="line">对某列的值进行去重：select 列名1 distinct 列名2 from 表名 where 条件</span><br><span class="line">以别名显示列的数据：select 列名1 别名1, 列名2 别名2 from 表名 where 条件</span><br><span class="line">对查询结果进行排序：select 列名1, 列名2 from 表名 where 条件 order by 列名1 [asc|desc], 列名2 [asc|desc]</span><br><span class="line">模糊查询：select * from 表名 where 列名 like 匹配字符串</span><br><span class="line">使用全文索引进行模糊查询：select * from 表名 where match (列名) against (匹配字符串)</span><br><span class="line">分组查询：select 聚集函数 from 表名 where 条件 group by 列名 having 约束条件</span><br><span class="line">分页查询：select * from 表名 limit 数量</span><br><span class="line">         select * from 表名 limit 起始位置, 数量</span><br></pre></td></tr></table></figure><ul><li><code>asc</code>：升序排序，默认选项</li><li><code>desc</code>：逆序排序</li></ul><h3 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">多表查询：select * from 表名1, 表名2 where 条件</span><br><span class="line">自连接查询：select * from 表名 别名1, 表名 别名2 where 条件</span><br><span class="line">外连接查询：select * from 表名1 [inner|left|right] join 表名2 on 约束条件</span><br><span class="line">嵌套查询：select * from 表名 where 列名 = (select 列名 from 表名 where 条件)</span><br></pre></td></tr></table></figure><h2 id="数据库控制语言"><a href="#数据库控制语言" class="headerlink" title="数据库控制语言"></a>数据库控制语言</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">创建用户：create user 用户名 identified by 密码</span><br><span class="line">查看当前用户能访问的数据库：show databases</span><br><span class="line">给予用户权限：grant all 权限1, 权限2, 权限3 on 数据库.表 to 用户 [with grant option]</span><br><span class="line">回收用户权限：revoke all 权限1, 权限2, 权限3 on 数据库.表 from 用户</span><br></pre></td></tr></table></figure><p><code>with grant option</code>：使被授权的用户还能将已获得的权限继续授权给其他用户</p><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="聚集函数"><a href="#聚集函数" class="headerlink" title="聚集函数"></a>聚集函数</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">求一列的行数：select count(列名) from 表名 where 条件</span><br><span class="line">求一列的和：select sum(列名) from 表名 where 条件</span><br><span class="line">求一列的平均值：select avg(列名) from 表名 where 条件</span><br><span class="line">求一列的最小值：select min(列名) from 表名 where 条件</span><br><span class="line">求一列的最大值：select max(列名) from 表名 where 条件</span><br></pre></td></tr></table></figure><h2 id="类型转换函数"><a href="#类型转换函数" class="headerlink" title="类型转换函数"></a>类型转换函数</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">显示类型转换：cast(数据 as 数据类型)</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">数据类型</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">char [(n)]</td><td align="center">字符串，转换后长度小于 n 个字符</td></tr><tr><td align="center">binary [(n)]</td><td align="center">二进制字符串，转换后长度小于 n 个字节</td></tr><tr><td align="center">signed</td><td align="center">有符号整数</td></tr><tr><td align="center">unsigned</td><td align="center">无符号整数</td></tr><tr><td align="center">decimal [(m [, n])]</td><td align="center">浮点数，m 为数字的总位数，n 为小数点后的位数</td></tr><tr><td align="center">date</td><td align="center">日期</td></tr><tr><td align="center">time</td><td align="center">时间</td></tr><tr><td align="center">datetime</td><td align="center">日期时间</td></tr></tbody></table><h2 id="流程控制函数"><a href="#流程控制函数" class="headerlink" title="流程控制函数"></a>流程控制函数</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if(条件表达式，值1，值2)：三目运算符</span><br><span class="line">isnull(值)：判断值是否为空</span><br><span class="line">ifnull(值1，值2)：值1为空时返回值2，否则返回值1</span><br><span class="line">nullif(值1，值2)：两值相等时返回null，否则返回值1</span><br><span class="line"></span><br><span class="line">sleep(秒)：程序睡眠</span><br></pre></td></tr></table></figure><h2 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">截取字符串：substring(字符串，起始位置，结束位置)</span><br><span class="line">从最左边向右截取字符串：left(字符串，长度)</span><br><span class="line">从最右边向左截取字符串：right(字符串，长度)</span><br><span class="line"></span><br><span class="line">转换为大写字母：upper(字符串)</span><br><span class="line">转换为小写字母：lower(字符串)</span><br><span class="line"></span><br><span class="line">替换字符串：replace(字符串，原文，替换文)</span><br><span class="line">字符串拼接：concat(字符串1，字符串2)</span><br><span class="line">分组字符串拼接：group_concat(字段1, 字段2 ... separator 分隔符)</span><br><span class="line">获取字符串长度：char_length(字符串)</span><br></pre></td></tr></table></figure><h2 id="数学函数"><a href="#数学函数" class="headerlink" title="数学函数"></a>数学函数</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">绝对值：abs(值)</span><br><span class="line">向上取整：ceiling(值)</span><br><span class="line">向下取整：floor(值)</span><br><span class="line">四舍五入：round(值)</span><br><span class="line">自然对数：log(值)</span><br><span class="line">平方根：sqrt(值)</span><br><span class="line"></span><br><span class="line">正弦函数：sin(值)</span><br><span class="line">余弦函数：cos(值)</span><br><span class="line">正切函数：tan(值)</span><br><span class="line"></span><br><span class="line">x 的 n 次方：power(x，n)</span><br><span class="line">[0, 1)之间的随机数：rand()</span><br><span class="line">π：pi()</span><br></pre></td></tr></table></figure><h2 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">获取当前的日期：curdate()</span><br><span class="line">获取当前的时间：curtime()</span><br><span class="line">获取当前的日期 + 时间：now()</span><br><span class="line"></span><br><span class="line">获取日期是几号：day(日期)</span><br><span class="line">获取日期是几月：month(日期)</span><br><span class="line">获取日期是哪年：year(日期)</span><br><span class="line"></span><br><span class="line">将日期增加 x 单位：date_add(日期，interval 增量 [year|month|day|hour|minute|second])</span><br><span class="line">计算日期之间的的间隔天数：datediff(日期1，日期2)</span><br></pre></td></tr></table></figure><h2 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create function 函数名([参数列表]) return 返回值类型</span><br><span class="line">       begin</span><br><span class="line">       (函数主体)</span><br><span class="line">             return 返回值</span><br><span class="line">       end</span><br></pre></td></tr></table></figure><h1 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h1><h2 id="存储过程-1"><a href="#存储过程-1" class="headerlink" title="存储过程"></a>存储过程</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">create procedure 存储过程名([参数列表])</span><br><span class="line">       begin</span><br><span class="line">       (语句集合)</span><br><span class="line">       end</span><br></pre></td></tr></table></figure><p><strong>调用格式：</strong><code>call 过程名([参数列表])</code></p><h2 id="存储过程中的参数传递"><a href="#存储过程中的参数传递" class="headerlink" title="存储过程中的参数传递"></a>存储过程中的参数传递</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">create procedure 存储过程名(in 参数名 数据类型)：只传入数据，无法为其赋值。默认方式</span><br><span class="line">create procedure 存储过程名(out 参数名 数据类型)：只传出数据，无法访问其值</span><br><span class="line">create procedure 存储过程名(inout 参数名 数据类型)：双向</span><br></pre></td></tr></table></figure><h1 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h1><h2 id="变量定义赋值语句"><a href="#变量定义赋值语句" class="headerlink" title="变量定义赋值语句"></a>变量定义赋值语句</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">局部变量定义：declare 变量名 数据类型 [default 默认值]</span><br><span class="line">全局变量定义：set @全局变量名 = 值</span><br><span class="line">变量赋值：set 变量名 = 值</span><br><span class="line">将数据赋值给变量：select 函数() into 变量名 from 表名</span><br></pre></td></tr></table></figure><h2 id="流程控制语句"><a href="#流程控制语句" class="headerlink" title="流程控制语句"></a>流程控制语句</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if 条件表达式 then 语句1</span><br><span class="line">else if 条件表达式 then 语句2</span><br><span class="line">else 语句3</span><br><span class="line">end if</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">case 变量名</span><br><span class="line">    when 条件表达式 then 语句1</span><br><span class="line">    when 条件表达式 then 语句2</span><br><span class="line">    else 语句3</span><br><span class="line">end case</span><br></pre></td></tr></table></figure><h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">while 循环条件 do</span><br><span class="line">    语句</span><br><span class="line">end while</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">标签名: loop</span><br><span class="line">    语句</span><br><span class="line">    if 条件表达式 then</span><br><span class="line">        leave 标签名</span><br><span class="line">    end if</span><br><span class="line">end loop 标签名</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">repeat</span><br><span class="line">    语句</span><br><span class="line">until 循环条件</span><br><span class="line">end repeat</span><br></pre></td></tr></table></figure><h2 id="explain-语句"><a href="#explain-语句" class="headerlink" title="explain 语句"></a>explain 语句</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">分析 select 语句的执行计划：explain select语句</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">返回的结果</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">select_type</td><td align="center">查询的类型</td></tr><tr><td align="center">table</td><td align="center">查询的表</td></tr><tr><td align="center">type</td><td align="center">MySQL决定如何查找对应的记录，效率从高到低：system &gt; const &gt; eq_ref &gt; ref &gt; range &gt; index &gt; all</td></tr><tr><td align="center">possible_keys</td><td align="center">执行查询时可能会用到的索引</td></tr><tr><td align="center">key</td><td align="center">实际使用的索引</td></tr><tr><td align="center">key_len</td><td align="center">MySQL在索引里使用的字节数，字段的最大可能长度</td></tr><tr><td align="center">rows</td><td align="center">扫描的行数</td></tr><tr><td align="center">extra</td><td align="center">附加说明</td></tr></tbody></table><h1 id="异常处理器"><a href="#异常处理器" class="headerlink" title="异常处理器"></a>异常处理器</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">declear [continue|exit] handler for 异常ID 语句</span><br></pre></td></tr></table></figure><ul><li><code>continue</code>：异常被捕获后，程序将继续执行下一个语句，而不会跳出当前的代码块</li><li><code>exit</code>：异常被捕获后，程序将跳出当前代码块，继续执行后续的代码</li></ul><h1 id="游标"><a href="#游标" class="headerlink" title="游标"></a>游标</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">定义游标：declare 游标名 cursor for 表名</span><br><span class="line">开启游标：open 游标名</span><br><span class="line">获取游标信息：fetch 游标名 into 变量1，变量2，...</span><br><span class="line">关闭游标：close 游标名</span><br></pre></td></tr></table></figure><h1 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">创建视图：cerate view 视图名(列名) as 子查询语句 [with check option]</span><br><span class="line">删除视图：drop view 视图名</span><br></pre></td></tr></table></figure><p><code>with check option</code>：是指当视图创建后，如果更新视图中的数据，是否要满足子查询中的条件表达式</p><h1 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">创建触发器：cerate trigger 触发器名 [before|after] [insert|update|delete] on 表名/视图名 for each row 子语句</span><br><span class="line">查看触发器：show triggers</span><br><span class="line">删除触发器：drop trigger 触发器名</span><br></pre></td></tr></table></figure><h1 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">创建索引：cerate 索引类型 index 索引名 on 表名(列名)</span><br><span class="line">删除索引：drop index 索引名 on 表名(列名)</span><br><span class="line">查看表中的索引：show index from 表名</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">索引类型</th><th align="center">索引类型</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">normal</td><td align="center">普通索引</td><td align="center">完完全全相当于一本书的目录</td></tr><tr><td align="center">unique</td><td align="center">唯一索引</td><td align="center">一旦建立，那么整列中将不允许出现重复数据</td></tr><tr><td align="center">spatial</td><td align="center">空间索引</td><td align="center">是对空间数据类型的字段建立的索引</td></tr><tr><td align="center">fulltext</td><td align="center">全文索引</td><td align="center">是模糊匹配的一种更好的解决方案，它的效率要比使用 like % 更高，并且它还支持多种匹配方式</td></tr></tbody></table><ul><li><strong>空间数据类型：</strong><code>GEOMETRY</code> <code>POINT</code> <code>LINESTRING</code> <code>POLYGON</code></li><li><strong>只有字段的数据类型为</strong><code>char</code> <code>varchar</code> <code>text</code><strong>及其系列才可以建全文索引</strong></li></ul><h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">开始事务：begin</span><br><span class="line">提交事务：commit</span><br><span class="line">回滚事务：rollback</span><br><span class="line">创建回滚点：savepoint 回滚点</span><br><span class="line">回滚到指定回滚点：rollback to 回滚点</span><br></pre></td></tr></table></figure><p><strong>设置当前会话的事务隔离级别：</strong><code>set session transaction isolation level 隔离级别</code></p><table><thead><tr><th align="center">事务隔离级别</th><th align="center">含义</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">Read Uncommitted</td><td align="center">读未提交</td><td align="center">能够读取到其他事务中未提交的内容，存在脏读问题</td></tr><tr><td align="center">Read Committed</td><td align="center">读已提交</td><td align="center">只能读取其他事务已经提交的内容，存在不可重复读问题</td></tr><tr><td align="center">Repeated Read</td><td align="center">可重复读（默认选项）</td><td align="center">在读取某行后不允许其他事务操作此行，直到事务结束</td></tr><tr><td align="center">Serializable</td><td align="center">串行读</td><td align="center">一个事务的开始必须等待另一个事务的完成</td></tr></tbody></table><h1 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h1><h2 id="锁的类型"><a href="#锁的类型" class="headerlink" title="锁的类型"></a>锁的类型</h2><ul><li><strong>从对数据的操作类型上来划分</strong><ul><li><strong>读锁（read lock，共享锁）：</strong>当一个事务添加了读锁后，其他的事务也可以添加读锁或是读取数据，但是不能进行写操作，只能等到所有的读锁全部释放</li><li><strong>写锁（write lock，排它锁）：</strong>当一个事务添加了写锁后，其他事务不能读不能写也不能添加任何锁，只能等待当前事务释放锁</li></ul></li><li><strong>从锁的作用范围上来划分</strong><ul><li><strong>全局锁：</strong>作用于整个数据库</li><li><strong>表锁：</strong>作用于整个表</li><li><strong>行锁：</strong>作用于某些行，又可以细分为以下几种：<ul><li><strong>记录锁 Record Locks</strong><br>                            仅仅锁住索引记录的一行，在单条索引记录上加锁</li><li><strong>间隙锁 Gap Locks</strong><br>                            仅仅锁住一个索引区间（开区间，不包括双端端点）</li><li><strong>临键锁 Next-Key Locks</strong><br>                            仅仅锁住一个索引区间（左开右闭区间），默认选项</li></ul></li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">上全局锁：flush tables with 锁的类型</span><br><span class="line">上表锁：lock table 表名 锁的类型</span><br><span class="line">上行的读锁：select * from 表名 where 条件 lock in share mode</span><br><span class="line">上行的写锁：select * from 表名 where 条件 for update</span><br><span class="line"></span><br><span class="line">释放当前会话的全部锁：unlock tables</span><br></pre></td></tr></table></figure><p>除了手动释放锁之外，当我们的会话结束后，锁也会被自动释放</p>]]></content>
      
      
      <categories>
          
          <category> 中间件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 锁 </tag>
            
            <tag> 语法 </tag>
            
            <tag> MySQL </tag>
            
            <tag> 数据库 </tag>
            
            <tag> 存储过程 </tag>
            
            <tag> 事务 </tag>
            
            <tag> 游标 </tag>
            
            <tag> 视图 </tag>
            
            <tag> 异常处理器 </tag>
            
            <tag> 索引 </tag>
            
            <tag> 触发器 </tag>
            
            <tag> 函数 </tag>
            
            <tag> 数据类型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown 语法</title>
      <link href="/2023/08/05/01%20Markdown%20%E8%AF%AD%E6%B3%95/"/>
      <url>/2023/08/05/01%20Markdown%20%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="Markdown-基础语法"><a href="#Markdown-基础语法" class="headerlink" title="Markdown 基础语法"></a>Markdown 基础语法</h1><p>普通文本</p><p>换行<br>换行</p><p>分段</p><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><p><strong>加粗</strong><br><strong>加粗</strong><br><em>斜体</em><br><em>斜体</em><br><em><strong>加粗斜体</strong></em><br><em><strong>加粗斜体</strong></em></p><p><em><em>转义符号{</em>}</em>*</p><p><del>删除线</del><br><u>下划线</u><br>分割线</p><hr><hr><hr><hr><hr><ul><li>无序列表</li><li>无序列表</li></ul><ul><li>无序列表</li><li>无序列表</li></ul><ul><li>无序列表</li><li>无序列表</li></ul><ol><li>有序列表</li><li>有序列表</li><li>有序列表</li></ol><ul><li>一级列表<ul><li>二级列表<ul><li>三级列表</li></ul></li></ul></li></ul><table><thead><tr><th align="left">左对齐</th><th align="center">居中对齐</th><th align="right">右对齐</th></tr></thead><tbody><tr><td align="left">左对齐</td><td align="center">居中对齐</td><td align="right">右对齐</td></tr></tbody></table><ul><li><input disabled="" type="checkbox"> 未完成的项目</li><li><input checked="" disabled="" type="checkbox"> 已完成的项目</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123; <span class="comment">// 代码块</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello world!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>行内代码<code>println()</code></p><blockquote><p>引用</p></blockquote><p><a href="https://www.itbaima.cn/">IT柏码</a>，<a href="https://leetcode.cn/problemset/">力扣</a>，<a href="https://ai.minihuo.com/">GPT</a>，<a href="https://mikanime.tv/">蜜柑计划</a></p><p>图片插入：</p><p>![](..&#x2F;images&#x2F;笔记图片&#x2F;01 Markdown 语法-1.jpg)</p><h1 id="Markdown-拓展语法"><a href="#Markdown-拓展语法" class="headerlink" title="Markdown 拓展语法"></a>Markdown 拓展语法</h1><p>&#x3D;&#x3D;文本高亮&#x3D;&#x3D;<br>文本^文本上标^<br>文本<del>文本下标</del></p><h1 id="数学公式语法"><a href="#数学公式语法" class="headerlink" title="数学公式语法"></a>数学公式语法</h1><p>数学公式行：$y &#x3D; x + 1$</p><p>数学公式块：<br>$$<br>y &#x3D; x + 1<br>$$</p><p>$ \frac{分子}{分母} $</p><p>开根号 $\sqrt{4}$$\sqrt[3]{8}$</p><p>$ x_{下标} $ $ x^{上标} $ $ x^{上标}_{下标} $</p><p>$ x_2 $ $ x^2 $ $ x^2_2 $</p><p>积分 $ \int_1^2xdx $</p><p>极限 $ \lim_{n\rightarrow+\infty}\frac{1}{n + 1} $</p><p>向量 $ \vec{a} $</p><p>居中省略号 $ \cdots $</p><p>靠底部的省略号 $ \ldots $</p><p>点乘 $ \cdot $</p><p>求和 $ \sum_1^n $</p><h2 id="特殊数学符号"><a href="#特殊数学符号" class="headerlink" title="特殊数学符号"></a>特殊数学符号</h2><h3 id="特殊数学符号-1"><a href="#特殊数学符号-1" class="headerlink" title="特殊数学符号"></a>特殊数学符号</h3><table><thead><tr><th align="center">代码</th><th align="center">符号</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">\not&#x3D;</td><td align="center">$\not&#x3D;$</td><td align="center">不等于</td></tr><tr><td align="center">\approx</td><td align="center">$\approx$</td><td align="center">约等于</td></tr><tr><td align="center">\times</td><td align="center">$\times$</td><td align="center">乘号</td></tr><tr><td align="center">\div</td><td align="center">$\div$</td><td align="center">除号</td></tr><tr><td align="center">\leq</td><td align="center">$\leq$</td><td align="center">小于等于</td></tr><tr><td align="center">\geq</td><td align="center">$\geq$</td><td align="center">大于等于</td></tr><tr><td align="center">\pm</td><td align="center">$\pm$</td><td align="center">正负号</td></tr><tr><td align="center">\sum</td><td align="center">$\sum$</td><td align="center">累加</td></tr><tr><td align="center">\prod</td><td align="center">$\prod$</td><td align="center">累乘</td></tr><tr><td align="center">\coprod</td><td align="center">$\coprod$</td><td align="center">累除</td></tr><tr><td align="center">\overline{a + b + c}</td><td align="center">$\overline{a + b + c}$</td><td align="center">平均值</td></tr></tbody></table><h3 id="希腊字母"><a href="#希腊字母" class="headerlink" title="希腊字母"></a>希腊字母</h3><table><thead><tr><th align="center">代码</th><th align="center">符号</th><th align="center">代码</th><th align="center">符号</th></tr></thead><tbody><tr><td align="center">\alpha</td><td align="center">$\alpha$</td><td align="center">\beta</td><td align="center">$\beta$</td></tr><tr><td align="center">\gamma</td><td align="center">$\gamma$</td><td align="center">\delta</td><td align="center">$\delta$</td></tr><tr><td align="center">\epsilon</td><td align="center">$\epsilon$</td><td align="center">\eta</td><td align="center">$\eta$</td></tr><tr><td align="center">\theta</td><td align="center">$\theta$</td><td align="center">\pi</td><td align="center">$\pi$</td></tr><tr><td align="center">\omega</td><td align="center">$\omega$</td><td align="center">\rho</td><td align="center">$\rho$</td></tr><tr><td align="center">\sigma</td><td align="center">$\sigma$</td><td align="center">\mu</td><td align="center">$\mu$</td></tr></tbody></table><h3 id="三角函数"><a href="#三角函数" class="headerlink" title="三角函数"></a>三角函数</h3><table><thead><tr><th align="center">代码</th><th align="center">符号</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">\sin</td><td align="center">$\sin$</td><td align="center">正弦</td></tr><tr><td align="center">\cos</td><td align="center">$\cos$</td><td align="center">余弦</td></tr><tr><td align="center">\tan</td><td align="center">$\tan$</td><td align="center">正切</td></tr><tr><td align="center">\cot</td><td align="center">$\cot$</td><td align="center">余切</td></tr><tr><td align="center">\sec</td><td align="center">$\sec$</td><td align="center">正割</td></tr><tr><td align="center">\csc</td><td align="center">$\csc$</td><td align="center">余割</td></tr><tr><td align="center">\circ</td><td align="center">$\circ$</td><td align="center">度</td></tr></tbody></table><h3 id="积分求导"><a href="#积分求导" class="headerlink" title="积分求导"></a>积分求导</h3><table><thead><tr><th align="center">代码</th><th align="center">符号</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">\infty</td><td align="center">$\infty$</td><td align="center">无穷</td></tr><tr><td align="center">\int</td><td align="center">$\int$</td><td align="center">定积分</td></tr><tr><td align="center">\iint</td><td align="center">$\iint$</td><td align="center">双重积分</td></tr><tr><td align="center">\iiint</td><td align="center">$\iiint$</td><td align="center">三重积分</td></tr><tr><td align="center">\iiiint</td><td align="center">$\iiiint$</td><td align="center">四重积分</td></tr><tr><td align="center">\oint</td><td align="center">$\oint$</td><td align="center">曲线积分</td></tr><tr><td align="center">x\prime</td><td align="center">$x\prime$</td><td align="center">求导</td></tr><tr><td align="center">\lim</td><td align="center">$\lim$</td><td align="center">极限</td></tr></tbody></table><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><table><thead><tr><th align="center">代码</th><th align="center">符号</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">\emptyset</td><td align="center">$\emptyset$</td><td align="center">空集</td></tr><tr><td align="center">\in</td><td align="center">$\in$</td><td align="center">属于</td></tr><tr><td align="center">\notin</td><td align="center">$\notin$</td><td align="center">不属于</td></tr><tr><td align="center">\supset</td><td align="center">$\supset$</td><td align="center">真包含</td></tr><tr><td align="center">\supseteq</td><td align="center">$\supseteq$</td><td align="center">包含</td></tr><tr><td align="center">\bigcap</td><td align="center">$\bigcap$</td><td align="center">交集</td></tr><tr><td align="center">\bigcup</td><td align="center">$\bigcup$</td><td align="center">并集</td></tr></tbody></table><h3 id="对数"><a href="#对数" class="headerlink" title="对数"></a>对数</h3><table><thead><tr><th align="center">代码</th><th align="center">符号</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">\log</td><td align="center">$\log$</td><td align="center">对数函数</td></tr><tr><td align="center">\ln</td><td align="center">$\ln$</td><td align="center">以 e 为底的对数函数</td></tr><tr><td align="center">\lg</td><td align="center">$\lg$</td><td align="center">以 10 为底的对数函数</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 语法 </tag>
            
            <tag> 数学 </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML</title>
      <link href="/2023/07/22/01%20HTML/"/>
      <url>/2023/07/22/01%20HTML/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><blockquote><p>HTML（超文本标记语言）是用于创建网页和 Web 应用程序的标准标记语言，它提供了一种结构化的方式来组织和展示文档内容</p></blockquote><h1 id="HTML-基本骨架"><a href="#HTML-基本骨架" class="headerlink" title="HTML 基本骨架"></a>HTML 基本骨架</h1><h2 id="html-标签"><a href="#html-标签" class="headerlink" title="html 标签"></a>html 标签</h2><blockquote><p>定义 HTML 文档</p></blockquote><p>标签限定了文档的起始点和结束点</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="head-标签"><a href="#head-标签" class="headerlink" title="head 标签"></a>head 标签</h2><blockquote><p>定义文档的头部</p></blockquote><p>文档的头部描述了文档的各种属性和信息，包括文档的标题、在<code>Web</code>中的位置以及和其他文档的关系等</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="title-标签"><a href="#title-标签" class="headerlink" title="title 标签"></a>title 标签</h2><blockquote><p>定义文档的标题</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="meta-标签"><a href="#meta-标签" class="headerlink" title="meta 标签"></a>meta 标签</h2><blockquote><p>定义文档的属性</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="link-标签"><a href="#link-标签" class="headerlink" title="link 标签"></a>link 标签</h2><blockquote><p>引入其他文件</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;icon.png&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">type</span>=<span class="string">&quot;image/x-icon&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="body-标签"><a href="#body-标签" class="headerlink" title="body 标签"></a>body 标签</h2><blockquote><p>定义文档的主体</p></blockquote><p><code>body</code>元素包含文档的所有内容（比如文本、超链接、图像、表格和列表等等。）</p><p>它会直接在页面中显示出来，也就是用户可以直观看到的内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        主体</span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>一级标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>二级标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>三级标题<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>四级标题<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>五级标题<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span>六级标题<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>快捷键</strong></p><p>生成 h1 ~ h6：h$*6</p></blockquote><h1 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h1><table><thead><tr><th align="center">文本标签</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>&lt;span&gt;</code></td><td align="center">没有特定的含义</td></tr><tr><td align="center"><code>&lt;b&gt;</code></td><td align="center">粗体文本</td></tr><tr><td align="center"><code>&lt;i&gt;</code></td><td align="center">斜体字</td></tr><tr><td align="center"><code>&lt;del&gt;</code></td><td align="center">删除字</td></tr><tr><td align="center"><code>&lt;em&gt;</code></td><td align="center">着重文字</td></tr><tr><td align="center"><code>&lt;strong&gt;</code></td><td align="center">加重语气</td></tr></tbody></table><h1 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这是另一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="水平线"><a href="#水平线" class="headerlink" title="水平线"></a>水平线</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hr</span> <span class="attr">color</span>=<span class="string">&quot;&quot;</span> <span class="attr">width</span>=<span class="string">&quot;&quot;</span> <span class="attr">size</span>=<span class="string">&quot;&quot;</span> <span class="attr">align</span>=<span class="string">&quot;[left|right]&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>属性：</strong></p><ul><li><code>color</code>：颜色</li><li><code>width</code>：宽度</li><li><code>size</code>：高度</li><li><code>align</code>：对齐方式（默认居中）</li></ul><h1 id="超文本链接"><a href="#超文本链接" class="headerlink" title="超文本链接"></a>超文本链接</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;url&quot;</span> <span class="attr">download</span>=<span class="string">&quot;&quot;</span>&gt;</span>链接文本<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>属性：</strong></p><ul><li><code>href</code>：链接地址</li><li><code>download</code>：下载文件的命名</li></ul><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">type</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>AAA<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>BBB<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>CCC<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>type 属性：</strong></p><ul><li><code>disc</code>：实心圆（默认选项）</li><li><code>circle</code>：空心圆</li><li><code>square</code>：小方块</li><li><code>none</code>：不显示</li></ul><p>列表是可以进行嵌套的</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>AAA<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>aaa<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>bbb<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>AAA<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>快捷键</strong></p><p>生成 ul + li 的布局：ul&gt;li*n（n 为需要的 li 数量）</p></blockquote><h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span> <span class="attr">type</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>AAA<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>BBB<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>CCC<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>type 属性：</strong></p><ul><li><code>1</code>：表示列表项目用数字标号（1, 2, 3…）</li><li><code>a</code>：表示列表项目用小写字母标号（a, b, c…）</li><li><code>A</code>：表示列表项目用大写字母标号（A, B, C…）</li><li><code>i</code>：表示列表项目用小写罗马数字标号（i, ii, iii…）</li><li><code>I</code>：表示列表项目用大写罗马数字标号（I, II, III…）</li></ul><p>列表是可以进行嵌套的</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>AAA<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>aaa<span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>bbb<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>BBB<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>快捷键</strong></p><p>生成 ol + li 的布局：ol&gt;li*n（n 为需要的 li 数量）</p></blockquote><h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>学号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>年级<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>0001<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>小明<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>2019<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>0002<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>小红<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>女<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>2020<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>表格标签：</strong></p><ul><li>表格：<code>&lt;table&gt;</code></li><li>表首行：<code>&lt;thead&gt;</code></li><li>文本行：<code>&lt;tbody&gt;</code></li><li>行：<code>&lt;tr&gt;</code></li><li>单元格（列）：<code>&lt;td&gt;</code></li></ul><p><strong>表格属性：</strong></p><ol><li><code>border</code>：表格的边框</li><li><code>width</code>：表格的宽度</li><li><code>height</code>：表格的高度</li></ol><blockquote><p><strong>快捷键</strong></p><p>生成表格结构：table&gt;tr*2&gt;td{单元格}</p></blockquote><h2 id="单元格合并"><a href="#单元格合并" class="headerlink" title="单元格合并"></a>单元格合并</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">width</span>=<span class="string">&quot;500px&quot;</span> <span class="attr">height</span>=<span class="string">&quot;200px&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;3&quot;</span>&gt;</span>单元格1 2 3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格4<span class="tag">&lt;/<span class="name">td</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格5<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>单元格6-11<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格7<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;3&quot;</span>&gt;</span>单元格8 13 18<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span> <span class="attr">rowspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>单元格9 10 14 15<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格12<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格16<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格17<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格19<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格20<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>属性：</strong></p><ul><li>水平合并：<code>colspan</code></li><li>垂直合并：<code>rowspan</code></li></ul><h1 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h1><p>表单是由<code>容器</code>和<code>控件</code>组成的，一个表单一般应该包含用户填写信息的输入框，按钮等</p><p>这些输入框，按钮叫做控件，表单就是容器，它能够容纳各种各样的控件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;url&quot;</span> <span class="attr">method</span>=<span class="string">&quot;[get|post]&quot;</span> <span class="attr">name</span>=<span class="string">&quot;myform&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>属性：</strong></p><ul><li><code>action</code>：服务器地址</li><li><code>name</code>：名称</li><li><code>method</code>：数据提交方式</li></ul><h2 id="表单元素"><a href="#表单元素" class="headerlink" title="表单元素"></a>表单元素</h2><h3 id="输入框"><a href="#输入框" class="headerlink" title="输入框"></a>输入框</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;文本输入框&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;数字输入框&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;密码输入框&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">placeholder</span>=<span class="string">&quot;文本框&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;10&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;10&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;按钮&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;按钮&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当用户单击确认按钮时，表单的内容会被传送到另一个文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">name</span>=<span class="string">&quot;input&quot;</span> <span class="attr">action</span>=<span class="string">&quot;url&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="单选框"><a href="#单选框" class="headerlink" title="单选框"></a>单选框</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;role&quot;</span>&gt;</span> AAA</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;role&quot;</span>&gt;</span> BBB</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;role&quot;</span>&gt;</span> CCC</span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="多选框"><a href="#多选框" class="headerlink" title="多选框"></a>多选框</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span> AAA</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span> BBB</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span> CCC</span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="下拉列表"><a href="#下拉列表" class="headerlink" title="下拉列表"></a>下拉列表</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>AAA<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>BBB<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>CCC<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">title</span>=<span class="string">&quot;&quot;</span> <span class="attr">width</span>=<span class="string">&quot;&quot;</span> <span class="attr">height</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>属性：</strong></p><ul><li><code>src</code>：路径</li><li><code>alt</code>：替代文本</li><li><code>width</code>：宽度</li><li><code>height</code>：高度</li><li><code>title</code>：鼠标悬停在图片上的给予提示</li></ul><h2 id="图片路径"><a href="#图片路径" class="headerlink" title="图片路径"></a>图片路径</h2><h3 id="绝对路径"><a href="#绝对路径" class="headerlink" title="绝对路径"></a>绝对路径</h3><blockquote><p>电脑的盘符存储与访问的具体地址</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;E:\imgs\1.jpg&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="相对路径"><a href="#相对路径" class="headerlink" title="相对路径"></a>相对路径</h3><blockquote><p>两者相对关系，两者在同⼀路径下可以直接访问</p></blockquote><ol><li><p>子级关系: <code>/</code></p></li><li><p>父级关系: <code>../</code></p></li><li><p>同级关系: <code>./</code>（可以省略）</p></li></ol><h3 id="网络路径"><a href="#网络路径" class="headerlink" title="网络路径"></a>网络路径</h3><blockquote><p>具体的⽹络地址</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://c-ssl.duitang.com/uploads/blog/202309/10/EWS9NZOETV2Qnjn.jpg&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h1><p>添加视频嵌入代码即可</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;//player.bilibili.com/player.html?aid=590112585&amp;bvid=BV1Fq4y1U7nE&amp;cid=396669837&amp;p=1&quot;</span> <span class="attr">scrolling</span>=<span class="string">&quot;no&quot;</span> <span class="attr">border</span>=<span class="string">&quot;0&quot;</span> <span class="attr">frameborder</span>=<span class="string">&quot;no&quot;</span> <span class="attr">framespacing</span>=<span class="string">&quot;0&quot;</span> <span class="attr">allowfullscreen</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="块级元素与行内元素"><a href="#块级元素与行内元素" class="headerlink" title="块级元素与行内元素"></a>块级元素与行内元素</h1><table><thead><tr><th align="center">块级元素</th><th align="center">行内元素</th></tr></thead><tbody><tr><td align="center">会在页面中独占一行（自上向下垂直排列）</td><td align="center">不会独占页面中的一行，只占自身的大小</td></tr><tr><td align="center">可以设置<code>width</code>，<code>height</code>属性</td><td align="center">设置<code>width</code>，<code>height</code>属性无效</td></tr><tr><td align="center">⼀般块级元素可以包含行内元素和其他块级元素</td><td align="center">⼀般行内元素包含行内元素，但不包含块级元素</td></tr></tbody></table><p>常见块级元素：</p><blockquote><p>div、form、h1 ~ h6、hr、p、table、ul 等</p></blockquote><p>常见行内元素：</p><blockquote><p>a、b、em、i、span、strong 等</p></blockquote><p>行内块级元素（特点：不换行、能够识别宽高）</p><blockquote><p>button、img、input 等 </p></blockquote><h1 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h1><blockquote><p>HTML 中一个非常重要的块级元素，常用于将页面内容分组或包裹起来</p><p>通常用于布局和样式设计，以便于管理网页的结构</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;[CSS 样式]&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="HTML5-新增标签"><a href="#HTML5-新增标签" class="headerlink" title="HTML5 新增标签"></a>HTML5 新增标签</h1><p><strong>HTML5 新增标签：</strong></p><ul><li><p><code>&lt;header&gt;&lt;/header&gt;</code>：头部</p></li><li><p><code>&lt;nav&gt;&lt;/nav&gt;</code>：导航</p></li><li><p><code>&lt;section&gt;&lt;/section&gt;</code>：定义文档中的节，如章节、页眉、页脚</p></li><li><p><code>&lt;aside&gt;&lt;/aside&gt;</code>：侧边栏</p></li><li><p><code>&lt;footer&gt;&lt;/footer&gt;</code>：脚部</p></li><li><p><code>&lt;article&gt;&lt;/article&gt;</code>：代表一个独立的、完整的相关内容块，例如一篇完整的论坛帖子，一篇博客文章，一个用户评论等</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> Web </tag>
            
            <tag> 语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaSE</title>
      <link href="/2023/07/12/01%20JavaSE/"/>
      <url>/2023/07/12/01%20JavaSE/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="API"><a href="#API" class="headerlink" title="API"></a>API</h1><p>记录了我曾经在<code>JavaSE</code>阶段学习过的类和接口，<code>Object</code>不算在其中</p><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><ul><li><p><code>Boolean</code></p></li><li><p><code>Character</code></p></li><li><p><code>String</code></p></li><li><p><code>StringBuilder</code></p></li><li><p><code>StringBuffer</code></p></li><li><p><code>Number</code></p><ul><li><code>Byte</code></li><li><code>Short</code></li><li><code>Integer</code></li><li><code>BigInteger</code></li><li><code>Long</code></li><li><code>Float</code></li><li><code>Double</code></li><li><code>BigDecimal</code></li></ul></li><li><p><code>Math</code></p></li><li><p><code>Arrays</code></p></li><li><p><code>Collections</code></p></li><li><p><code>AbstractCollection</code></p><ul><li><p><code>ArrayDeque</code></p></li><li><p><code>AbstractQueue</code></p><ul><li><code>PriorityQueue</code></li></ul></li><li><p><code>AbstractList</code></p><ul><li><code>ArrayList</code></li><li><code>AbstractSequentialList</code><ul><li><code>LinkedList</code></li></ul></li></ul></li><li><p><code>AbstractSet</code></p><ul><li><code>HashSet</code></li><li><code>TreeSet</code></li></ul></li></ul></li><li><p><code>AbstractMap</code></p><ul><li><code>HashMap</code></li><li><code>TreeMap</code></li></ul></li><li><p><code>File</code></p></li><li><p><code>InputStream</code></p><ul><li><code>FileInputStream</code></li><li><code>ObjectInputStream</code></li><li><code>FilterInputStream</code><ul><li><code>BufferedInputStream</code></li></ul></li></ul></li><li><p><code>OutputStream</code></p><ul><li><code>FileOutputStream</code></li><li><code>ObjectOutputStream</code></li><li><code>FilterOutputStream</code><ul><li><code>BufferedOutputStream</code></li><li><code>PrintStream</code></li></ul></li></ul></li><li><p><code>Scanner</code></p></li><li><p><code>Reader</code></p><ul><li><code>BufferedReader</code></li><li><code>InputStreamReader</code><ul><li><code>FileReader</code></li></ul></li></ul></li><li><p><code>Writer</code></p><ul><li><code>BufferedWriter</code></li><li><code>OutputStreamWriter</code><ul><li><code>FileWriter</code></li></ul></li></ul></li><li><p><code>Throwable</code></p><ul><li><code>Error</code><ul><li><code>IOError</code></li></ul></li><li><code>Exception</code><ul><li><code>IOException</code></li><li><code>RuntimeException</code><ul><li><code>NullPointerException</code></li><li><code>IndexOutOfBoundsException</code></li></ul></li></ul></li></ul></li><li><p><code>Thread</code></p></li><li><p><code>ThreadLocal</code></p></li><li><p><code>Random</code></p></li><li><p><code>Optional</code></p></li><li><p><code>Patter</code></p></li><li><p><code>Matcher</code></p></li><li><p><code>Class</code></p></li></ul><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><ul><li><code>Stream</code></li><li><code>IntStream</code></li><li><code>LongStream</code></li><li><code>DoubleStream</code></li><li><code>Iterable</code></li><li><code>Cloneable</code></li><li><code>Consumer</code></li><li><code>Supplier</code></li><li><code>Function</code></li><li><code>Predicate</code></li></ul><h1 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h1><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in) <span class="comment">// 从控制台获取输入</span></span><br><span class="line"><span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;路径 / 文件对象&quot;</span>)) <span class="comment">// 从文件获取输入</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">scanner.nextLine() <span class="comment">// 读取整行文本（包括空格）</span></span><br><span class="line"></span><br><span class="line">scanner.next() <span class="comment">// 读取下一个单词（以空格为分隔符）</span></span><br><span class="line">scanner.nextInt() <span class="comment">// 读取下一个整数</span></span><br><span class="line">scanner.nextDouble() <span class="comment">// 读取下一个双精度浮点数</span></span><br><span class="line">scanner.nextBoolean() <span class="comment">// 读取下一个布尔值</span></span><br><span class="line"></span><br><span class="line">scanner.hasNext() <span class="comment">// 检查是否还有下一个输入</span></span><br><span class="line">scanner.hasNextInt() <span class="comment">// 检查下一个输入是否为整数</span></span><br><span class="line">scanner.hasNextDouble() <span class="comment">// 检查下一个输入是否为浮点数</span></span><br><span class="line">scanner.hasNextBoolean() <span class="comment">// 检查下一个输入是否为浮点数</span></span><br></pre></td></tr></table></figure><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">PrintStream</span> <span class="variable">ps</span> <span class="operator">=</span> System.out <span class="comment">// 输出到控制台</span></span><br><span class="line"><span class="keyword">try</span> (<span class="type">PrintStream</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;路径 / 文件对象&quot;</span>))) &#123; <span class="comment">// 输出到文件</span></span><br><span class="line">    </span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ps.print(<span class="string">&quot;Hello, &quot;</span>); <span class="comment">// 不换行输出</span></span><br><span class="line">ps.println(<span class="string">&quot;World!&quot;</span>); <span class="comment">// 换行输出</span></span><br><span class="line">ps.printf(<span class="string">&quot;%.2f\n&quot;</span>, <span class="number">3.14159</span>); <span class="comment">// 格式化输出</span></span><br></pre></td></tr></table></figure><h1 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h1><h2 id="供给型接口"><a href="#供给型接口" class="headerlink" title="供给型接口"></a>供给型接口</h2><blockquote><p><strong>Supplier&lt;T&gt;</strong></p><p>表示一个无参数的函数，返回一个结果</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Supplier&lt;Double&gt; randomSupplier = Math::random;</span><br><span class="line"></span><br><span class="line">randomSupplier.get(); <span class="comment">// 获取返回值</span></span><br></pre></td></tr></table></figure><h2 id="消费型接口"><a href="#消费型接口" class="headerlink" title="消费型接口"></a>消费型接口</h2><blockquote><p><strong>Consumer&lt;T&gt;</strong></p><p>表示一个接受一个参数并对其执行某些操作的函数，不返回结果</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Consumer&lt;String&gt; print = System.out::println;</span><br><span class="line"></span><br><span class="line">print.accept(<span class="string">&quot;Hello, World!&quot;</span>); <span class="comment">// 执行操作</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Consumer&lt;String&gt; a = () -&gt; System.out.print(<span class="string">&quot;AAA&quot;</span>);</span><br><span class="line">Consumer&lt;String&gt; b = () -&gt; System.out.println(<span class="string">&quot;BBB&quot;</span>);</span><br><span class="line">Consumer&lt;String&gt; ab = a.andThen(b); <span class="comment">// 链接多个 Consumers</span></span><br><span class="line"></span><br><span class="line">ab.accept(); <span class="comment">// 打印结果：AAABBB</span></span><br></pre></td></tr></table></figure><h2 id="函数型接口"><a href="#函数型接口" class="headerlink" title="函数型接口"></a>函数型接口</h2><blockquote><p><strong>Function&lt;T, R&gt;</strong></p><p>表示一个接受一个参数并返回一个结果的函数</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Function&lt;String, Integer&gt; lengthFunction = (s) -&gt; s.length();</span><br><span class="line"></span><br><span class="line">lengthFunction.apply(<span class="string">&quot;AAA&quot;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Function&lt;Integer, String&gt; a = (n) -&gt; <span class="string">&quot;Number：&quot;</span> + n;</span><br><span class="line">Function&lt;String, String&gt; b = (s) -&gt; s.toUpperCase();</span><br><span class="line">Function&lt;Integer, String&gt; ab = a.andThen(b); <span class="comment">// 链接多个 Functions</span></span><br><span class="line"></span><br><span class="line">ab.apply(<span class="number">10</span>); <span class="comment">// NUMBER：10（先执行 a，再执行 b）</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Function&lt;String, Integer&gt; a = (s) -&gt; Integer.parseInt(s);</span><br><span class="line">Function&lt;String, String&gt; b = (s) -&gt; s + <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">Function&lt;String, Integer&gt; ab = a.compose(b); <span class="comment">// 链接多个 Functions</span></span><br><span class="line"></span><br><span class="line">ab.apply(<span class="string">&quot;10&quot;</span>); <span class="comment">// 100（先执行 b，再执行 a）</span></span><br></pre></td></tr></table></figure><h2 id="断言型接口"><a href="#断言型接口" class="headerlink" title="断言型接口"></a>断言型接口</h2><blockquote><p><strong>Predicate&lt;T&gt;</strong></p><p>表示一个接受一个参数并返回布尔值的函数</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Predicate&lt;Integer&gt; isEven = (n) -&gt; n % <span class="number">2</span> == <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">isEven.test(<span class="number">4</span>); <span class="comment">// true</span></span><br><span class="line">isEven.negate(<span class="number">4</span>); <span class="comment">// false（对结果进行取反）</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Predicate&lt;Integer&gt; a = (n) -&gt; n % <span class="number">2</span> == <span class="number">0</span>;</span><br><span class="line">Predicate&lt;Integer&gt; b = (n) -&gt; n &gt; <span class="number">0</span>;</span><br><span class="line">Predicate&lt;Integer&gt; and = a.and(b); <span class="comment">// 组合多个 Predicate，逻辑为 and</span></span><br><span class="line">Predicate&lt;Integer&gt; or = a.or(b); <span class="comment">// 组合多个 Predicate，逻辑为 or</span></span><br><span class="line"></span><br><span class="line">and.test(<span class="number">3</span>); <span class="comment">// false</span></span><br><span class="line">or.test(<span class="number">3</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h1 id="Stream-流"><a href="#Stream-流" class="headerlink" title="Stream 流"></a>Stream 流</h1><blockquote><p>用于以声明性和函数式的方式处理集合数据，简化了复杂的数据操作如过滤、映射和聚合</p></blockquote><h2 id="流的创建"><a href="#流的创建" class="headerlink" title="流的创建"></a>流的创建</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">of(元素<span class="number">1</span>，元素<span class="number">2</span>，...)：创建流</span><br><span class="line">ofNullable(元素)：创建单个元素的流，为空返回 Optional</span><br><span class="line"><span class="title function_">range</span><span class="params">(初始值，结束值)</span>：返回范围为 [初始值，结束值) 的等差数列所组成的有限流</span><br><span class="line">generate(供给型函数)：返回由该函数所生成的无限流</span><br><span class="line">iterate(初始值，迭代函数)：返回从初始值开始，依据迭代函数生成的无限序列所组成的流</span><br></pre></td></tr></table></figure><h2 id="中间操作"><a href="#中间操作" class="headerlink" title="中间操作"></a>中间操作</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">sorted(比较器)：排序</span><br><span class="line">distinct()：去重</span><br><span class="line">filter(断言型函数)：过滤掉不符合该断言的元素</span><br><span class="line">limit(最大长度)：限制流的最大长度</span><br><span class="line">skip(值)：丢弃前 n 个元素</span><br><span class="line">peek(消费型函数)：消费每个元素，但不中断流</span><br><span class="line"></span><br><span class="line">boxed()：将元素类型转换为其包装类型</span><br><span class="line">asLongStream()：转换为 LongStream 流，元素类型转换为 <span class="type">long</span></span><br><span class="line"><span class="title function_">asDoubleStream</span><span class="params">()</span>：转换为 DoubleStream 流，元素类型转换为 <span class="type">double</span></span><br><span class="line"><span class="title function_">concat</span><span class="params">(流<span class="number">1</span>，流<span class="number">2</span>)</span>：组合两个流</span><br><span class="line"></span><br><span class="line">empty()：返回一个空的流</span><br><span class="line">map(函数型函数)：返回一个将此函数作用于该流上的流</span><br><span class="line">mapToDouble(函数型函数)：返回一个将此函数作用于该流上的流</span><br><span class="line">mapToInt(函数型函数)：返回一个将此函数作用于该流上的流</span><br><span class="line">mapToLong(函数型函数)：返回一个将此函数作用于该流上的流</span><br><span class="line">flatMap(函数型函数)：返回一个将此函数作用于每个元素所组成的流</span><br><span class="line">flatMapToDouble(函数型函数)：返回一个将此函数作用于每个元素所组成的流</span><br><span class="line">flatMapToInt(函数型函数)：返回一个将此函数作用于每个元素所组成的流</span><br><span class="line">flatMapToLong(函数型函数)：返回一个将此函数作用于每个元素所组成的流</span><br></pre></td></tr></table></figure><h2 id="终结操作"><a href="#终结操作" class="headerlink" title="终结操作"></a>终结操作</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">forEach(消费型函数)：消费每个元素</span><br><span class="line">forEachOrdered(消费型函数)：按照原始顺序，消费每个元素</span><br><span class="line"></span><br><span class="line">sum()：求和</span><br><span class="line">min(比较器)：求最小值</span><br><span class="line">max(比较器)：求最大值</span><br><span class="line">average()：求平均值</span><br><span class="line">count()：求元素数量</span><br><span class="line"></span><br><span class="line">findFirst()：返回第一个元素</span><br><span class="line">findAny()：返回任意一个元素</span><br><span class="line">allMatch(断言型函数)：判断全部元素是否都满足该断言</span><br><span class="line">anyMatch(断言型函数)：判断是否存在一个元素满足该断言</span><br><span class="line">reduce(累计函数)：对元素逐个累积计算，保留最后一次迭代的值</span><br><span class="line"></span><br><span class="line">builder()：返回构造器</span><br><span class="line">toArray()：转换为数组</span><br><span class="line">collect(集合类)：将全部元素存入该集合中</span><br></pre></td></tr></table></figure><h1 id="正则匹配"><a href="#正则匹配" class="headerlink" title="正则匹配"></a>正则匹配</h1><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><blockquote><p>用于匹配字符串中字符组合的模式</p></blockquote><h3 id="非打印字符"><a href="#非打印字符" class="headerlink" title="非打印字符"></a>非打印字符</h3><blockquote><p>在文本输出中不会直接显示为可见字符的字符</p></blockquote><table><thead><tr><th align="center">非打印字符</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>\n</code></td><td align="center">换行符</td></tr><tr><td align="center"><code>\r</code></td><td align="center">回车符</td></tr><tr><td align="center"><code>\t</code></td><td align="center">制表符</td></tr><tr><td align="center"><code>\v</code></td><td align="center">垂直制表符</td></tr><tr><td align="center"><code>\f</code></td><td align="center">换页符</td></tr><tr><td align="center"><code>\b</code></td><td align="center">退格符</td></tr><tr><td align="center"><code>\0</code></td><td align="center">空字符</td></tr><tr><td align="center"><code>\uXXXX</code></td><td align="center">Unicode 字符</td></tr></tbody></table><ul><li><p>在字符串中使用这些转义序列时，需要特别注意反斜杠的转义</p><p>例如，要在<code>Java</code>字符串中表示<code>\n</code>，需要写成<code>\\n</code></p></li></ul><h3 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h3><blockquote><p>在代码或字符串中具有特定含义的字符</p><p>若要匹配这些特殊字符，必须要使用<code>\</code>进行转义</p></blockquote><table><thead><tr><th align="center">特殊字符</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>\</code></td><td align="center">标记一个转义字符</td></tr><tr><td align="center"><code>.</code></td><td align="center">匹配除换行符以外的任意字符</td></tr><tr><td align="center"><code>(</code></td><td align="center">标记捕获组的开始</td></tr><tr><td align="center"><code>)</code></td><td align="center">标记捕获组的结束</td></tr><tr><td align="center"><code>[</code></td><td align="center">标记字符类的开始</td></tr><tr><td align="center"><code>]</code></td><td align="center">标记字符类的结束</td></tr><tr><td align="center"><code>&#123;</code></td><td align="center">标记限定符的开始</td></tr><tr><td align="center"><code>&#125;</code></td><td align="center">标记限定符的结束</td></tr><tr><td align="center">&#96;</td><td align="center">&#96;</td></tr></tbody></table><h3 id="字符类"><a href="#字符类" class="headerlink" title="字符类"></a>字符类</h3><blockquote><p>用于定义一组字符，以匹配单个字符</p></blockquote><table><thead><tr><th align="center">字符类</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>字符</code></td><td align="center">匹配指定字符</td></tr><tr><td align="center"><code>.</code></td><td align="center">匹配除换行符以外的任意字符</td></tr><tr><td align="center"><code>[0-9]</code></td><td align="center">匹配任意数字</td></tr><tr><td align="center"><code>[^0-9]</code></td><td align="center">匹配任意非数字</td></tr><tr><td align="center"><code>[a-z]</code></td><td align="center">匹配任意小写字母</td></tr><tr><td align="center"><code>[^a-z]</code></td><td align="center">匹配任意非小写字母</td></tr><tr><td align="center"><code>[A-Z]</code></td><td align="center">匹配任意大写字母</td></tr><tr><td align="center"><code>[^A-Z]</code></td><td align="center">匹配任意非大写字母</td></tr><tr><td align="center"><code>[\u4e00-\u9fa5]</code></td><td align="center">匹配任意汉字</td></tr><tr><td align="center"><code>[^\u4e00-\u9fa5]</code></td><td align="center">匹配任意非汉字</td></tr><tr><td align="center"><code>\s</code></td><td align="center">匹配任意空白字符，包括空格、制表符、换行符等</td></tr><tr><td align="center"><code>\S</code></td><td align="center">匹配任意非空白字符</td></tr><tr><td align="center"><code>\d</code></td><td align="center">匹配任意数字，等同于<code>[0-9]</code></td></tr><tr><td align="center"><code>\D</code></td><td align="center">匹配任意非数字，等同于<code>[^0-9]</code></td></tr><tr><td align="center"><code>\w</code></td><td align="center">匹配任意字母、数字或下划线，等同于<code>[a-zA-Z0-9_]</code></td></tr><tr><td align="center"><code>\W</code></td><td align="center">匹配任意非字母、数字或下划线，等同于<code>[^a-zA-Z0-9_]</code></td></tr></tbody></table><h3 id="限定符"><a href="#限定符" class="headerlink" title="限定符"></a>限定符</h3><blockquote><p>用于指定模式中某个元素出现的次数</p></blockquote><table><thead><tr><th align="center">限定符</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>&#123;n&#125;</code></td><td align="center">精确匹配前面的表达式 n 次</td></tr><tr><td align="center"><code>&#123;n,&#125;</code></td><td align="center">匹配前面的表达式至少 n 次</td></tr><tr><td align="center"><code>&#123;n,m&#125;</code></td><td align="center">匹配前面的表达式至少 n 次，但不超过 m 次</td></tr><tr><td align="center"><code>*</code></td><td align="center">匹配前面的表达式零次或多次，等同于<code>&#123;0,&#125;</code></td></tr><tr><td align="center"><code>+</code></td><td align="center">匹配前面的表达式一次或多次，等同于<code>&#123;1,&#125;</code></td></tr><tr><td align="center"><code>?</code></td><td align="center">匹配前面的表达式零次或一次，等同于<code>&#123;0,1&#125;</code></td></tr></tbody></table><h3 id="定位符"><a href="#定位符" class="headerlink" title="定位符"></a>定位符</h3><blockquote><p>用于定义模式在字符串中的位置</p></blockquote><table><thead><tr><th align="center">定位符</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>^</code></td><td align="center">匹配字符串的开始位置</td></tr><tr><td align="center"><code>$</code></td><td align="center">匹配字符串的结束位置</td></tr><tr><td align="center"><code>\A</code></td><td align="center">匹配字符串的绝对开始位置</td></tr><tr><td align="center"><code>\Z</code></td><td align="center">匹配字符串的绝对结束位置</td></tr><tr><td align="center"><code>\b</code></td><td align="center">匹配单词的边界，即字母和非字母之间的位置</td></tr><tr><td align="center"><code>\B</code></td><td align="center">匹配非单词边界，即字母与字母或数字与数字之间的位置</td></tr></tbody></table><ul><li><p><code>\A</code>和<code>\Z</code>是用于匹配整个字符串的开始和结束，始终匹配文本的第一和最后部分</p><p>而<code>^</code>和<code>$</code>在多行模式下可以匹配每行的开始和结束</p></li></ul><h2 id="Pattern"><a href="#Pattern" class="headerlink" title="Pattern"></a>Pattern</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Pattern</span> <span class="variable">pattern</span> <span class="operator">=</span> Pattern.compile(正则表达式)</span><br></pre></td></tr></table></figure><h2 id="Matcher"><a href="#Matcher" class="headerlink" title="Matcher"></a>Matcher</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> pattern.matcher(字符串)</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">matcher.find() <span class="comment">// 判断是否还有下一个匹配的子字符串，如果找到了匹配，会将匹配器的状态更新为匹配的子字符串</span></span><br><span class="line">matcher.hasNext() <span class="comment">// 判断是否还有下一个匹配的子字符串，它不会改变匹配器的状态，只是检查是否存在下一个匹配项</span></span><br><span class="line"></span><br><span class="line">matcher.group() <span class="comment">// 返回最后一次匹配的子字符串</span></span><br><span class="line">matcher.group(组) <span class="comment">// 返回指定组的匹配子字符串</span></span><br><span class="line">matcher.start() <span class="comment">// 返回当前匹配的起始索引</span></span><br><span class="line">matcher.end() <span class="comment">// 返回当前匹配的结束索引</span></span><br><span class="line">matcher.lookingAt() <span class="comment">// 检查字符串的开头是否与正则表达式匹配</span></span><br><span class="line">matcher.matches() <span class="comment">// 尝试将整个字符串与模式进行匹配</span></span><br><span class="line"></span><br><span class="line">matcher.replaceAll(字符串) <span class="comment">// 用指定的字符串替换所有匹配的子字符串</span></span><br><span class="line">matcher.replaceFirst(字符串) <span class="comment">// 用指定的字符串替换第一个匹配的子字符串</span></span><br><span class="line">matcher.reset(新字符串) <span class="comment">// 重置匹配器以准备匹配新字符串</span></span><br></pre></td></tr></table></figure><h1 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h1><h2 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h2><h3 id="绝对路径"><a href="#绝对路径" class="headerlink" title="绝对路径"></a>绝对路径</h3><p>绝对路径是指文件或目录在文件系统中的完整地址，它从根目录开始，描述了文件或目录的确切位置</p><p><code>C:\Users\Kokoa_Chino\Desktop\Learning materials\Java\Java_Code\Tools\data\file.txt</code>是一个绝对路径</p><h3 id="相对路径"><a href="#相对路径" class="headerlink" title="相对路径"></a>相对路径</h3><p>相对路径是基于当前工作目录开始的</p><p>当前工作目录通常是运行<code>Java</code>程序时的目录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(System.getProperty(<span class="string">&quot;user.dir&quot;</span>)); <span class="comment">// 获取当前工作目录</span></span><br></pre></td></tr></table></figure><p>比如，如果当前工作目录是<code>C:\Users\Kokoa_Chino\Desktop\Learning materials\Java\Java_Code\Tools</code></p><p>而使用相对路径<code>data\file.txt</code></p><p>那么实际访问的文件路径就是<code>C:\Users\Kokoa_Chino\Desktop\Learning materials\Java\Java_Code\Tools\data\file.txt</code></p><h2 id="文件对象"><a href="#文件对象" class="headerlink" title="文件对象"></a>文件对象</h2><blockquote><p>用于表示文件和目录路径的一个重要类</p><p>它属于<code>java.io</code>包，提供了与文件系统交互的方法</p><p>尽管对象本身并不直接用于读取或写入文件内容，但它为处理文件和目录提供了许多有用的方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;路径&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">file.exists() <span class="comment">// 文件是否存在</span></span><br><span class="line">file.canRead() <span class="comment">// 文件是否可读</span></span><br><span class="line">file.canWrite() <span class="comment">// 文件是否可写</span></span><br><span class="line">file.canExecute() <span class="comment">// 文件是否可执行</span></span><br><span class="line">file.isDirectory() <span class="comment">// 文件是否为一个文件夹</span></span><br><span class="line"></span><br><span class="line">file.length() <span class="comment">// 获取文件的大小（字节数）</span></span><br><span class="line">file.listFiles() <span class="comment">// 获取文件夹内部的文件列表</span></span><br><span class="line">file.getAbsolutePath() <span class="comment">// 获取文件的绝对路径</span></span><br><span class="line">file.getName() <span class="comment">// 获取文件或文件夹的名称</span></span><br><span class="line">file.getPath() <span class="comment">// 获取文件的路径</span></span><br><span class="line">file.getParent() <span class="comment">// 获取文件的父目录路径</span></span><br><span class="line"></span><br><span class="line">file.createNewFile() <span class="comment">// 创建新文件，如果文件已存在则返回 false</span></span><br><span class="line">file.delete() <span class="comment">// 删除文件或空目录</span></span><br><span class="line">file.mkdir() <span class="comment">// 创建单个目录</span></span><br><span class="line">file.mkdirs() <span class="comment">// 创建多级目录</span></span><br><span class="line">file.renameTo(文件对象) <span class="comment">// 重命名文件或目录</span></span><br><span class="line">file.lastModified() <span class="comment">// 获取文件的最后修改时间</span></span><br></pre></td></tr></table></figure><h2 id="路径对象"><a href="#路径对象" class="headerlink" title="路径对象"></a>路径对象</h2><blockquote><p>Java NIO 中用于表示文件和目录路径的一个重要类</p><p>它提供了一种更灵活和强大的方式来处理文件系统中的路径</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Paths.get(<span class="string">&quot;路径&quot;</span>)</span><br><span class="line">Paths.get(<span class="string">&quot;父目录&quot;</span>, <span class="string">&quot;子目录&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">path.toFile() <span class="comment">// 将 Path 转换为 File 对象</span></span><br><span class="line">path.exists() <span class="comment">// 文件是否存在</span></span><br><span class="line">path.toAbsolutePath() <span class="comment">// 获取文件的绝对路径</span></span><br><span class="line">path.getFileName() <span class="comment">// 获取文件或目录的名称</span></span><br><span class="line">path.getParent() <span class="comment">// 获取文件的父目录路径</span></span><br><span class="line">path.getRoot() <span class="comment">// 获取路径的根部分</span></span><br><span class="line"></span><br><span class="line">Files.exists(path) <span class="comment">// 检查文件是否存在</span></span><br><span class="line">Files.isReadable(path) <span class="comment">// 检查文件是否可读</span></span><br><span class="line">Files.isWritable(path) <span class="comment">// 检查文件是否可写</span></span><br><span class="line">Files.isExecutable(path) <span class="comment">// 检查文件是否可执行</span></span><br><span class="line">Files.isDirectory(path) <span class="comment">// 检查路径是否为一个文件夹</span></span><br><span class="line">Files.size(path) <span class="comment">// 获取文件的大小（字节数）</span></span><br><span class="line">Files.list(path) <span class="comment">// 获取文件夹内部的文件列表</span></span><br><span class="line"></span><br><span class="line">Files.createFile(path) <span class="comment">// 创建新文件，如果已存在则抛出异常</span></span><br><span class="line">Files.delete(path) <span class="comment">// 删除文件或空目录</span></span><br><span class="line">Files.createDirectory(path) <span class="comment">// 创建单个目录</span></span><br><span class="line">Files.createDirectories(path) <span class="comment">// 创建多级目录</span></span><br><span class="line">Files.move(sourcePath, targetPath) <span class="comment">// 重命名文件或目录</span></span><br><span class="line">Files.getLastModifiedTime(path) <span class="comment">// 获取文件的最后修改时间</span></span><br></pre></td></tr></table></figure><h2 id="文件字节流"><a href="#文件字节流" class="headerlink" title="文件字节流"></a>文件字节流</h2><blockquote><p>以字节为单位对文件进行读写操作的一种数据流</p><p>它允许程序以原始字节的形式处理文件中的数据，适合处理所有类型的文件，包括文本文件、图像、音频和视频等</p></blockquote><p><strong>输入</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (<span class="type">FileInputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;路径 / 文件对象&quot;</span>)) &#123;</span><br><span class="line">    </span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">inputStream.read() <span class="comment">// 读取一个字节，为空时返回 -1</span></span><br><span class="line">inputStream.read(<span class="type">byte</span> 数组) <span class="comment">// 读取数组大小的字节数存到 byte 数组中，为空时返回 -1</span></span><br><span class="line">inputStream.read(<span class="type">byte</span> 数组, 起始位置, 读取数量) <span class="comment">// 读取指定字节数存到 byte 数组中，为空时返回 -1</span></span><br><span class="line">inputStream.available() <span class="comment">// 查看当前可读的剩余字节数量</span></span><br><span class="line">inputStream.skip(字节数) <span class="comment">// 跳过指定数量的字节</span></span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (<span class="type">FileOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;路径 / 文件对象&quot;</span>);</span><br><span class="line">     <span class="type">FileOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;路径 / 文件对象&quot;</span>, <span class="literal">true</span>)) &#123; <span class="comment">// 开启追加写入模式</span></span><br><span class="line">    </span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">outputStream.write(字节) <span class="comment">// 写入一个字节</span></span><br><span class="line">outputStream.write(<span class="type">byte</span> 数组) <span class="comment">// 写入一个 byte 数组</span></span><br><span class="line">outputStream.write(<span class="type">byte</span> 数组, 起始位置, 写入数量) <span class="comment">// 写入一个 byte 数组</span></span><br><span class="line">outputStream.flush() <span class="comment">// 刷新输出流</span></span><br></pre></td></tr></table></figure><h2 id="文件字符流"><a href="#文件字符流" class="headerlink" title="文件字符流"></a>文件字符流</h2><blockquote><p>以字符为单位对文本文件进行读写操作的一种数据流</p><p>它主要用于处理字符数据，适合读取和写入文本文件，能够自动处理字符编码</p></blockquote><p><strong>输入</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (<span class="type">FileReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;路径 / 文件对象&quot;</span>)) &#123;</span><br><span class="line">    </span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">reader.read() <span class="comment">// 读取一个字符，为空时返回 -1</span></span><br><span class="line">reader.read(<span class="type">char</span> 数组) <span class="comment">// 读取数组大小的字符数存到 char 数组中，为空时返回 -1</span></span><br><span class="line">reader.read(<span class="type">char</span> 数组, 起始位置, 读取数量) <span class="comment">// 读取指定字符数存到 char 数组中，为空时返回 -1</span></span><br><span class="line">reader.available() <span class="comment">// 查看当前可读的剩余字符数量</span></span><br><span class="line">reader.skip(字符数) <span class="comment">// 跳过指定数量的字符</span></span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (<span class="type">FileWriter</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;路径 / 文件对象&quot;</span>);</span><br><span class="line">     <span class="type">FileWriter</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;路径 / 文件对象&quot;</span>, <span class="literal">true</span>)) &#123; <span class="comment">// 开启追加写入模式</span></span><br><span class="line">    </span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">writer.write(字符) <span class="comment">// 写入一个字符</span></span><br><span class="line">writer.write(<span class="type">char</span> 数组) <span class="comment">// 写入一个 char 数组</span></span><br><span class="line">writer.write(<span class="type">char</span> 数组, 起始位置, 写入数量) <span class="comment">// 写入一个 char 数组</span></span><br><span class="line">writer.flush() <span class="comment">// 刷新输出流</span></span><br><span class="line">writer.getEncoding() <span class="comment">// 获取编码</span></span><br></pre></td></tr></table></figure><h2 id="缓冲流"><a href="#缓冲流" class="headerlink" title="缓冲流"></a>缓冲流</h2><blockquote><p>Java 中处理输入和输出的一个重要概念，主要用于提高文件读写操作的效率</p><p>通过在内存中使用缓冲区，缓冲流能够减少频繁的磁盘 I&#x2F;O 操作，从而提升性能</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">BufferedInputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;路径 / 文件对象&quot;</span>))</span><br><span class="line"><span class="type">BufferedOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;路径 / 文件对象&quot;</span>))</span><br><span class="line"><span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;路径 / 文件对象&quot;</span>)))</span><br><span class="line"><span class="type">BufferedWriter</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;路径 / 文件对象&quot;</span>)))</span><br><span class="line">    </span><br><span class="line"><span class="type">BufferedInputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;路径 / 文件对象&quot;</span>), 缓冲区大小)</span><br><span class="line"><span class="type">BufferedOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;路径 / 文件对象&quot;</span>), 缓冲区大小)</span><br><span class="line"><span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;路径 / 文件对象&quot;</span>)), 缓冲区大小)</span><br><span class="line"><span class="type">BufferedWriter</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;路径 / 文件对象&quot;</span>)), 缓冲区大小)</span><br></pre></td></tr></table></figure><p>缓冲流与其他文件流之间的关系可以被视为一种封装关系，可以使用其他文件流原本的全部方法，并且提供了一些额外的方法</p><p>对于<code>BufferedInputStream</code>，额外的方法如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">inputStream.mark(限制大小) <span class="comment">// 标记当前流的位置。调用此方法后，可以在流中随便读取数据，直到读取的数据量达到指定的限制</span></span><br><span class="line">inputStream.reset() <span class="comment">// 将流的位置重置回上一个调用 mark() 方法时的位置</span></span><br></pre></td></tr></table></figure><p>对于<code>BufferedReader</code>，额外的方法如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">reader.mark(限制大小) <span class="comment">// 标记当前流的位置。调用此方法后，可以在流中随便读取数据，直到读取的数据量达到指定的限制</span></span><br><span class="line">reader.reset() <span class="comment">// 将流的位置重置回上一个调用 mark() 方法时的位置</span></span><br><span class="line">reader.readLine() <span class="comment">// 读取一行</span></span><br><span class="line">reader.lines() <span class="comment">// 返回一个 Stream 流，该流按行读取文本文件</span></span><br></pre></td></tr></table></figure><p>对于<code>BufferedWriter</code>，额外的方法如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">writer.write(字符串) <span class="comment">// 写入一个字符串</span></span><br><span class="line">writer.newLine() <span class="comment">// 写入平台默认的换行符</span></span><br></pre></td></tr></table></figure><h2 id="转换流"><a href="#转换流" class="headerlink" title="转换流"></a>转换流</h2><blockquote><p>Java I&#x2F;O 中的一种流，用于在字节流和字符流之间进行转换</p><p>它们主要用于处理字符编码问题，使得对文本文件的读取和写入变得更加灵活和方便</p></blockquote><p><strong>输入</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (<span class="type">InputStreamReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;路径 / 文件对象&quot;</span>), <span class="string">&quot;编码格式&quot;</span>)) &#123;</span><br><span class="line">    </span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>将字节流转换为字符流</li><li>可以指定字符编码格式</li></ul><p><strong>输出</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (<span class="type">OutputStreamWriter</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;路径 / 文件对象&quot;</span>), <span class="string">&quot;编码格式&quot;</span>)) &#123;</span><br><span class="line">    </span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>将字符流转换为字节流</li><li>可以指定字符编码格式</li></ul><h2 id="数据流"><a href="#数据流" class="headerlink" title="数据流"></a>数据流</h2><blockquote><p>用于处理基本数据类型的流类，允许以机器无关的方式读取和写入二进制数据</p><p>这些类通常用于从文件或网络流中输入和输出原始数据类型</p></blockquote><p><strong>输入</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (<span class="type">DataInputStream</span> <span class="variable">dis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;路径 / 文件对象&quot;</span>))) &#123;</span><br><span class="line">    </span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> dis.readInt()</span><br><span class="line"><span class="type">float</span> <span class="variable">decimal</span> <span class="operator">=</span> dis.readFloat()</span><br><span class="line"><span class="type">double</span> <span class="variable">decimal</span> <span class="operator">=</span> dis.readDouble()</span><br><span class="line"><span class="type">boolean</span> <span class="variable">boolValue</span> <span class="operator">=</span> dis.readBoolean()</span><br><span class="line"><span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> dis.readChar()</span><br><span class="line"><span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> dis.readUTF()</span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (<span class="type">DataOutputStream</span> <span class="variable">dos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;路径 / 文件对象&quot;</span>))) &#123;</span><br><span class="line">    </span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">dos.writeInt(<span class="number">123</span>)</span><br><span class="line">dos.writeFloat(<span class="number">45.67f</span>)</span><br><span class="line">dos.writeDouble(<span class="number">45.67</span>)</span><br><span class="line">dos.writeBoolean(<span class="literal">true</span>)</span><br><span class="line">dos.writeChar(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">dos.writeUTF(<span class="string">&quot;Hello, World!&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="对象流"><a href="#对象流" class="headerlink" title="对象流"></a>对象流</h2><blockquote><p>用于对象序列化和反序列化的类</p></blockquote><p><strong>输入</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (<span class="type">ObjectInputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;路径 / 文件对象&quot;</span>))) &#123;</span><br><span class="line">    </span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">people = (People) inputStream.readObject() <span class="comment">// 读取为对象</span></span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (<span class="type">ObjectOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;路径 / 文件对象&quot;</span>))) &#123;</span><br><span class="line">    </span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">outputStream.writeObject(people) <span class="comment">// 以对象的形式输入</span></span><br></pre></td></tr></table></figure><h2 id="打印流"><a href="#打印流" class="headerlink" title="打印流"></a>打印流</h2><blockquote><p>Java I&#x2F;O 系统中的一种特定类型的输出流，专门用于将数据以文本格式写入输出设备</p><p>可以自动刷新流，并且支持输出不同类型的数据</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">PrintStream</span> <span class="variable">ps</span> <span class="operator">=</span> System.out <span class="comment">// 输出到控制台</span></span><br><span class="line"><span class="keyword">try</span> (<span class="type">PrintStream</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;路径 / 文件对象&quot;</span>))) &#123; <span class="comment">// 输出到文件</span></span><br><span class="line">    </span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ps.print(<span class="string">&quot;Hello, &quot;</span>); <span class="comment">// 不换行输出</span></span><br><span class="line">ps.println(<span class="string">&quot;World!&quot;</span>); <span class="comment">// 换行输出</span></span><br><span class="line">ps.printf(<span class="string">&quot;%.2f\n&quot;</span>, <span class="number">3.14159</span>); <span class="comment">// 格式化输出</span></span><br></pre></td></tr></table></figure><h1 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h1><h2 id="线程的创建和启动"><a href="#线程的创建和启动" class="headerlink" title="线程的创建和启动"></a>线程的创建和启动</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(函数) <span class="comment">// 创建线程</span></span><br><span class="line">Thread.currentThread() <span class="comment">// 获取当前线程</span></span><br><span class="line">t.start() <span class="comment">// 启动线程</span></span><br></pre></td></tr></table></figure><h2 id="线程的优先级"><a href="#线程的优先级" class="headerlink" title="线程的优先级"></a>线程的优先级</h2><table><thead><tr><th align="center">线程的优先级</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center"><code>MIN_PRIORITY</code></td><td align="center">最低优先级</td></tr><tr><td align="center"><code>MAX_PRIORITY</code></td><td align="center">最高优先级</td></tr><tr><td align="center"><code>NOM_PRIORITY</code></td><td align="center">常规优先级</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">t.setPriority(线程优先级) <span class="comment">// 设定线程的优先级</span></span><br></pre></td></tr></table></figure><h2 id="线程的休眠和中断"><a href="#线程的休眠和中断" class="headerlink" title="线程的休眠和中断"></a>线程的休眠和中断</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Thread.sleep(毫秒) <span class="comment">// 休眠当前线程</span></span><br><span class="line">t.stop() <span class="comment">// 终止线程（不推荐）</span></span><br><span class="line"></span><br><span class="line">t.interrupt() <span class="comment">// 中断线程</span></span><br><span class="line">t.isInterrupted() <span class="comment">// 判断线程是否有中断标志</span></span><br><span class="line">Thread.interrupted() <span class="comment">// 立即清除当前线程的中断标记</span></span><br><span class="line"></span><br><span class="line">t.suspend() <span class="comment">// 暂停线程</span></span><br><span class="line">t.resume() <span class="comment">// 恢复暂停的线程</span></span><br></pre></td></tr></table></figure><h2 id="线程的礼让和加入"><a href="#线程的礼让和加入" class="headerlink" title="线程的礼让和加入"></a>线程的礼让和加入</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Thread.<span class="keyword">yield</span>() <span class="comment">// 将当前资源让位给其他同优先级线程</span></span><br><span class="line">t.join() <span class="comment">// 加入线程，等待新加入的线程的待执行内容全部执行完成之后，再继续执行原线程的内容</span></span><br></pre></td></tr></table></figure><h2 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h2><blockquote><p>用于线程局部存储的类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ThreadLocal&lt;T&gt; local = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;() <span class="comment">// 每个线程都拥有自己的独立变量副本，其他线程无法访问</span></span><br><span class="line">ThreadLocal&lt;T&gt; local = <span class="keyword">new</span> <span class="title class_">InheritableThreadLocal</span>&lt;&gt;() <span class="comment">// 允许子线程继承父线程的值</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">local.set(值) <span class="comment">// 设置值</span></span><br><span class="line">local.get() <span class="comment">// 获取值</span></span><br></pre></td></tr></table></figure><h2 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h2><blockquote><p>一个在后台运行的线程，提供服务或支持其他线程的操作</p><p>它的存在并不阻碍程序的终止</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Thread</span> <span class="variable">daemonThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;守护线程正在运行...&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    daemonThread.setDaemon(<span class="literal">true</span>); <span class="comment">// 设置为守护线程，必须要在开始之前，而且中途是不允许转换的</span></span><br><span class="line">    daemonThread.start();</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;主线程正在运行...&quot;</span>); <span class="comment">// 主线程</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;主线程结束&quot;</span>); <span class="comment">// 当主线程结束时，守护线程会被 JVM 终止</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="线程锁和线程同步"><a href="#线程锁和线程同步" class="headerlink" title="线程锁和线程同步"></a>线程锁和线程同步</h2><blockquote><p>能够确保多个线程之间安全地共享资源，避免竞争条件和数据不一致的问题</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span> (实例 / 类) &#123; <span class="comment">// 将代码块加锁，对于使用同一个锁的多个代码块，会保证其代码块同步</span></span><br><span class="line">    <span class="comment">// 代码块</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">fun</span><span class="params">()</span> &#123; <span class="comment">// 也可以加在方法上，调用此方法时也会保证其代码块同步</span></span><br><span class="line">    <span class="comment">// 代码块</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3><blockquote><p>两个或多个线程在执行过程中，因为争夺资源而造成的一种互相等待的状态，导致它们无法继续执行</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">o1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>(), o2 = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"><span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (o1) &#123; <span class="comment">// 获取到 o1 这个锁</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            <span class="keyword">synchronized</span> (o2) &#123; <span class="comment">// 想要获取 o2 这个锁，但是获取不到，因为已经被线程 2 拥有，只能等待线程 2 释放锁</span></span><br><span class="line">                System.out.println(<span class="string">&quot;线程 1&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (o2) &#123; <span class="comment">// 获取到 o2 这个锁</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            <span class="keyword">synchronized</span> (o1) &#123; <span class="comment">// 想要获取 o1 这个锁，但是获取不到，因为已经被线程 1 拥有，只能等待线程 1 释放锁</span></span><br><span class="line">                System.out.println(<span class="string">&quot;线程 2&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">t1.start();</span><br><span class="line">t2.start();</span><br></pre></td></tr></table></figure><h3 id="wait-和-notify-方法"><a href="#wait-和-notify-方法" class="headerlink" title="wait 和 notify 方法"></a>wait 和 notify 方法</h3><blockquote><p>用于实现线程的协作与同步，以确保线程在访问共享资源时的协调</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>()</span><br><span class="line"><span class="keyword">synchronized</span> (o) &#123;</span><br><span class="line">    o.wait() <span class="comment">// 进入等待状态，并释放锁</span></span><br><span class="line">    o.notify() <span class="comment">// 唤醒处于等待状态的线程（随机选择一个）</span></span><br><span class="line">    o.notifyAll() <span class="comment">// 唤醒处于等待状态的线程（全部）</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h2><h3 id="延迟执行"><a href="#延迟执行" class="headerlink" title="延迟执行"></a>延迟执行</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Timer</span> <span class="variable">timer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Timer</span>(); <span class="comment">// 创建定时器对象</span></span><br><span class="line"></span><br><span class="line"><span class="type">TimerTask</span> <span class="variable">task</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TimerTask</span>() &#123; <span class="comment">// 创建一个任务</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;任务执行：延迟执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">timer.schedule(task, 延迟时间（毫秒）); <span class="comment">// 执行任务</span></span><br><span class="line">timer.cancel(); <span class="comment">// 关闭定时器，可以取消任务</span></span><br></pre></td></tr></table></figure><h3 id="定时重复"><a href="#定时重复" class="headerlink" title="定时重复"></a>定时重复</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Timer</span> <span class="variable">timer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Timer</span>(); <span class="comment">// 创建定时器对象</span></span><br><span class="line"></span><br><span class="line"><span class="type">TimerTask</span> <span class="variable">task</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TimerTask</span>() &#123; <span class="comment">// 创建一个任务</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;任务执行：定时重复执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">timer.scheduleAtFixedRate(task,  延迟时间（毫秒）,  间隔时间（毫秒）); <span class="comment">// 执行任务</span></span><br><span class="line">timer.cancel(); <span class="comment">// 关闭定时器，可以取消任务</span></span><br></pre></td></tr></table></figure><h1 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h1><blockquote><p>一种特殊类型的标记，可以被附加到代码的各个元素上，如类、方法、字段、参数等</p><p>它提供了一种为程序元素添加元数据的方式，这些元数据可以在编译时、类加载时或运行时被读取和处理</p></blockquote><h2 id="预设注解"><a href="#预设注解" class="headerlink" title="预设注解"></a>预设注解</h2><blockquote><p>在 Java 语言中定义的标准注解</p></blockquote><ul><li><p><code>@Override</code>：</p><p>用于指示一个方法覆盖超类中的方法</p><p>编译器会检查此注解所标记的方法是否确实重写了超类中的方法，如果没有，将会抛出编译错误</p></li><li><p><code>@Deprecated</code>：</p><p>标记一个方法、类或字段为不推荐使用</p><p>这意味着该元素在未来的版本中可能会被移除或不再支持</p><p>使用这个注解的元素通常有替代方案，编译器在使用该元素时会发出警告</p></li><li><p><code>@FunctionalInterface</code>：</p><p>标记一个接口为函数式接口，即该接口只能有一个抽象方法</p><p>函数式接口可以被隐式转换为 lambda 表达式或方法引用，使得代码更加简洁和可读</p></li><li><p><code>@SuppressWarnings</code>：</p><p>用于指示编译器忽略特定的警告信息</p><p>它可以用来压制多种类型的警告，如未使用的变量、unchecked 类型转换等</p><p>通过指定警告的名称，可以控制编译器在编译时的行为，以提高代码的可读性和可维护性</p></li><li><p><code>@SafeVarargs</code>：</p><p>用于标记一个方法的可变参数是安全的</p><p>通常用于静态方法或实例方法中，防止出现类型安全的问题</p><p>当使用泛型时，编译器会检查类型安全性，而使用此注解可以告知编译器该方法不会导致不安全的操作</p></li></ul><h2 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h2><blockquote><p>用于描述其他注解的注解</p></blockquote><ul><li><p><code>@Retention</code>：标识这个注解的生命周期，确定注解的可见性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention(值)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnnotation &#123;</span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">值</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center"><code>RetentionPolicy.SOURCE</code></td><td align="center">注解只在源代码中存在，编译后会被丢弃</td></tr><tr><td align="center"><code>RetentionPolicy.CLASS</code></td><td align="center">注解在编译后会保留在 class 文件中，但在运行时不可用</td></tr><tr><td align="center"><code>RetentionPolicy.RUNTIME</code></td><td align="center">注解在运行时仍然可用，可以通过反射访问</td></tr></tbody></table></li><li><p><code>@Target</code>：标记注解可以应用于哪些 Java 成员，限制注解的使用范围</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnnotation &#123;</span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">值</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center"><code>ElementType.TYPE</code></td><td align="center">可以应用于类、接口或枚举</td></tr><tr><td align="center"><code>ElementType.FIELD</code></td><td align="center">可以应用于字段</td></tr><tr><td align="center"><code>ElementType.METHOD</code></td><td align="center">可以应用于方法</td></tr><tr><td align="center"><code>ElementType.PARAMETER</code></td><td align="center">可以应用于方法参数</td></tr><tr><td align="center"><code>ElementType.CONSTRUCTOR</code></td><td align="center">可以应用于构造器</td></tr><tr><td align="center"><code>ElementType.LOCAL_VARIABLE</code></td><td align="center">可以应用于局部变量</td></tr><tr><td align="center"><code>ElementType.ANNOTATION_TYPE</code></td><td align="center">可以应用于注解类型</td></tr><tr><td align="center"><code>ElementType.PACKAGE</code></td><td align="center">可以应用于包</td></tr></tbody></table></li><li><p><code>@Inherited</code>：标记一个注解可以被子类继承。如果一个注解被标记为<code>@Inherited</code>，那么如果父类使用了这个注解，子类在未显式声明的情况下，也会继承这个注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnnotation &#123;</span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>@Documented</code>：标记这些注解是否包含在用户文档中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnnotation &#123;</span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>@Repeatable</code>：允许同一个注解可以在同一声明上使用多次</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repeatable(MyAnnotations.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnnotation &#123;</span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnnotations &#123;</span><br><span class="line">    MyAnnotation[] value();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 元注解...</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnnotation &#123; <span class="comment">// 自定义注解</span></span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;默认值&quot;</span>;</span><br><span class="line">    String[] test();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用自定义注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@MyAnnotation(value = &quot;AAA&quot;, test = &#123;&quot;value1&quot;, &quot;value2&quot;&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">myMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><blockquote><p>允许程序在运行时检查和操作类及其成员（如字段、方法和构造函数）</p><p>通过反射，Java 程序能够动态加载类、创建对象、调用方法和访问字段，而无需在编译时知道这些类的详细信息</p></blockquote><h2 id="Class-类"><a href="#Class-类" class="headerlink" title="Class 类"></a>Class 类</h2><blockquote><p>Java 中的一个核心类，提供了关于类和对象的信息</p><p>在 Java 中，每个类在运行时都有一个对应的<code>Class</code>对象，可以通过这个对象来获取类的元数据</p><p>包括类的名称、父类、实现的接口、字段、方法等</p></blockquote><p>获取<code>Class</code>类对象（以<code>String</code>类为例）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;String&gt; clazz1 = String.class <span class="comment">// 通过类名获取</span></span><br><span class="line">Class&lt;?&gt; clazz2 = Class.forName(<span class="string">&quot;java.lang.String&quot;</span>) <span class="comment">// 通过包名.类名获取</span></span><br><span class="line">Class&lt;?&gt; clazz3 = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;&quot;</span>).getClass() <span class="comment">// 通过实例对象获取</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">clazz.getSimpleName() <span class="comment">// 获取类的简单名称（不包括包名）</span></span><br><span class="line">clazz.getSuperclass() <span class="comment">// 获取该类的父类 Class 对象</span></span><br><span class="line">clazz.getInterfaces() <span class="comment">// 获取该类实现的所有接口</span></span><br><span class="line">clazz.getDeclaredFields() <span class="comment">// 获取该类声明的所有字段</span></span><br><span class="line">clazz.getDeclaredMethods() <span class="comment">// 获取该类声明的所有方法</span></span><br><span class="line">clazz.getDeclaredConstructors() <span class="comment">// 获取该类声明的所有构造函数</span></span><br><span class="line"></span><br><span class="line">clazz.isArray() <span class="comment">// 判断该类是否是数组类</span></span><br><span class="line">clazz.isPrimitive() <span class="comment">// 判断该类是否是基本数据类型</span></span><br><span class="line">clazz.cast(对象) <span class="comment">// 将对象强制转换为该类</span></span><br><span class="line">clazz.asSubclass(子类) <span class="comment">// 将 Class 对象转换为指定子类类型</span></span><br><span class="line">clazz.getClassLoader() <span class="comment">// 获取加载该类的类加载器</span></span><br></pre></td></tr></table></figure><h2 id="创建类对象"><a href="#创建类对象" class="headerlink" title="创建类对象"></a>创建类对象</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String str)</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;Student&gt; clazz = Student.class; <span class="comment">// 获取 Student 类的 Class 对象</span></span><br><span class="line"><span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> clazz.getConstructor(String.class).newInstance(<span class="string">&quot;AAA&quot;</span>); <span class="comment">// 使用反射获取构造函数并创建该对象</span></span><br><span class="line">student.test();</span><br></pre></td></tr></table></figure><ul><li><code>getConstructor</code>：获取指定参数类型的 public 构造函数</li><li><code>newInstance</code>：通过获取到的构造函数实例化一个对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Student</span><span class="params">(String str)</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;Student&gt; clazz = Student.class; <span class="comment">// 获取 Student 类的 Class 对象</span></span><br><span class="line">Constructor&lt;Student&gt; constructor = clazz.getDeclaredConstructor(String.class); <span class="comment">// 使用反射获取构造函数</span></span><br><span class="line">constructor.setAccessible(<span class="literal">true</span>); <span class="comment">// 设置构造函数可访问</span></span><br><span class="line"><span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> constructor.newInstance(<span class="string">&quot;AAA&quot;</span>); <span class="comment">// 通过构造函数创建该对象</span></span><br><span class="line">student.test();</span><br></pre></td></tr></table></figure><ul><li><p><code>getDeclaredConstructor</code>：获取指定参数类型的非 public 构造函数</p></li><li><p><code>setAccessible</code>：设置为 true 时，表示允许访问具有非 public 权限的成员，包括构造函数、方法和字段</p></li></ul><h2 id="调用类方法"><a href="#调用类方法" class="headerlink" title="调用类方法"></a>调用类方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">test</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a + <span class="string">&quot; : &quot;</span> + b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;?&gt; clazz = Student.class; <span class="comment">// 获取 Student 类的 Class 对象</span></span><br><span class="line"><span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> clazz.getMethod(<span class="string">&quot;test&quot;</span>, <span class="type">int</span>.class, <span class="type">int</span>.class); <span class="comment">// 获取 test 方法，指定参数类型为 int, int</span></span><br><span class="line"><span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> (String) method.invoke(student, <span class="number">5</span>, <span class="number">10</span>); <span class="comment">// 调用 test 方法，传入参数</span></span><br></pre></td></tr></table></figure><ul><li><code>getMethod</code>：获取指定名称和参数类型的 public 方法</li><li><code>invoke</code>：在指定对象上调用该方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">test</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a + <span class="string">&quot; : &quot;</span> + b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;?&gt; clazz = Student.class; <span class="comment">// 获取 Student 类的 Class 对象</span></span><br><span class="line"><span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> clazz.getDeclaredMethod(<span class="string">&quot;test&quot;</span>, <span class="type">int</span>.class, <span class="type">int</span>.class); <span class="comment">// 获取私有方法 test</span></span><br><span class="line">method.setAccessible(<span class="literal">true</span>); <span class="comment">// 设置方法可访问</span></span><br><span class="line"><span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> (String) method.invoke(student, <span class="number">5</span>, <span class="number">10</span>); <span class="comment">// 调用 test 方法，传入参数</span></span><br></pre></td></tr></table></figure><ul><li><code>getDeclaredMethod</code>：获取指定名称和参数类型的非 public 方法</li></ul><h2 id="修改类属性"><a href="#修改类属性" class="headerlink" title="修改类属性"></a>修改类属性</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">Class&lt;?&gt; clazz = student.getClass(); <span class="comment">// 获取 Student 类的 Class 对象</span></span><br><span class="line"><span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> clazz.getField(<span class="string">&quot;i&quot;</span>); <span class="comment">// 使用 getField 获取公共字段 i</span></span><br><span class="line">field.setInt(student, <span class="number">2</span>); <span class="comment">// 将 i 的值修改为 2</span></span><br></pre></td></tr></table></figure><ul><li><code>getField</code>：获取指定名称的 public 字段的 Field 对象</li><li><code>setInt</code>：修改指定对象的 int 类型字段的值（其他数据类型同理，也可直接用 set）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;AAA&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">Class&lt;?&gt; clazz = student.getClass(); <span class="comment">// 获取 Student 类的 Class 对象</span></span><br><span class="line"><span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;s&quot;</span>); <span class="comment">// 使用 getDeclaredField 获取私有 final 字段 s</span></span><br><span class="line">field.setAccessible(<span class="literal">true</span>); <span class="comment">// 设置字段可访问</span></span><br><span class="line"><span class="type">Field</span> <span class="variable">modifiersField</span> <span class="operator">=</span> Field.class.getDeclaredField(<span class="string">&quot;modifiers&quot;</span>);</span><br><span class="line">modifiersField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">modifiersField.setInt(field, field.getModifiers() &amp; ~java.lang.reflect.Modifier.FINAL); <span class="comment">// 去除 final 标记</span></span><br><span class="line">field.set(student, <span class="string">&quot;BBB&quot;</span>); <span class="comment">// 将 s 的值修改为 &quot;BBB&quot;</span></span><br></pre></td></tr></table></figure><h2 id="获取类注解"><a href="#获取类注解" class="headerlink" title="获取类注解"></a>获取类注解</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnnotation &#123;</span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;default value&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@MyAnnotation(&quot;Hello, World!&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">myMethod</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;MyClass&gt; myClass = MyClass.class;</span><br><span class="line"><span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> myClass.getMethod(<span class="string">&quot;myMethod&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (method.isAnnotationPresent(MyAnnotation.class)) &#123; <span class="comment">// 检查是否有 MyAnnotation 注解</span></span><br><span class="line">    <span class="type">MyAnnotation</span> <span class="variable">annotation</span> <span class="operator">=</span> method.getAnnotation(MyAnnotation.class); <span class="comment">// 获取注解</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> annotation.value(); <span class="comment">// 获取注解的值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h2><h3 id="双亲委派机制"><a href="#双亲委派机制" class="headerlink" title="双亲委派机制"></a>双亲委派机制</h3><blockquote><p>Java 类加载的一种机制，用于确保 Java 类加载的安全性和效率</p><p>它的核心思想是：</p><p>当一个类加载器接收到类加载请求时，它并不会自己直接去加载这个类，而是会把这个请求委派给它的父加载器去处理</p><p>只有在父加载器无法找到该类的情况下，当前加载器才会尝试加载该类</p></blockquote><p><img src="/../images/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/01%20JavaSE-1.jpg"></p><p><strong>工作原理</strong></p><ol><li><p><strong>类加载器层次结构</strong>：</p><p>在 Java 中，类加载器是以层次结构组织的</p><p>每个类加载器都有一个父类加载器，通常是 Java 的根类加载器（Bootstrap ClassLoader）是层次结构的最上层</p></li><li><p><strong>加载流程</strong>：</p><p>当一个类加载器接收到类加载请求时，它首先将请求转发给父加载器</p><p>父加载器尝试加载这个类：</p><ul><li><p>如果父加载器能够加载该类，则返回这个类</p></li><li><p>如果父加载器无法加载该类，当前类加载器才会尝试去加载这个类</p></li></ul></li></ol><p><strong>例子</strong></p><p>假设我们有一个类<code>A</code>，它被定义在用户项目中，同时也存在于 Java 核心库中</p><p>按照双亲委派机制，加载<code>A</code>的请求会首先被委派给根类加载器，根类加载器会查找核心库中的<code>A</code>类</p><p>如果找到了，加载器就会返回这个类；如果没有找到，委派给应用程序类加载器，然后才会去加载用户自定义的<code>A</code>类</p><p><strong>总结</strong></p><p>双亲委派机制是 Java 类加载的基础，确保了类加载过程的安全性和高效性</p><p>通过这一机制，Java 能够有效地管理类的加载和使用，维护 Java 应用程序的稳定性</p><h3 id="自定义类加载器"><a href="#自定义类加载器" class="headerlink" title="自定义类加载器"></a>自定义类加载器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String text;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        System.out.println(text + <span class="string">&quot; : &quot;</span> + str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过<code>javac</code>命令，手动编译一个<code>.class</code>文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac src/main/java/com/test/Test.java</span><br></pre></td></tr></table></figure><p>编写自定义类加载器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyClassLoader</span> <span class="keyword">extends</span> <span class="title class_">ClassLoader</span> &#123; <span class="comment">// 自定义类加载器</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; defineClass(String name, <span class="type">byte</span>[] b) &#123;</span><br><span class="line">        <span class="keyword">return</span> defineClass(name, b, <span class="number">0</span>, b.length); <span class="comment">// 调用 protected 方法，支持载入外部 class 文件</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">MyClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyClassLoader</span>();</span><br><span class="line">    <span class="type">FileInputStream</span> <span class="variable">stream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;Test.class&quot;</span>);</span><br><span class="line">    <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[stream.available()];</span><br><span class="line">    stream.read(bytes);</span><br><span class="line">    Class&lt;?&gt; clazz = classLoader.defineClass(<span class="string">&quot;com.test.Test&quot;</span>, bytes); <span class="comment">// 类名必须和定义的保持一致</span></span><br><span class="line">    System.out.println(clazz.getName()); <span class="comment">// 成功加载外部 class 文件</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> API </tag>
            
            <tag> 函数式接口 </tag>
            
            <tag> Stream 流 </tag>
            
            <tag> 正则匹配 </tag>
            
            <tag> 文件 </tag>
            
            <tag> 多线程 </tag>
            
            <tag> 注解 </tag>
            
            <tag> 反射 </tag>
            
            <tag> 锁 </tag>
            
            <tag> 定时器 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
